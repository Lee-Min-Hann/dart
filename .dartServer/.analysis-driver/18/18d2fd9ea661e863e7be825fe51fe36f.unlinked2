ÄƒDATA_VERSIONallowedNumberOfContextsToWrite
_scheduler_logger_resourceProvider
_byteStore_infoDeclarationStore_externalSummaries_fileContentCache_unlinkedUnitStore_fileContentStrategy	_packages_sourceFactorymacroSupport
ownedFilesdeclaredVariablesanalysisContext_saltForUnlinked_saltForElements_saltForResolution_priorityFiles_pendingFileChanges_accumulatedAffected_pendingFileChangesCompleters_requestedFiles_requestedLibraries_resolveForCompletionRequests_hasAvailableFilesDiscovered _definingClassMemberNameRequests_referencingNameRequests_errorsRequestedFiles_indexRequestedFiles_unitElementRequestedFiles_disposeRequests_lastProducedSignatures_priorityResults_resolvedLibraryCache_exceptionController_searchtestView_fsState_fileTrackerenableIndex_libraryContext_hasDartCoreDiscovered_hasLibrariesDiscoveredtestingData	_disposedanalysisOptionsMap
addedFilesaddedFiles2analysisOptionscurrentSessionenabledPluginNames
exceptionsfsStatehasPendingFileChanges
knownFileslibraryContextnamenumberOfFilesToAnalyzepriorityFilespriorityFiles2resourceProvider	schedulersearchsourceFactoryworkPriority_hasFilesToAnalyzeaddFileaddFile2applyPendingFileChangesbuildPackageBundle
changeFilechangeFile2clearLibraryContextdiscoverAvailableFilesdispose2getAnalysisOptionsForFilegetCachedResolvedUnitgetCachedResolvedUnit2	getErrorsgetFilesDefiningClassMemberNamegetFilesReferencingNamegetFileSyncgetFileSync2getIndex	getIndex2getLibraryByUrigetParsedLibrarygetParsedLibrary2getParsedLibraryByUrigetResolvedLibrarygetResolvedLibraryByUrigetResolvedUnitgetResolvedUnit2getUnitElementgetUnitElement2parseFileSyncparseFileSync2performWork
removeFileremoveFile2resolveForCompletion _addDeclaredVariablesToSignature_analyzeFile_analyzeFileImpl_applyPendingFileChanges"_clearLibraryContextAfterException_createErrorsResultFromBytes_createErrorsResultImpl_createFileTracker_createResolvedUnitImpl_discoverDartCore_discoverLibraries_ensureMacroGeneratedFiles	_fillSalt_fillSaltForElements_fillSaltForResolution_fillSaltForUnlinked
_getErrors_getErrorsFromSerialized _getFilesDefiningClassMemberName_getFilesReferencingName	_getIndex_getResolvedLibrary_getResolvedUnitKey_getResolvedUnitSignature_getUnitElement_hasLibraryByUri_isAbsolutePath_isLibraryWithPriorityFile_maybeDispose_newMissingDartLibraryResult
_onNewFile_produceErrors#_removePotentiallyAffectedLibraries_reportException_resolveForCompletion_storeExceptionContext_throwIfNotAbsolutePath_updateHasErrorOrWarningFlagnothinggeneralgeneralWithErrorsgeneralImportChangedgeneralChangedchangedFilespriorityinteractive
completion_MS_BEFORE_PUMPING_EVENT_QUEUE_NUMBER_OF_EVENT_QUEUE_PUMPINGSdriverWatchereventsController_events_drivers_hasWork_statusSupport_startedoutOfBandWorkeraccumulatedPerformanceevents	isStarted	isWorkingaddnotifyremovestartwaitForIdle_run_pumpEventQueue
fileSystemdrivernumOfAnalyzedLibrariesfileTrackerloadedLibraryUriSetpriorityResultsaddedDriverremovedDriverdecodeencode_lintCodeByUniqueNamefilePathfileContentMap	exception
contextKeyaddAddedaddKnownpathkindtoStringchange	completeroffsetperformanceAnalysisDriverAnalysisDriverPriorityAnalysisDriverSchedulerAnalysisDriverTestViewDriverWatcherErrorEncodingExceptionResult
OwnedFilesSchedulerWorker_FileChange_FileChangeKind'_GetFilesDefiningClassMemberNameRequest_GetFilesReferencingNameRequest_ResolveForCompletionRequestÅ≥AnalysisContextAnalysisEngineAnalysisOptionsAnalysisOptionsImplSourceFactoryAnalysisResultintPerformanceLogResourceProvider	ByteStoreInfoDeclarationStoreSummaryDataStoreContentCacheFileContentCacheUnlinkedUnitStoreStoredFileContentStrategyPackagesMacroSupportDeclaredVariablesDriverBasedAnalysisContext
Uint32ListStringList_applyFileChangesSynchronouslySet	CompleterSomeResolvedUnitResultSomeResolvedLibraryResultboolSomeErrorsResultAnalysisDriverUnitIndexSomeUnitElementResultvoidMapResolvedUnitResultResolvedLibraryResultImplStreamControllerSearchFileSystemStateFileTrackerLibraryContextTestingDataAnalysisOptionsMap
Deprecated	byteStorefileContentCache	ephemeralunlinkedUnitStoreUnlinkedUnitStoreImplinfoDeclarationStoreNoOpInfoDeclarationStoreloggerpackagesexternalSummariesretainDataForTestingdriverAssertionErroranalysisOptionsMapforSharedOptionsadd
addedFilesFilemapgetFiletoSetfirstOrDefaultAnalysisSessionImplelementFactoryanalysisSessionentrieseoptionsenabledPluginNamesflattenedToList2Streamstream
isNotEmpty	FileState
knownFilestestDatalibraryContextdeclaredVariablessourceFactorymacroSupportpackagesFilecontextRootfileSystemStaterootpathnumberOfPendingFilestoListgrowablekeys
differenceforEachremoveclearaddAllnotifyinteractive
completionisFilePendingprioritygeneralhasChangedFileschangedFileshasPendingChangedFilesgeneralChangedhasPendingImportFilesgeneralImportChangedhasPendingErrorFilesgeneralWithErrorshasPendingFilesnothinghasUriisDartpathContextFutureDisposedAnalysisContextResultfuturevalueuriListPackageBundleReader	Uint8ListUriPackageBundleSdkBundleWriter
dynamicRefPackageBundleBuilderuritoStringLibraryElementResultelementLibraryElementImplwriteLibraryElement
addLibraryunitssourcefinishresolutionBytessdkpackageBundleSdkchangedisposegetFileForPathdartSdksdkLibraries
mapDartUri
sdkLibrary	shortNamefullNameFoldergetChildrenchild
packageMapvaluesfoldercompleterListcompletecompleteErrorexperimental
getOptionsErrorsResultInvalidPathResultNotPathOfUriResultlibraryForMacroaddKeylibrary	completer
FileResultSomeFileResultFileResultImplsession	fileStateArgumentErrorSomeLibraryElementResulturiCacheparseisEmptyrootReferencegetChildLibraryElementResultImplgetFileForUriCannotResolveUriResultUriResolutionFilefilekindLibraryFileKindAugmentationFileKindNotLibraryButAugmentationResultPartFileKindNotLibraryButPartResultUnimplementedErrorruntimeType
unitResultUnitElementResultInvalidResultUnspecifiedInvalidResultUriResolutionExternalLibrarygetLibraryElementParsedLibraryResultSomeParsedLibraryResultParsedUnitResultfilesunitFileParsedLibraryResultImplUriOfExternalLibraryResultResolvedLibraryResultcachedsendCachedToStreameventsControllerSomeParsedUnitResultRecordingErrorListenerCompilationUnitParsedUnitResultImpluniterrorsremoveLastOrNullrequest	exception
stackTracefirstKeyanyPendingFileResolvedForCompletionResultImplOperationPerformanceImploffsetperformanceApiSignaturevariableNamesaddIntlengthget	addStringaccumulatedPerformancerunAsyncfileWasAnalyzed	asLibrarywritelnnumOfAnalyzedLibrariesAnalyzeFilecompleteAllloadtargetLibrary
docImportsimportLibraryImportWithFileimportedLibrarylibraryFileKindanalysisOptionslibraryOfUri2TypeSystemOperations
typeSystemstrictCastsLibraryAnalyzerinheritanceManagertestingDatatypeSystemOperationsanalyzeResolvedUnitResultImpl	indexUnitAnalysisDriverUnitIndexBuilder!AnalysisDriverResolvedUnitBuilderencodeerrorindextoBufferputGetfirstlibraryElement
fileChangeaddFile
changeFile
removeFileverifyChangedFilesIfNeededErrorsResultImplGetErrorsFromBytesAnalysisDriverResolvedUnit
fromBufferAnalysisErrorresourcecontentlineInfoisAugmentation	isLibraryisMacroAugmentationisPartFeatureSetProviderbuildresourceProvider	workspacefileContentStrategyprefetchFilesisGenerated	onNewFile
fileSystemUnitAnalysisResultdiscoverReferencedFileslibraryKindlibraryCycleimportsMacroClasshasMacroFilesCreatedtoUint32ListaddBoolenableDebugResolutionMarkerscontributeToResolutionSaltAnalysisDriverUnitErrordecodedefinedClassMemberNamescontainsnamereferencedNamesaddUint32ListworkspacePackage
PubPackagepubspecContenturiStrapiSignature	signaturecontentHashtoHexcomputeUnitElementUnitElementResultImplexists
isAbsolutetmp	errorCodeCompileTimeErrorCodeMISSING_DART_LIBRARY	arguments
ownedFilesaddAddedaddKnownbytescollectAffectedinvalidateLibraryCyclereplaceAnalysisSessionObject
StackTraceCaughtExceptionCaughtExceptionWithFilesfileContentMapnestedkeyfilePath
contextKeyanalysisContextgetAnalysisOptionsForFileanalyzeForCompletionunitElement
parsedUnitresolvedNodes"AnalysisDriverExceptionFileBuildersorta	compareTob%AnalysisDriverExceptionContextBuilderDateTimenowmonthdayhourminutesecondmillisecondyearhasErrorOrWarningErrorSeverityerrorSeverityERRORMonitorStatusSupportAnalysisStatusWorkingAnalysisStatusIdlepriorityFilesgetResolvedUnitgetResolvedLibrarycurrentStatus	isWorking_hasFilesToAnalyzeaddedDrivertransitionToWorkingremovedDriver
StateErrorwaitForIdle	StopwatchstartPerformanceLogSectionelapsedMillisecondsresetsignal_maybeDispose_applyPendingFileChangesenterworkPriorityperformWorktransitionToIdleexitdelayedDurationzeroFileSystemTestDataLibraryContextTestDatafileSystemTestData_fileTrackerchildren_priorityResultsSource
uniqueName	ErrorCodeerrorCodeByUniqueNameinstanceinstrumentationServicelogErrorDiagnosticMessageImplcontextMessagesmessageurl	forValuescorrectionMessage
correctionAnalysisDriverUnitErrorBuilderDiagnosticMessageBuildermessageText
includeUrlRegistryruleRegistrycodeForUniqueNamecontainsKeyoverrideKVremoveSuffix	noExtPathprovider ;C∑R~ËŒQ∫_e—m¿ı  7  ÄŸ  
dart:async  ÄÓ  dart:typed_data  Å	  6package:analyzer/dart/analysis/declared_variables.dart  ÅJ  +package:analyzer/dart/analysis/results.dart  ÅÄ  "package:analyzer/dart/ast/ast.dart  Å≠  !package:analyzer/error/error.dart  ÅŸ  $package:analyzer/error/listener.dart  Ç  )package:analyzer/exception/exception.dart  Ç<  -package:analyzer/file_system/file_system.dart  Çt  #package:analyzer/source/source.dart  Ç¢  *package:analyzer/src/context/packages.dart  Ç◊  <package:analyzer/src/dart/analysis/analysis_options_map.dart  É  2package:analyzer/src/dart/analysis/byte_store.dart  É[  Epackage:analyzer/src/dart/analysis/driver_based_analysis_context.dart  É´  ÉËeventsÉÎ4package:analyzer/src/dart/analysis/driver_event.dart  ÉÙ  <package:analyzer/src/dart/analysis/feature_set_provider.dart  Ñ;  :package:analyzer/src/dart/analysis/file_content_cache.dart  ÑÄ  2package:analyzer/src/dart/analysis/file_state.dart  ÑΩ  4package:analyzer/src/dart/analysis/file_tracker.dart  Ñ¸  -package:analyzer/src/dart/analysis/index.dart  Ö4  >package:analyzer/src/dart/analysis/info_declaration_store.dart  Ö}  8package:analyzer/src/dart/analysis/library_analyzer.dart  Ö¿  7package:analyzer/src/dart/analysis/library_context.dart  Ü  :package:analyzer/src/dart/analysis/performance_logger.dart  ÜG  /package:analyzer/src/dart/analysis/results.dart  ÜÅ  .package:analyzer/src/dart/analysis/search.dart  Ü∫  /package:analyzer/src/dart/analysis/session.dart  ÜÙ  .package:analyzer/src/dart/analysis/status.dart  á-  4package:analyzer/src/dart/analysis/testing_data.dart  ál  ;package:analyzer/src/dart/analysis/unlinked_unit_store.dart  á≤  .package:analyzer/src/dart/element/element.dart  áÎ  =package:analyzer/src/dart/resolver/flow_analysis_visitor.dart  à3  /package:analyzer/src/diagnostic/diagnostic.dart  àm  %package:analyzer/src/error/codes.dart  àù  -package:analyzer/src/exception/exception.dartââVAnalysisContextAnalysisEngineAnalysisOptionsAnalysisOptionsImpl à’  *package:analyzer/src/generated/engine.dartâåâûSourceFactory âY  *package:analyzer/src/generated/source.dart  â°  â—linterâ‘'package:analyzer/src/lint/registry.dart  â›  /package:analyzer/src/summary/api_signature.dart  ä  (package:analyzer/src/summary/format.dart  äJ  %package:analyzer/src/summary/idl.dart  äz  7package:analyzer/src/summary/package_bundle_reader.dart  äº  3package:analyzer/src/summary2/ast_binary_flags.dart  ä˙  0package:analyzer/src/summary2/bundle_writer.dart  ã5  (package:analyzer/src/summary2/macro.dart  ãh  8package:analyzer/src/summary2/package_bundle_format.dart  ã´  ã›
file_pathsã‡)package:analyzer/src/util/file_paths.dart  ãÌ  @package:analyzer/src/util/performance/operation_performance.dart  å8  4package:analyzer/src/utilities/extensions/async.dart  åw  9package:analyzer/src/utilities/extensions/collection.dart  åª  5package:analyzer/src/utilities/extensions/string.dart  å˚  -package:analyzer/src/utilities/uri_cache.dart  ç3  'package:analyzer/src/workspace/pub.dart  çe  package:meta/meta.dart    	dart:core¿ ê© ¿]äy MÄõÄ◊ÄÿÄÌÅÅÅIÅÅ¨ÅÿÇÇ;ÇsÇ°Ç÷ÉÉZÉ™ÉÛÑ:ÑÑºÑ˚Ö3Ö|ÖøÜÜFÜÄÜπÜÛá,áká±áÍà2àlàúà‘ââXâ†â‹ääIäyäªä˘ã4ãgã™ãÏå7åvå∫å˙ç2çdçÖçÜçøç√éébéØé¸èKèõè·ê'ê[ê_ê¨ê·êÂëëëcëîëòë‚í,íyí±íµììXìçìëì‹î+î}îÅîƒî€ï+ïRïSïüïÁñññgññ´ñ¨ñÔóóóDópóqó®óÆó„òòòDòJòò≥ò¥ôôOôdôíôìô‹ô˝ö)ö*ösöäö∏öπöˆö˜õ>õZõ[õßõæõ‰õÂúú1ú2ú}ú≤ú“ú”ú˝ù*ù+ùjùôùöù‡ûûûQûÄûÅû≈ûˆû˜ü8ü]ü^ü®ü‹ü›†'†?†h†i†≥†¯†˘°A°É°“°”¢¢`¢~¢º¢Ω¢È£8£9£s£†£°£Ï§§J§K§É§À§Ã••O•û•ü•Ë¶#¶B¶¶Ä¶–ßß6ßpßqßø®®B®C®ê® ®À®ˆ©5©6©d©Ø©∞©‚™#™N™O™z™ó™ò™¬™√™‰™Â´´3´4´d´~´´∏´€´‹¨¨?¨@¨â¨”¨≠≠≠b≠ó≠π≠∫≠‘≠’ÆÆNÆOÆÄÆÜÆ’ØØ2ØbØÜØ∂Øÿ∞∞"∞9∞N∞h∞ú∞∆∞Ú±±D±t±í±ª±Â≤≤≤?≤m≤ç≤©≤˜≥B≥b≥¢≥º≥⁄¥¥2¥x¥º¥‡¥˝¥˛µµxµØµ∂∂b∂h∂ã∂´∂Î∂¯∑n∑£∑©∑™∑Û∑Ù∏∏(∏D∏H∏I∏ï∏Œ∏œ∏ÁππBπFπGπÉπ¬∫∫∫:∫e∫ü∫£∫§∫Ùª
ªNª~ªóªòª“ºººAºlºmº±º≤ΩΩQΩÑΩºΩΩΩ˝æ#æRæ|æÆæ≈æ‚øøCøoøîø∂øı¿ @"¿ @C¿ @J¿ @N¿ @O¿ @è¿ @“¿ @”¿ A¿ AS¿ AT¿ A°¿ AÌ¿ AÓ¿ B8¿ B>¿ B|¿ BÇ¿ BÕ¿ C¿ C`¿ Cí¿ C¨¿ CΩ¿ CË¿ D¿ D/¿ DY¿ Dr¿ Dv¿ Dw¿ Dí¿ Dª¿ DÚ¿ Dˆ¿ D˜¿ EC¿ EÅ¿ EÇ¿ Eπ¿ E∫¿ EÍ¿ F
¿ F¿ FZ¿ Fq¿ F¶¿ Fß¿ FÎ¿ G¿ G>¿ Go¿ Gu¿ G©¿ GŸ¿ Gﬂ¿ H¿ H6¿ H<¿ Hf¿ Hó¿ Hù¿ H‘¿ I¿ I¿ I:¿ Ik¿ Iq¿ Iù¿ IŒ¿ I‘¿ Iˇ¿ J0¿ J6¿ Jg¿ Jò¿ Jû¿ J√¿ JÔ¿ K¿ KQ¿ K[¿ Kc¿ Ki¿ Kì¿ K¿¿ K∆¿ KÓ¿ L ¿ L&¿ LU¿ Lâ¿ Lè¿ LΩ¿ L˜¿ L˝¿ M*¿ Ma¿ Mg¿ Mè¿ Mº¿ M¬¿ Mˆ¿ N#¿ N)¿ NT¿ NX¿ NY¿ Nâ¿ N©¿ NÕ¿ Nı¿ O¿ OG¿ Om¿ Oô¿ O–¿ Oˇ¿ P*¿ P[¿ PÄ¿ PÑ¿ PÖ¿ P÷¿ PÏ¿ PÚ¿ Q$¿ Q*¿ Qx¿ Qñ¿ Qπ¿ Q€¿ QÈ¿ QÔ¿ R0¿ RP¿ Ru¿ Rî¿ Rƒ¿ RÕ¿ RË¿ RÓ¿ RÚ¿ RÛ¿ S¿ S%¿ S=¿ SA¿ SB¿ Së¿ S–¿ S÷¿ T¿ Tn¿ T∫¿ U¿ UQ¿ Uö¿ UÕ¿ U˜¿ V3¿ Vd¿ Vò¿ V∑¿ Vƒ¿ W¿ W$¿ WT¿ WZ¿ W^¿ W_¿ W´¿ Wﬁ¿ W‰¿ X¿ X?¿ X_¿ Xá¿ Xî¿ XÃ¿ XÕ¿ XÚ¿ Y¿ Y¿ YQ¿ YR¿ Yq¿ Yî¿ YÕ¿ Z ¿ ZJ¿ ZÑ¿ ZÖ¿ ZÆ¿ Z¿¿ ZÈ¿ [¿ [,¿ [7¿ [?¿ [E¿ [F¿ [y¿ [z¿ [¢¿ [‹¿ [˘¿ \ ¿ \¿ \¿ \Q¿ \†¿ \¶¿ \ÿ¿ \ﬁ¿ ]0¿ ]6¿ ]Ç¿ ]œ¿ ^¿ ^8¿ ^>¿ ^à¿ ^’¿ _"¿ _A¿ _b¿ _Ö¿ _ß¿ _µ¿ _ª¿ _¸¿ `¿ `A¿ ``¿ `ì¿ `ú¿ `∑¿ `Ω¿ `¡¿ `¬¿ `⁄¿ `˙¿ a¿ a¿ a¿ ah¿ a¥¿ b¿ bS¿ bg¿ bÜ¿ b¶¿ b¬¿ b∆¿ b«¿ c¿ cc¿ cì¿ cª¿ c…¿ cœ¿ c¯¿ c˘¿ d¿ d9¿ d^¿ dd¿ de¿ dÑ¿ d∏¿ dÌ¿ e,¿ eQ¿ ex¿ eÄ¿ eÜ¿ eá¿ eµ¿ e¡¿ e˘¿ f+¿ fJ¿ fm¿ f•¿ f“¿ f‡¿ g¿ g0¿ g<¿ gF¿ g[¿ ga¿ gb¿ gê¿ g ¿ h¿ h&¿ hK¿ hS¿ hY¿ h]¿ h^¿ h°¿ h√¿ hÍ¿ i ¿ i%¿ i&¿ iN¿ iä¿ i∑¿ iÙ¿ i¸¿ j¿ j#¿ j$¿ j\¿ jâ¿ j∆¿ jŒ¿ j‘¿ jÒ¿ jÚ¿ k5¿ kb¿ kü¿ kß¿ k≠¿ k’¿ k÷¿ l¿ lA¿ l~¿ lÜ¿ lå¿ lØ¿ l∞¿ lÎ¿ m+¿ m1¿ m\¿ m]¿ mv¿ mì¿ mó¿ mò¿ mﬂ¿ n.¿ n>¿ n|¿ nß¿ n®¿ nˆ¿ oF¿ oj¿ op¿ o¢¿ o®¿ o˙¿ p5¿ pX¿ p{¿ p¿ pÄ¿ p£¿ p›¿ q¿ q	¿ q
¿ qV¿ qx¿ q~¿ q∞¿ q∂¿ r¿ rF¿ rÄ¿ r¢¿ rΩ¿ r⁄¿ r„¿ rÈ¿ rÍ¿ s¿ s'¿ sE¿ sN¿ sT¿ sU¿ sj¿ sÖ¿ sÆ¿ s∑¿ sΩ¿ sæ¿ s˝¿ t,¿ t^¿ tê¿ tñ¿ tó¿ t±¿ t‰¿ u¿ u-¿ uJ¿ uN¿ uO¿ uñ¿ uÂ¿ v	¿ vJ¿ v}¿ vñ¿ vª¿ vø¿ v¿¿ w¿ wL¿ wp¿ w©¿ w‘¿ wÌ¿ x¿ x¿ x¿ x^¿ xd¿ xñ¿ x¬¿ x‰¿ y¿ y¿ y¿ yA¿ y\¿ y{¿ yí¿ yô¿ yù¿ yû¿ y∑¿ y‚¿ z¿ z	¿ z
¿ zX¿ z£¿ z≥¿ zÓ¿ {¿ {)¿ {`¿ {f¿ {à¿ {•¿ {´¿ {¨¿ {Î¿ |¿ |L¿ |}¿ |É¿ |Ñ¿ |û¿ |Ÿ¿ }¿ }!¿ }>¿ }B¿ }C¿ }Y¿ }ì¿ }≥¿ }∑¿ }∏¿ ~	¿ ~W¿ ~û¿ ~Â¿ ¿ ¿ =¿ d¿ ´¿ ‰¿ Ä¿ Ä6¿ Äh¿ Äp¿ Äv¿ Äw¿ Ä®¿ Äæ¿ Äœ¿ Ä¯¿ Å!¿ Å?¿ Åf¿ Åô¿ ÅÕ¿ Å¯¿ Ç$¿ Ç5¿ Çx¿ ÇÇ¿ ÇÉ¿ ÇΩ¿ ÇÏ¿ É3¿ É=¿ É>¿ ÉÑ¿ É∫¿ ÉÂ¿ Ñ¿ ÑT¿ Ñ^¿ Ñ_¿ Ñ}¿ Ñ®¿ Ñﬁ¿ Ñ¸¿ Ö?¿ Ö|¿ ÖÆ¿ Ö¥¿ Ö∏¿ Öπ¿ Ü¿ Ü¿ Ü=¿ Üw¿ Üô¿ Üª¿ Ü¡¿ Ü¬¿ Ü‰¿ á¿ á¿ á¿ á<¿ áV¿ áy¿ á®¿ áÿ¿ áˇ¿ à'¿ à4¿ às¿ ày¿ àz¿ à†¿ à«¿ àÎ¿ â¿ âH¿ âs¿ â{¿ âò¿ âû¿ âü¿ â√¿ â‚¿ âˆ¿ â˝¿ ä¿ ä¿ ä ¿ äY¿ äÅ¿ äÖ¿ äÜ¿ ä—¿ ã¿ ã:¿ ãP¿ ãa¿ ãä¿ ã≥¿ ãﬂ¿ å
¿ å7¿ å=¿ åA¿ åB¿ åê¿ å‡¿ ç¿ ç¿ çN¿ çT¿ ç¶¿ ç¨¿ ç˜¿ éE¿ éì¿ é‹¿ è'¿ è8¿ èÑ¿ è¶¿ è»¿ èŒ¿ èœ¿ èÒ¿ ê¿ ê¿ ê¿ ê0¿ êK¿ êt¿ ê}¿ êÉ¿ êÑ¿ êº¿ ê—¿ ê◊¿ êÿ¿ ë¿ ëB¿ ë[¿ ëx¿ ë|¿ ë}¿ ëÀ¿ í¿ íP¿ íV¿ í°¿ íÔ¿ ì=¿ ìÜ¿ ì—¿ ì‚¿ î/¿ î]¿ îs¿ îÑ¿ î≠¿ î÷¿ ï¿ ï/¿ ï\¿ ïb¿ ïf¿ ïg¿ ï∂¿ ï˛¿ ñ4¿ ñ:¿ ñl¿ ñr¿ ñƒ¿ ñ ¿ ó¿ ój¿ ó™¿ ó∞¿ óˇ¿ òQ¿ ò°¿ òÔ¿ ô$¿ ôb¿ ôç¿ ôØ¿ ô ¿ ôÁ¿ ô¿ ôˆ¿ ô˜¿ ö¿ ö4¿ öR¿ ö[¿ öa¿ öb¿ öÉ¿ öâ¿ ö…¿ öÂ¿ õ¿ õ:¿ õD¿ õi¿ õq¿ õw¿ õx¿ õç¿ õ®¿ õ—¿ õ⁄¿ õ‡¿ õ·¿ ú ¿ úO¿ úÅ¿ ú≠¿ ú≥¿ ú¥¿ úŒ¿ ù¿ ù1¿ ùJ¿ ùg¿ ùk¿ ùl¿ ùâ¿ ù∆¿ ùÒ¿ û¿ û¿ ûL¿ ûS¿ ûW¿ ûX¿ û†¿ û ¿ ü¿ ü*¿ üE¿ üb¿ ük¿ üq¿ ür¿ üî¿ üØ¿ üÕ¿ ü÷¿ ü‹¿ ü›¿ üÚ¿ †¿ †6¿ †?¿ †E¿ †F¿ †}¿ †√¿ †Ú¿ °$¿ °[¿ °a¿ °b¿ °|¿ °¥¿ °È¿ ¢¿ ¢¿ ¢#¿ ¢$¿ ¢@¿ ¢}¿ ¢£¿ ¢ß¿ ¢®¿ ¢Ó¿ ¢Ù¿ £&¿ £,¿ £~¿ £Ñ¿ £œ¿ §¿ §0¿ §d¿ §Ü¿ §®¿ §Æ¿ §Ø¿ §„¿ •#¿ •T¿ •u¿ •î¿ •´¿ •Ω¿ •‹¿ •„¿ •Á¿ •Ë¿ ¶¿ ¶6¿ ¶[¿ ¶_¿ ¶`¿ ¶õ¿ ¶¿¿ ¶Ÿ¿ ¶Û¿ ¶Ù¿ ßB¿ ßN¿ ßâ¿ ßµ¿ ß›¿ ®"¿ ®b¿ ®ê¿ ®ò¿ ®¶¿ ®¨¿ ®≠¿ ®Œ¿ ©¿ ©!¿ ©/¿ ©5¿ ©6¿ ©Z¿ ©ë¿ ©∏¿ ©∆¿ ©Ã¿ ©Õ¿ ©Ó¿ ™'¿ ™E¿ ™S¿ ™Y¿ ™Z¿ ™{¿ ™≥¿ ™–¿ ™ﬁ¿ ™‰¿ ™Â¿ ´¿ ´J¿ ´m¿ ´{¿ ´Å¿ ´Ç¿ ´∞¿ ¨¿ ¨8¿ ¨F¿ ¨L¿ ¨M¿ ¨v¿ ¨ø¿ ¨Ó¿ ¨¸¿ ≠¿ ≠¿ ≠#¿ ≠J¿ ≠x¿ ≠ö¿ ≠™¿ ≠≤¿ ≠∏¿ ≠π¿ ≠ÿ¿ Æ¿ Æ0¿ Æ>¿ ÆD¿ ÆH¿ ÆI¿ Æò¿ Æû¿ Æ–¿ Æ÷¿ Ø¿ Øk¿ Øé¿ ØØ¿ Ø“¿ ØÙ¿ ∞¿ ∞¿ ∞I¿ ∞u¿ ∞ï¿ ∞∫¿ ∞Ÿ¿ ±¿ ±¿ ±0¿ ±6¿ ±:¿ ±;¿ ±S¿ ±s¿ ±é¿ ±í¿ ±ì¿ ±’¿ ±Ô¿ ≤¿ ≤;¿ ≤H¿ ≤x¿ ≤ä¿ ≤†¿ ≤¿¿ ≤«¿ ≤˜¿ ≥¿ ≥5¿ ≥9¿ ≥:¿ ≥y¿ ≥≤¿ ≥€¿ ≥‹¿ ¥¿ ¥1¿ ¥O¿ ¥o¿ ¥u¿ ¥y¿ ¥z¿ ¥´¿ ¥‡¿ ¥ı¿ µ¿ µ1¿ µG¿ µk¿ µv¿ µ¿ µÜ¿ µä¿ µã¿ µ≠¿ µ«¿ µ˙¿ ∂¿ ∂B¿ ∂v¿ ∂û¿ ∂ü¿ ∂Õ¿ ∂Œ¿ ∑¿ ∑,¿ ∑^¿ ∑_¿ ∑§¿ ∑¿ ∏¿ ∏$¿ ∏P¿ ∏y¿ ∏ó¿ ∏Ø¿ ∏Õ¿ ∏⁄¿ ∏Â¿ ∏Ê¿ π¿ πA¿ πS¿ πê¿ πù¿ πØ¿ ππ¿ π∫¿ πÈ¿ ∫¿ ∫(¿ ∫f¿ ∫s¿ ∫Ö¿ ∫è¿ ∫ê¿ ∫¥¿ ∫–¿ ∫¿ ª¿ ª=¿ ªe¿ ªt¿ ªÅ¿ ªå¿ ªç¿ ªæ¿ ªÔ¿ º3¿ º\¿ ºå¿ ºÕ¿ ºﬁ¿ ºÏ¿ º¯¿ Ω¿ Ω¿ Ω7¿ ΩT¿ Ωü¿ Ωÿ¿ Ωˇ¿ æ6¿ æ7¿ æ^¿ æy¿ æñ¿ æ∞¿ æ¸¿ ø¿ ø3¿ øi¿ ø~¿ ø¿ øÃ¿ øÕ¿ ¿¿ ¿/¿ ¿Y¿ ¿Z¿ ¿|¿ ¿ß¿ ¿Ÿ¿ ¿⁄¿ ¡¿ ¡,¿ ¡P¿ ¡]¿ ¡à¿ ¡â¿ ¡®¿ ¡Ï¿ ¡Ì¿ ¬¿ ¬3¿ ¬N¿ ¬s¿ ¬ë¿ ¬∫¿ ¬…¿ ¬÷¿ ¬◊¿ ¬Ô¿ √1¿ √2¿ √~¿ √ä¿ √»¿ ƒ¿ ƒ=¿ ƒq¿ ƒå¿ ƒ®¿ ƒ¬¿ ƒı¿ ≈¿ ≈¿ ≈9¿ ≈r¿ ≈´¿ ≈¨¿ ≈◊¿ ∆¿ ∆¿ ∆ ¿ ∆g¿ ∆q¿ ∆r¿ ∆©¿ ∆Ã¿ «¿ «#¿ «.¿ «/¿ «X¿ «ú¿ «¶¿ «ß¿ ««¿ »¿ »¿ »B¿ »|¿ »ñ¿ »æ¿ »◊¿ …!¿ …d¿ …e¿ …ù¿ …·¿  ¿  5¿  s¿  Å¿  ç¿  ó¿  ò¿  ø¿  È¿ À¿ À%¿ ÀT¿ Àa¿ Àz¿ Àó¿ ÀÃ¿ ÀŸ¿ À„¿ Ã¿ Ã¿ ÃW¿ Ãb¿ Ãê¿ Ãò¿ Ã†¿ Ã§¿ Ã•¿ Ã…¿ ÃÛ¿ Õ%¿ ÕG¿ Õç¿ ÕÆ¿ Õ–¿ Õˆ¿ Œ¿ ŒD¿ Œi¿ Œí¿ Œ‹¿ œ#¿ œD¿ œL¿ œR¿ œs¿ œt¿ œπ¿ œÚ¿ œÛ¿ –'¿ –f¿ –ì¿ –Ω¿ –Ÿ¿ —¿ —¿ —¿ —¿ —¿ —¿ —g¿ —≥¿ —˝¿ “G¿ “u¿ “ê¿ “Æ¿ “—¿ “’¿ “÷¿ ”¿ ”¿ ”8¿ ”M¿ ”S¿ ”x¿ ”ô¿ ”≠¿ ”«¿ ”–¿ ”◊¿ ‘¿ ‘R¿ ‘Ç¿ ‘¨¿ ‘æ¿ ‘‘¿ ‘€¿ ‘Ó¿ ‘Ú¿ ‘Û¿ ’ ¿ ’=¿ ’f¿ ’m¿ ’ä¿ ’©¿ ’ƒ¿ ’·¿ ÷ ¿ ÷¿ ÷N¿ ÷}¿ ÷≤¿ ÷€¿ ÷Ò¿ ◊¿ ◊%¿ ◊)¿ ◊*¿ ◊i¿ ◊o¿ ◊æ¿ ◊Õ¿ ◊Î¿ ◊¸¿ ◊˝¿ ÿ4¿ ÿX¿ ÿÉ¿ ÿû¿ ÿ•¿ ÿ¶¿ ÿ∆¿ ÿ’¿ ÿÁ¿ Ÿ ¿ Ÿ¿ Ÿ!¿ ŸO¿ Ÿh¿ ŸÄ¿ Ÿò¿ Ÿ≤¿ ŸÃ¿ Ÿ˝¿ ⁄*¿ ⁄E¿ ⁄f¿ ⁄É¿ ⁄©¿ ⁄∞¿ ⁄˘¿ ⁄˝¿ ⁄˛¿ €1¿ €N¿ €z¿ €Å¿ €§¿ €√¿ €⁄¿ €˜¿ ‹¿ ‹¿ ‹#¿ ‹$¿ ‹j¿ ‹∞¿ ‹˙¿ › ¿ ›H¿ ›î¿ ›‚¿ ﬁ/¿ ﬁ{¿ ﬁ©¿ ﬁØ¿ ﬁ˚¿ ﬂ¿ ﬂ(¿ ﬂJ¿ ﬂX¿ ﬂ^¿ ﬂÅ¿ ﬂÇ¿ ﬂµ¿ ﬂ˜¿ ‡*¿ ‡Y¿ ‡~¿ ‡¶¿ ‡Æ¿ ‡¥¿ ‡∏¿ ‡π¿ ‡◊¿ ‡˙¿ ·¿ ·¿ ·2¿ ·3¿ ·c¿ ·à¿ ·é¿ ·í¿ ·ì¿ ·«¿ ·Û¿ ‚+¿ ‚`¿ ‚é¿ ‚¬¿ ‚¯¿ „A¿ „h¿ „í¿ „—¿ „‡¿ „Ï¿ „ˆ¿ „˛¿ ‰¿ ‰¿ ‰	¿ ‰¿ ‰:¿ ‰V¿ ‰t¿ ‰x¿ ‰y¿ ‰ô¿ ‰∫¿ ‰€¿ Â	¿ Â7¿ Â;¿ Â<¿ Â^¿ Â¿ Â†¿ Â¡¿ ÂÛ¿ Ê!¿ Ê"¿ Ê^¿ Êë¿ Êí¿ Ê¬¿ Ê∆¿ Ê«¿ ÊÁ¿ Á¿ Á)¿ ÁJ¿ ÁK¿ Áy¿ Á}¿ Á~¿ Á≠¿ Á€¿ Á‹¿ Ë ¿ Ë:¿ Ël¿ Ëm¿ Ëì¿ Ë—¿ Ëˇ¿ È ¿ È%¿ È>¿ ÈÖ¿ Èº¿ È ¿ È–¿ È—¿ ÈÔ¿ ÈÛ¿ ÈÙ¿ Í5¿ Íe¿ Íß¿ Í€¿ Î¿ ÎW¿ Îz¿ Îù¿ Î•¿ Î´¿ Îæ¿ Î¬¿ Î√¿ ÎÙ¿ Ï)¿ Ï5¿ Ï]¿ Ï^¿ Ï~¿ Ï°¿ Ï‚¿ Ï¸¿ Ì¿ Ì
¿ Ì2¿ Ì6¿ Ì7¿ Ì`¿ Ìç¿ Ìô¿ Ì¡¿ Ì¬¿ Ì‚¿ Ó¿ Ó>¿ ÓX¿ Ó`¿ Óf¿ Óé¿ Óí¿ Óì¿ Ó¡¿ ÓÔ¿ Ó¿ Ô4¿ ÔN¿ ÔÄ¿ ÔÅ¿ Ôß¿ ÔÂ¿ ¿ ¿ 9¿ R¿ ë¿ Ã¿ ⁄¿ ‡¿ ·¿ ˇ¿ Ò¿ Ò¿ Ò6¿ Òn¿ Òú¿ Ò∂¿ Ò ¿ ÒË¿ Ò˜¿ Ú¿ ÚC¿ ÚS¿ ÚÄ¿ Úã¿ Úõ¿ Ú∂¿ Úﬂ¿ ÚÔ¿ Û¿ Û¿ Û/¿ Û>¿ Û¿ ÛÖ¿ ÛÜ¿ Ûæ¿ ÛÛ¿ Ù¿ Ù¿ Ù¿ Ù&¿ Ù*¿ Ù+¿ Ùu¿ Ù¶¿ Ù»¿ ÙÃ¿ ÙÕ¿ ı¿ ı^¿ ı¨¿ ıŸ¿ ˆ
¿ ˆ9¿ ˆT¿ ˆõ¿ ˆ°¿ ˆœ¿ ˜¿ ˜P¿ ˜v¿ ˜°¿ ˜ø¿ ˜√¿ ˜ƒ¿ ˜¯¿ ¯,¿ ¯-¿ ¯q¿ ¯ã¿ ¯Ω¿ ¯æ¿ ¯›¿ ¯˚¿ ˘2¿ ˘9¿ ˘:¿ ˘~¿ ˘¶¿ ˘≈¿ ˘‹¿ ˘Ù¿ ˘˚¿ ˘¸¿ ˙6¿ ˙:¿ ˙;¿ ˙d¿ ˙ä¿ ˙∏¿ ˙’¿ ˙Í¿ ˚¿ ˚K¿ ˚R¿ ˚V¿ ˚W¿ ˚}¿ ˚∏¿ ˚º¿ ˚Ω¿ ˚˙¿ ¸ ¿ ¸P¿ ¸e¿ ¸m¿ ¸s¿ ¸Ö¿ ¸â¿ ¸ä¿ ¸±¿ ¸ÿ¿ ¸˜¿ ˝¿ ˝¿ ˝N¿ ˝l¿ ˝t¿ ˝z¿ ˝~¿ ˝¿ ˝«¿ ˝˛¿ ˛/¿ ˛Z¿ ˛ì¿ ˛∞¿ ˛œ¿ ˛Í¿ ˇ¿ ˇ&¿ ˇ;¿ ˇt¿ ˇ£¿ ˇÿ¿ ¿ ¿ ,¿ K¿ `¿ u¿ µ¿ ÿ¿ „¿ Ï¿¿ ¿$¿%¿I¿o¿ç¿π¿Ê¿ı¿"¿*¿0¿4¿5¿h¿ñ¿ó¿€¿ı¿'¿(¿[¿z¿ò¿œ¿÷¿◊¿¿P¿v¿≥¿·¿¿,¿;¿C¿D¿Ñ¿¥¿µ¿‹¿˜¿¿"¿*¿+¿M¿¿Ö¿Ü¿≈¿‰¿¿K¿|¿}¿ø¿˛¿¿¿¿G¿ê¿»¿	¿	7¿	?¿	q¿	¿	Ö¿	Ü¿	º¿	⁄¿	ﬁ¿	ﬂ¿
¿
0¿
A¿
G¿
i¿
ó¿
ò¿
∫¿
Ó¿
Ô¿:¿[¿w¿ú¿√¿À¿ı¿˚¿¸¿8¿Y¿`¿d¿e¿≥¿œ¿¿¿B¿C¿M¿}¿ù¿«¿Ë¿¿J¿T¿c¿Ö¿∑¿ø¿—¿¿[¿a¿b¿ì¿–¿¿¿¿¿<¿S¿k¿ì¿Æ¿Œ¿◊¿ﬁ¿‚¿„¿%¿O¿[¿°¿¿¿‰¿˘¿¿¿&¿;¿C¿D¿t¿u¿ª¿◊¿¿¿.¿H¿f¿ã¿Ø¿’¿‚¿Ì¿ˆ¿@¿{¿∞¿À¿¿e¿ö¿õ¿«¿‡¿˚¿¿]¿n¿ê¿ƒ¿‚¿ˆ¿¿8¿Z¿c¿d¿í¿ª¿‘¿Ë¿ˇ¿¿;¿\¿ã¿≠¿‚¿Î¿Û¿˜¿¯¿?¿p¿ü¿≤¿ø¿Á¿Ì¿˜¿¿[¿í¿ß¿‰¿!¿R¿l¿õ¿Ã¿¿¿¿>¿`¿v¿~¿¿°¿ƒ¿Á¿˛¿¿¿-¿U¿{¿¢¿Õ¿¯¿)¿m¿n¿ì¿•¿∑¿ ¿–¿‘¿’¿$¿S¿Å¿£¿Í¿¿Ù¿ı¿ :¿ d¿ â¿ Ω¿ Á¿!%¿!R¿!y¿!â¿!ë¿!ó¿!ª¿!ø¿!¡¿!¬¿"¿"c¿"x¿"ñ¿"°¿"¨¿"¡¿"Ÿ¿"Î¿"˚¿#¿#¿##¿#%¿#&¿#v¿#≠¿#Õ¿$¿$¿$f¿$¥¿$Ù¿%+¿%,¿%z¿% ¿&¿&B¿&H¿&ì¿&‡¿'/¿'i¿'j¿'ä¿'ã¿'◊¿'˝¿'˛¿((¿(x¿(y¿(ß¿(Ê¿(Á¿)¿)9¿):¿)u¿)ù¿)¢¿)£¿)º¿)Ω¿*¿*/¿*5¿*n¿*í¿*ì¿*»¿*Œ¿+¿+_¿+ò¿+Ã¿+˚¿+¸¿,;¿,<¿,ä¿,ò¿,û¿,ﬁ¿,‰¿-0¿-}¿-Œ¿-˛¿.¿.Q¿.ì¿.’¿/¿/B¿/H¿/ï¿/¿¿/∆¿0¿0d¿0®¿0Æ¿0˙¿1G¿1Ç¿1à¿1´¿1Ï¿2*¿2y¿2¬¿2Í¿2Î¿3¿3¿3L¿3c¿3ñ¿3ö¿3õ¿3‹¿3¸¿4¿4F¿4[¿4c¿4i¿4{¿4¿4Ä¿4¬¿4Ê¿5 ¿5¿5A¿5k¿5q¿5u¿5v¿5≥¿5≈¿5‹¿6¿6
¿6¿6V¿6{¿6¢¿6Ã¿6È¿7 ¿7¿7¿7O¿7z¿7ã¿7ü¿7‚¿7Ë¿7˝¿8	¿8¿8¿8]¿8c¿8Ø¿8¬¿9 ¿9¿9M¿9c¿9Å¿9œ¿9ﬂ¿:¿:7¿:J¿:i¿:±¿:Ò¿;¿;¿;¿;.¿;/¿;]¿;É¿;ã¿;å¿;±¿;‹¿;‰¿;Â¿<#¿<C¿<q¿<ß¿<Ø¿<∞¿<‰¿=
¿=V¿={¿=∫¿=Ì¿>¿>/¿>9¿>A¿>B¿>g¿>£¿>„¿?¿?P¿?o¿?Ö¿?ë¿?õ¿?£¿?§¿?ÿ¿?˘¿@$¿@E¿@e¿@m¿@n¿@õ¿@◊¿@È¿@Ò¿@Ú¿A&¿AL¿AM¿Ao¿Aà¿Aé¿Aí¿Aì¿A‡¿A˜¿B$¿B:¿BW¿B]¿B©¿B≠¿BØ¿B∞¿Bœ¿B˙¿B˚¿C1¿CU¿CZ¿C[¿C¿CÄ¿C¢¿C£¿CŸ¿C⁄¿D¿DA¿DÑ¿DΩ¿D¡¿D¬¿D˙¿E¿E"¿E$¿E%¿Er¿Ev¿E≤¿E—¿F#¿Ft¿Fü¿F†¿FË¿G¿G¿G¿G.¿GN¿Ga¿GÑ¿Gä¿G≥¿GŒ¿H¿H9¿HÜ¿H’¿HÛ¿I(¿Ih¿I{¿IÅ¿IÇ¿I∑¿IË¿J¿J ¿J?¿Je¿Já¿J´¿JÕ¿Jˆ¿K¿K
¿K¿K¿K5¿KK¿Kg¿KÉ¿Kü¿KΩ¿L
¿L2¿L9¿L=¿L>¿LÑ¿Lº¿LÌ¿M¿M*¿MP¿Mr¿M≠¿Mœ¿MÎ¿Mˆ¿Mˇ¿N¿N¿N1¿NM¿Ni¿Nó¿Nµ¿Nﬂ¿O¿O¿O¿O¿Oc¿Oâ¿O«¿P¿P¿P¿P¿PA¿PY¿P•¿P´¿P ¿P„¿P‰¿Q¿Q@¿QA¿QÜ¿Q©¿Q™¿Q˚¿RI¿Ró¿R ¿RÊ¿RÁ¿R˚¿S¿S9¿SV¿St¿Sz¿S|¿S}¿S¨¿Sø¿S·¿T¿TG¿TH¿Tj¿T≤¿Tˆ¿U(¿U)¿Uc¿Uã¿Uß¿U´¿U¨¿UÊ¿V¿V6¿V<¿V@¿VB¿VC¿Vl¿Vç¿V“¿V˝¿V˛¿W$¿WB¿WD¿WE¿WY¿Wn¿Wå¿Wç¿W≤¿W≥¿Wø¿W’¿W˛¿X¿X¿X¿X2¿X3¿Xc¿Xx¿X™¿X´¿X·¿X„¿X‰¿Y¿Y!¿YS¿YT¿YÇ¿YÑ¿YÖ¿Y™¿Yø¿Y”¿Z¿ZN¿ZO¿Zp¿Zà¿Z¢¿Z¡¿Z«¿Z…¿Z ¿Z˙¿[¿[D¿[H¿[J¿[K¿[m¿[ã¿[À¿[ˆ¿\"¿\(¿\9¿\=¿\>¿\\¿\ñ¿\«¿\Û¿\˘¿]
¿]¿]    6Äÿ  ÄÌ  Å  ÅI  Å  Å¨  Åÿ  Ç  Ç;  Çs  Ç°  Ç÷  É  ÉZ  É™ÉÏ ÉÛ  Ñ:  Ñ  Ñº  Ñ˚  Ö3  Ö|  Öø  Ü  ÜF  ÜÄ  Üπ  ÜÛ  á,  ák  á±  áÍ  à2  àl  àú  à‘ ââVâX âåâûâ†â’ â‹  ä  äI  äy  äª  ä˘  ã4  ãg  ã™ã· ãÏ  å7  åv  å∫  å˙  ç2  çd    çÜ¿:î Ü˙/// This class computes analysis results for Dart files.
///
/// Let the set of "explicitly analyzed files" denote the set of paths that have
/// been passed to [addFile] but not subsequently passed to [removeFile]. Let
/// the "current analysis results" denote the map from the set of explicitly
/// analyzed files to the most recent [AnalysisResult] delivered to `events`
/// for each file. Let the "current file state" represent a map from file path
/// to the file contents most recently read from that file, or fetched from the
/// content cache (considering all possible file paths, regardless of
/// whether they're in the set of explicitly analyzed files). Let the
/// "analysis state" be either "working" or "idle".
///
/// (These are theoretical constructs; they may not necessarily reflect data
/// structures maintained explicitly by the driver).
///
/// Then we make the following guarantees:
///
///    - Whenever the analysis state is idle, the current analysis results are
///      consistent with the current file state.
///
///    - A call to [addFile] or [changeFile] causes the analysis state to
///      transition to "working", and schedules the contents of the given
///      files to be read into the current file state prior to the next time
///      the analysis state transitions back to "idle".
///
///    - If at any time the client stops making calls to [addFile], [changeFile],
///      and [removeFile], the analysis state will eventually transition back to
///      "idle" after a finite amount of processing.
///
/// As a result of these guarantees, a client may ensure that the analysis
/// results are "eventually consistent" with the file system by simply calling
/// [changeFile] any time the contents of a file on the file system have changed.
/// ÆQâˆ Ø!Ø/Ä«/// Create a new instance of [AnalysisDriver].
///
/// The given [SourceFactory] is cloned to ensure that it does not contain a
/// reference to an [AnalysisContext] in which it could have been used.Ø6*ØX  ØfØ  Øä*Ø•  Ø∫ØŒ  Ø‹$ØÙ  ∞∞  ∞&∞,  ∞=∞C  ∞R∞X  ∞lX∞∂  ∞ &∞ﬂ  ∞ˆ"±	  ±$±2  ±H*±_  ±x±~  ±ñ#±©  ±ø$±”  ±È!±Ô  ≤≤  D∞l∞m∞w∞ö∞x±ã≤≤2≤'≤4≤Y≤G≤[≤Ä≤u≤Ç≤ß≤ï≤∆≤µ≤…≤Ÿ≤⁄≤„≤Ù≤‰≥≤ˇ≥&≥≥)≥>≥?≥`≥J≥É≥n≥Ü≥û≥ü≥≤≥™≥¥≥Œ≥ƒ≥–≥Ò≥‚≥Û¥¥
¥¥L¥:¥`¥N¥c¥t¥u¥å¥Ä¥£¥≥¥é¥•¥∞¥±¥µ1î›sï>M/// The version of data format, should be incremented on every format change.ïMïUÄ¬ïÙÄè/// The number of exception contexts allowed to write. Once this field is
/// zero, we stop writing any new exception contexts in this process.ññÄçñü`/// The scheduler that schedules analysis work in this, and possibly other
/// analysis drivers. ñÆ_ó@/// The logger to write performed operations and performance to. ó\ó]1/// The resource provider for working with files. ósÄåóık/// The byte storage to get and put serialized data.
///
/// It can be shared with other [AnalysisDriver]s. òÄ≠òúv/// The cache of deserialized data read from SummaryDataReader.
///
/// It can be shared with other [AnalysisDriver]s. ò∂Ä⁄ô~Ä©/// The optional store with externally provided unlinked and corresponding
/// linked summaries. These summaries are always added to the store for any
/// file analysis. ôïÄíöe/// This [ContentCache] is consulted for a file content before reading
/// the content from the file. ö,Ääö§[/// The already loaded unlinked units,  consulted before deserializing
/// from file again. öª9ö‡  ö˘_õOD/// The [Packages] object with packages and their language versions. õ]ÄÖõ‘^/// The [SourceFactory] is used to resolve URIs to paths and restore URIs
/// from file paths. õÁHú#%/// The support for executing macros. ú4Äúú∆{/// The container, shared with other drivers within the same collection,
/// into which all drivers record files ownership. ú’Sù'/// The declared environment variables. ù-jùà</// The analysis context that created this driver / session. ùúqùÌC/// The salt to mix into all hashes used as keys for unlinked data.û û
ûûûlû^>/// The salt to mix into all hashes used as keys for elements.ûqû{û}û|ûÉqû“A/// The salt to mix into all hashes used as keys for linked data.ûÁûÒûÛûÚû˘bü@>/// The set of priority files, that should be analyzed sooner.üYüZüQüXüRü`zü¬G/// The file changes that should be applied before processing requests.üÿüŸüﬂÄá†M]/// When [_applyFileChangesSynchronously] is `true`, affected files are
/// accumulated here.†d†e†kÄã†ªG/// The completers to complete after [_pendingFileChanges] are applied.†Ù†ı†€†Û†‹†Â†Ú†Ê†Í†Ò†Î†˚Ä’°ãÄÖ/// The mapping from the files for which analysis was requested using
/// [getResolvedUnit] to the [Completer]s to report the result.°Œ°œ°ù°Õ°û°¶°™°Ã°´°¥°À°µ°’ÄÂ¢hÄà/// The mapping from the files for which analysis was requested using
/// [getResolvedLibrary] to the [Completer]s to report the result.¢∏¢π¢Ñ¢∑¢Ö¢ç¢ë¢∂¢í¢õ¢µ¢ú¢øw£)/// The queue of requests for completion.£4£5£;c£z7/// Set to `true` after first [discoverAvailableFiles].£ô££Ä•£ÙH/// The requests to compute files defining a class member with the name.§F§G§§E§§M|§ã5/// The requests to compute files referencing a name.§«§»§¶§∆§ß§ŒÄŒ•W~/// The mapping from the files for which errors were requested using
/// [getErrors] to the [Completer]s to report the result.•ö•õ•o•ô•p•x•|•ò•}•Ü•ó•á•°Ä‹¶+/// The mapping from the files for which the index was requested using
/// [getIndex] to the [Completer]s to report the result.¶{¶|¶H¶z¶I¶Q¶U¶y¶V¶_¶x¶`¶w¶ÇÄÏßÄå/// The mapping from the files for which the unit element was requested using
/// [getUnitElement] to the [Completer]s to report the result.ßlßmß<ßkß=ßEßIßjßJßSßißTßsÄÕ®+Äó/// The list of dispose requests, added in [dispose2], almost always empty.
/// We expect that at most one is added, at the very end of the life cycle.®>®?®EÄÉ®¨J/// Resolution signatures of the most recently produced results for files.®∆®«®Õf©(/// Cached results for [_priorityFiles].©1©2©8u©ì+/// Cached results of [getResolvedLibrary].©´©¨©≤Äö™//// The controller for the [exceptions] stream.™)™9™I™:™J™K™QD™é(/// The instance of the [Search] helper. ™ö&™∏  ™≈™⁄  ™ÁJ´%*/// The [FileTracker] used by this driver. ´6F´q-/// Whether resolved units should be indexed. ´ÅX´ 6/// The context in which libraries should be analyzed. ´ﬁ_¨9/// Whether `dart:core` has been transitively discovered.¨8¨BÄ‘¨˜Ä©/// This flag is reset to `false` when a new file is added, because it
/// might be a library, so that some files that were disconnected parts
/// could be analyzed now.≠≠Äú≠¨y/// If testing data is being retained, a pointer to the object that is
/// retaining the testing data.  Otherwise `null`. ≠º≠¡ ≠Õ≠◊uÆ:B/// A map that associates files to corresponding analysis options. ∏KÄÇ∏ßI/// Return the set of files explicitly added to analysis using [addFile].   ∏—t∏˜/// See [addedFiles].   πIÄƒπÿ9/// Return the analysis options used to control analysis.  πÖπÜπêπ¿πë∫Äë∫T(/// Return the current analysis session.   ∫¶Äªa/// Return a list of the names of all the plugins enabled in analysis options
/// in this driver.   ªöÄÄª7/// Return the stream that produces [ExceptionResult]s.   ºMºW"/// The current file system state.   ºoAºx    º¥ÅΩôÄÀ/// Return the set of files that are known at this moment. This set does not
/// always include all added files or all implicitly used file. If a file has
/// not been processed yet, it might be missing.   ΩøÇéæ=/// Return the context in which libraries should be analyzed.   ¿ @QÄÄ¿ @ú=/// Return the path of the folder at the root of the context.   ¿ @’}¿ A6/// Return the number of files scheduled for analysis.   ¿ AVÄñ¿ A¥J/// Return the list of files that the driver should try to analyze sooner.   ¿ AÇÖ¿ CfÅc/// Set the list of files that the driver should try to analyze sooner.
///
/// Every path in the list must be absolute and normalized.
///
/// The driver will produce the results through the `events` stream. The
/// exact order in which results are produced is not defined, neither
/// between priority files, nor between priority and non-priority files. ¿ Ct¿ CÇ   ¿ Dy|¿ Dò/// See [priorityFiles]. ¿ Dß¿ D≥   ¿ D˘Äá¿ EZI/// Return the [ResourceProvider] that is used to access the file system.   ¿ EÑ4¿ E†    ¿ EºM¿ E˜-/// Return the search support for the driver.   ¿ FÄò¿ FÖa/// Return the source factory used to resolve URIs to paths and restore URIs
/// from file paths.   ¿ F©áÆ¿ GA/// Return the priority of work that the driver needs to perform.   ¿ N[Ç(¿ Nî-/// Whether the driver has a file to analyze.   I¿ PáÇj¿ QÄÊ/// Add the file with the given [path] to the set of files that are explicitly
/// being analyzed.
///
/// The [path] must be absolute and normalized.
///
/// The results of analysis are eventually produced by the `events` stream. ¿ Qá¿ Qè   ¿ RıK¿ S/// See [addFile]. ¿ S	¿ S   ¿ SDÑ¿ U±ÇE/// Return a [Future] that completes after pending file changes are applied,
/// so that [currentSession] can be used to compute results.
///
/// The value is the set of all files that are potentially affected by
/// the pending changes. This set can be both wider than the set of analyzed
/// files (because it may include files imported from other packages, and
/// which are on the import path from a changed file to an analyze file),
/// and narrower than the set of analyzed files (because only files that
/// were previously accessed are considered to be known and affected).   ¿ WaÑ¢¿ X*ÄÆ/// Builds elements for library files from [uriList], and packs them into
/// a bundle suitable for [PackageBundleReader].
///
/// Disconnected non-library files are ignored. ¿ XC¿ XW  ¿ Xc"¿ Xv   ¿ \Ñπ¿ _HÉ/// The file with the given [path] might have changed - updated, added or
/// removed. Or not, we don't know. Or it might have, but then changed back.
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither.
///
/// Causes the analysis state to transition to "working" (if it is not in
/// that state already). Schedules the file contents for [path] to be read
/// into the current file state prior to the next time the analysis state
/// transitions to "idle".
///
/// Invocation of this method will not prevent a [Future] returned from
/// [getResolvedUnit] from completing with a result, but the result is not
/// guaranteed to be consistent with the new current file state after this
/// [changeFile] invocation. ¿ _S¿ _[   ¿ `ƒT¿ `·/// See [changeFile]. ¿ `Ì	¿ `Û   ¿ aÅ©¿ bnÅB/// Clear the library context and any related data structures. Mostly we do
/// this to reduce memory consumption. The library context holds to every
/// library that was resynthesized, but after some initial analysis we might
/// not get again to many of these libraries. So, we should clear the context
/// periodically.   ¿ b…Öì¿ crÄó/// Return a [Future] that completes when discovery of all files that are
/// potentially available is done, so that they are included in [knownFiles].   ¿ h`Ö6¿ h∞@/// Notify the driver that the client is going to stop using it.   ¿ möÅ¿ nTÄë/// NOTE: this API is experimental and subject to change in a future
/// release (see https://github.com/dart-lang/sdk/issues/53876 for context). ¿ nn	¿ nt  ¿ n0¿ n1¿ n™Å‘¿ pÅC/// Return the cached [ResolvedUnitResult] for the Dart file with the given
/// [path]. If there is no cached result, return `null`. Usually only results
/// of priority files are cached.
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither. ¿ p&¿ p.   ¿ pÇÄÜ¿ pπ /// See [getCachedResolvedUnit]. ¿ p–	¿ p÷   ¿ qÑA¿ raÅ-/// Return a [Future] that completes with the [ErrorsResult] for the Dart
/// file with the given [path].
///
/// The [path] must be absolute and normalized.
///
/// This method does not use analysis priorities, and must not be used in
/// interactive analysis, such as Analysis Server or its plugins. ¿ rk¿ rs   ¿ uQÅm¿ u∞D/// Completes with files that define a class member with the [name]. ¿ u–¿ uÿ   ¿ v¬ÅS¿ wB/// Completes with files that reference the given external [name]. ¿ w7¿ w?   ¿ xÅÉ¿ xßx/// Return the [FileResult] for the Dart file with the given [path].
///
/// The [path] must be absolute and normalized. ¿ x≥¿ xª   ¿ y†h¿ y»/// See [getFileSync]. ¿ y’	¿ y€   ¿ zÉ5¿ z÷Ä¢/// Return a [Future] that completes with the [AnalysisDriverUnitIndex] for
/// the file with the given [path], or with `null` if the file cannot be
/// analyzed. ¿ zﬂ¿ zÁ   ¿ }Eq¿ }|/// See [getIndex]. ¿ }Ü	¿ }å   ¿ }∫á˝¿ ~¡Äﬂ/// Return a [Future] that completes with [LibraryElementResult] for the given
/// [uri], which is either resynthesized from the provided external summary
/// store, or built for a file to which the given [uri] is resolved. ¿ ~—
¿ ~Ÿ   ¿ ÖªÑE¿ ÜW}/// Return a [ParsedLibraryResult] for the library with the given [path].
///
/// The [path] must be absolute and normalized. ¿ Üh¿ Üp   ¿ äÄÄ¿ ä:/// See [getParsedLibrary]. ¿ äL	¿ äR   ¿ äàÅ∏¿ äÎH/// Return a [ParsedLibraryResult] for the library with the given [uri]. ¿ ã¿ ã   ¿ åDÖ7¿ è\ÇŸ/// Return a [Future] that completes with a [ResolvedLibraryResult] for the
/// Dart library file with the given [path].  If the file cannot be analyzed,
/// the [Future] completes with an [InvalidResult].
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither.
///
/// Invocation of this method causes the analysis state to transition to
/// "working" (if it is not in that state already), the driver will produce
/// the resolution result for it, which is consistent with the current file
/// state (including new states of the files previously reported using
/// [changeFile]), prior to the next time the analysis state transitions
/// to "idle". ¿ èo¿ èw   ¿ ëÉÊ¿ îÇP/// Return a [Future] that completes with a [ResolvedLibraryResult] for the
/// Dart library file with the given [uri].  If the file cannot be analyzed,
/// the [Future] completes with an [InvalidResult].
///
/// Invocation of this method causes the analysis state to transition to
/// "working" (if it is not in that state already), the driver will produce
/// the resolution result for it, which is consistent with the current file
/// state (including new states of the files previously reported using
/// [changeFile]), prior to the next time the analysis state transitions
/// to "idle". ¿ î¿ î#   ¿ ïià¿ ôEÉö/// Return a [Future] that completes with a [SomeResolvedUnitResult] for the
/// Dart file with the given [path].  If the file cannot be analyzed,
/// the [Future] completes with an [InvalidResult].
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither.
///
/// If the driver has the cached analysis result for the file, it is returned.
/// If [sendCachedToStream] is `true`, then the result is also reported into
/// the `events` stream, just as if it were freshly computed.
///
/// Otherwise causes the analysis state to transition to "working" (if it is
/// not in that state already), the driver will produce the analysis result for
/// it, which is consistent with the current file state (including new states
/// of the files previously reported using [changeFile]), prior to the next
/// time the analysis state transitions to "idle". ¿ ôU¿ ô]  ¿ ôi¿ ôo  ¿ ôÉ¿ ùnÄË¿ ù™/// See [getResolvedUnit]. ¿ ùª	¿ ù¡  ¿ ùÕ¿ ù”  ¿ ùÁ¿ ûZÉ»¿ ûÍm/// Return a [Future] that completes with the [SomeUnitElementResult]
/// for the file with the given [path]. ¿ û˘¿ ü   ¿ ¢&ÄÄ¿ ¢`/// See [getUnitElement]. ¿ ¢p	¿ ¢v   ¿ ¢™É<¿ §GÅu/// Return a [ParsedUnitResult] for the file with the given [path].
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither.
///
/// The parsing is performed in the method itself, and the result is not
/// produced through the `events` stream (just because it is not a fully
/// resolved unit). ¿ §U¿ §]   ¿ •Ít¿ ¶/// See [parseFileSync]. ¿ ¶)	¿ ¶/   ¿ ¶báÂ¿ ¶™8/// Perform a single chunk of work and produce `events`.   ¿ ÆKÇÓ¿ ØïÅ6/// Remove the file with the given [path] from the list of files to analyze.
///
/// The [path] must be absolute and normalized.
///
/// The results of analysis of the file might still be produced by the
/// `events` stream. The driver will try to stop producing these results,
/// but does not guarantee this. ¿ Ø†¿ Ø®   ¿ ±=T¿ ±Z/// See [removeFile]. ¿ ±f	¿ ±l   ¿ ±ïÅ£¿ ±æ  ¿ ±Ÿ¿ ±Í  ¿ ±Û¿ ≤  ¿ ≤-¿ ≤/   ¿ ≥<Å<¿ ≥A  ¿ ≥b¿ ≥p   ¿ ¥|Å¿ ¥â  ¿ ¥ñ¿ ¥û   ¿ µçó¿ µö  ¿ µ±¿ µ¬  ¿ µÀ-¿ µÓ   ¿ ÃßÑv¿ Ã¨    ¿ —!Å≥¿ “NÅ/// There was an exception during a file analysis, we don't know why.
/// But it might have been caused by an inconsistency of files state, and
/// the library context state. Reset the library context, and hope that
/// we will solve the inconsistency while loading / building summaries.   ¿ “ÿÇ¿ “È  ¿ ”¿ ”  ¿ ”¿ ”0  ¿ ”<¿ ”G   ¿ ‘ıÇ3¿ ’  ¿ ’$¿ ’8  ¿ ’A#¿ ’_   ¿ ◊,É–¿ ◊‘Äö/// Creates new [FileSystemState] and [FileTracker] objects.
///
/// This is used both on initial construction and whenever the configuration
/// changes.   ¿ € Å"¿ €  ¿ €5¿ €I  ¿ €R&¿ €o   ¿ ‹&Ñë¿ ﬂÇÃ/// When we look at a part that has a `part of name;` directive, we
/// usually don't know the library (in contrast to `part of uri;`).
/// So, we have no choice than to resolve this part as its own library.
///
/// But parts of `dart:xyz` libraries are special. The reason is that
/// `dart:core` is always implicitly imported. So, when we start building
/// the library cycle of such "part as a library", we discover `dart:core`,
/// and see that it contains our part. So, we don't add it as a library on
/// its own. But have already committed that it is a library. This causes
/// an exception in `LinkedElementFactory`.
///
/// The current workaround for this is to discover `dart:core` before any
/// analysis.   ¿ ‡ªÄ÷¿ ‡¿    ¿ ·ïÇr¿ ·¢    ¿ ‰l¿ ‰    ¿ ‰{Äø¿ ‰Ä    ¿ Â>Åá¿ ÂC    ¿ Ê…Ä≥¿ ÊŒ    ¿ ÁÄÇr¿ Áç  ¿ Áò¿ Á†   ¿ ÈˆÅÀ¿ ÍK>/// Return [AnalysisError]s for the given [serialized] errors. ¿ Ík¿ Ív  ¿ Í{(¿ Íö   ¿ Î≈Åp¿ Î“  ¿ Î¯/¿ Ï!   ¿ Ì9ÅX¿ ÌF  ¿ Ìd'¿ ÌÖ   ¿ ÓïÇm¿ Ó¢  ¿ Ó¨¿ Ó¥   ¿ ÒÉ#¿ ÒE//// Completes the [getResolvedLibrary] request. ¿ ÒY¿ Òa   ¿ Ù-Äû¿ Ù~G/// Return the key to store fully resolved results for the [signature]. ¿ Ùí¿ Ùö   ¿ ÙœÇÛ¿ ıgÄå/// Return the signature that identifies fully resolved results for the [file]
/// in the [library], e.g. element model, errors, index, etc. ¿ ıÅ¿ ıí  ¿ ıö¿ ı•   ¿ ˜∆Çs¿ ˜”  ¿ ˜„¿ ˜Î   ¿ ˙=Å¿ ˙B  ¿ ˙S¿ ˙[   ¿ ˚Yb¿ ˚^  ¿ ˚n¿ ˚v   ¿ ˚øÄ…¿ ˚ƒ  ¿ ˚ﬂ¿ ˚   ¿ ¸åÄÒ¿ ¸ô    ¿ ˝ÅÉ¢¿ ˛z/// We detected that one of the required `dart` libraries is missing.
/// Return the empty analysis result with the error. ¿ ˛5¿ ˛@  ¿ ˛E¿ ˛M   ¿'Å¿,  ¿7¿B   ¿7á¶¿D  ¿S¿[   ¿	·ÇÇ¿	Ê  ¿
¿
  ¿
4¿
<   ¿gÑz¿l  ¿}¿Ö  ¿ä¿í  ¿ú¿®  ¿π¿¬   ¿Âà¿  ¿)$¿G   ¿˙ÖŸ¿  ¿¿!  ¿&¿7  ¿E¿M  ¿W¿c   ¿◊Å¿Zy/// The driver supports only absolute paths, this method is used to validate
/// any input paths to prevent errors later. ¿r¿z   ¿˜Å«¿ kj/// Given the list of [errors] for the [file], update the [file]'s
/// [FileState.hasErrorOrWarning] flag. ¿ è¿ ö  ¿ ü¿ ¥    ¿#&üà¿#≥ÄÜ/// Instances of this class schedule work in multiple [AnalysisDriver]s so that
/// work with the highest priority is performed first. ¿+˛< ¿+˛¿, ¿,¿,  ¿,%¿,+   ¿#œÅZ¿%Å/// Time interval in milliseconds before pumping the event queue.
///
/// Relinquishing execution flow and running the event loop after every task
/// has too much overhead. Instead we use a fixed length of time, so we can
/// spend less time overall and still respond quickly enough.¿%(¿%.Ç9¿'BÅÚ/// Event queue pumping is required to allow IO and other asynchronous data
/// processing while analysis is active. For example Analysis Server needs to
/// be able to process `updateContent` or `setPriorityFiles` requests while
/// background analysis is in progress.
///
/// The number of pumpings is arbitrary, might be changed if we see that
/// analysis or other data processing tasks are starving. Ideally we would
/// need to run all asynchronous operations using a single global scheduler.¿'d¿'l¿'Å  ¿'çn¿'ÓI/// The object used to watch as analysis drivers are created and deleted. ¿( v¿(I'/// The controller for [events] stream.¿(\¿(l¿(s¿(m¿(t¿(u¿({i¿(√+/// The cached instance of [events] stream.¿(Õ¿(›¿(ﬁ¿(È(¿) ¿)¿)¿)"¿)# ¿).¿)5¿)6¿)<d¿)U ¿)f¿)s¿)ü¿)â¿)y¿)ã¿)•¿)™ ¿)µ¿)øÄ—¿*ÅÄ®/// The optional worker that is invoked when its work priority is higher
/// than work priorities in drivers.
///
/// Don't use outside of Analyzer and Analysis Server. ¿*ïÅd¿+≥Ä˙/// The operations performance accumulated so far.
///
/// It is expected that the consumer of this performance operation will
/// do analysis operations, take the instance to print and otherwise
/// process, and reset this field with a new instance.¿+“¿+Í¿+¯¿+Î¿,>Ü´¿2◊ÜE/// The [Stream] that produces analysis results for all drivers, and status
/// events.
///
/// Note that the stream supports only one single subscriber.
///
/// Analysis starts when the [AnalysisDriverScheduler] is started and the
/// driver is added to it. The analysis state transitions to "working" and
/// an analysis result is produced for every added file prior to the next time
/// the analysis state transitions to "idle".
///
/// [AnalysisStatusWorking] is produced every time when the current status
/// is [AnalysisStatusIdle], and there is any work to do in any
/// [AnalysisDriver]. This includes analysis of files passed to
/// [AnalysisDriver.addFile], any asynchronous `getXyz()` requests, and
/// [AnalysisDriver.changeFile].
///
/// [AnalysisStatusIdle] is produced every time when there is no more work
/// to do after [AnalysisStatusWorking].
///
/// [ErrorsResult]s are produced for files passed to [AnalysisDriver.addFile]
/// which are not in [AnalysisDriver.priorityFiles]. We can avoid analyzing
/// a file, if there is already result for it in the [ByteStore].
///
/// [ResolvedUnitResult]s are produced for every analyzed file. Currently
/// to analyze a file of a library, the whole library is analyzed, all its
/// files - the defining unit, augmentations, and parts.
///
/// A file requires analysis if:
/// 1. It was requested by [AnalysisDriver.getResolvedUnit] or
///    [AnalysisDriver.getResolvedLibrary], and not cached.
/// 2. It was [AnalysisDriver.addFile], and either there is no result for it
///    in the [ByteStore], or it is in [AnalysisDriver.priorityFiles].   ¿2Ì¿2ˆ    ¿3Äâ¿3W;/// Returns `true` if we are currently working on requests.   ¿3ùÄ·¿3Á>/// Return `true` if there is a driver with a file to analyze.   ¿4ÇÄÚ¿4…?/// Add the given [driver] and schedule it to perform its work. ¿4Õ¿4›   ¿5xÄë¿5∫:/// Notifies the scheduler that there might be work to do.   ¿6Äˆ¿6Çk/// Remove the given [driver] from the scheduler, so that it will not be
/// asked to perform any new work. ¿6â¿6ô   ¿7Å¿7Åp/// Start the scheduler, so that any [AnalysisDriver] created before or
/// after will be asked to perform work.   ¿8ÄÔ¿8—Ä´/// Return a future that will be completed the next time the status is idle.
///
/// If the status is currently idle, the returned future will be signaled
/// immediately.   ¿9àé¿9r]/// Run infinitely analysis cycle, selecting the drivers with the highest
/// priority first.   ¿AïÅ¿B_/// Returns a [Future] that completes after performing [times] pumpings of
/// the event queue. ¿B	¿B    ¿B∞Çs¿B∂   ¿B—'¿B◊ ¿B‰¿Bˆ¿B˜¿B˝[¿C ¿C¿C/¿CW¿CG¿C5¿CI¿C] ¿Cw  ¿CÇ¿CÜ ¿Cü¿C•3¿Cµ    ¿C‹Ä‰¿CÏ    ¿Dƒ]¿DË      ¿E%ÅÒ¿E¡Äå/// An object that watches for the creation and removal of analysis drivers.
///
/// Clients may not extend, implement or mix-in this class.    ¿E”ÄÀ¿F{Äû/// The context manager has just added the given analysis [driver]. This method
/// must be called before the driver has been allowed to perform any analysis. ¿Fá¿Fó   ¿F¢r¿FÔE/// The context manager has just removed the given analysis [driver]. ¿F˝¿G    ¿Gà˙¿G     ¿G0Ö¿GF  ¿GR¿GZ  ¿Ge¿G~   ¿L@Ç—¿Lf  ¿Lm¿L|   ¿OÄ˚¿Oùq/// Return the lint code with the given [errorName], or `null` if there is no
/// lint registered with that name. ¿O≥¿Oª    ¿PÉg¿PG,/// Exception that happened during analysis. ¿RÈÄê ¿RÈ¿R¯ ¿Rˇ¿S  ¿S¿S*  ¿S=¿SL  ¿SZ¿Si   ¿P[ÄÜ¿PŸj/// The path of the library being analyzed when the [exception] happened.
///
/// Absolute and normalized. ¿PÊX¿Q0-/// The content of the library and its parts. ¿QCd¿QûB/// The exception during analysis of the file with the [filePath]. ¿Q¨Å8¿R⁄Å/// If the exception happened during a file analysis, and the context in which
/// the exception happened was stored, this field is the key of the context
/// in the byte store. May be `null` if the context is unknown, the maximum
/// number of context to store was reached, etc.    ¿S}Çƒ¿S≤./// Container that keeps track of file owners.  ¿S¡ÄÑ¿T6Q/// Key: the absolute file URI.
/// Value: the driver to which the file is added.¿TC¿TD¿TJÄ‹¿UÄß/// Key: the absolute file URI.
/// Value: a driver in which this file is available via dependencies.
/// This map does not contain any files that are in [addedFiles].¿U$¿U% ¿U+¿U0  ¿U9¿U>  ¿UB¿UR   ¿UÆÄë¿U≥  ¿Uº¿U¡  ¿U≈¿U’    ¿VCÅ ¿V{(/// Worker in [AnalysisDriverScheduler].   ¿Vèm¿VÔB/// Return the priority of work that this worker needs to perform.   ¿W A¿W3#/// Perform a single chunk of work.    ¿WEÄæ¿WK  ¿Wè" ¿Wè¿Wö ¿Wõ	¿W°  ¿W¶	¿W¨   ¿W[¿Wh  ¿Wp¿WÜ   ¿WµL¿W»   ¿Wµ¿W∂ ¿X3ÄØ¿X9  ¿X≠3 ¿X≠¿X‘ ¿X’	¿X€   ¿Xe¿Xr  ¿Xz.¿XÄ 	¿Xå¿Xï¿X•¿Xñ¿Xö¿X§¿Xõ¿X¶¿Xß   ¿X‰Äü¿XÍ  ¿YV+ ¿YV¿Yu ¿Yv	¿Y|   ¿Y¿Y  ¿Y#.¿Y) 	¿Y5¿Y>¿YN¿Y?¿YC¿YM¿YD¿YO¿YP   ¿YÖÅC¿Yã  ¿ZQu ¿ZQ¿Zm ¿Zt¿ZÉ  ¿Zå¿Zõ  ¿Z¶¿Zµ   ¿Y¨¿Yπ  ¿Y¡¿YÀ  ¿Y’*¿YÙ  ¿ZI¿Z5 ¿ZA¿ZJ¿ZK    ¿!¬Åb¿"}Äµ/// Priorities of [AnalysisDriver] work. The farther a priority to the beginning
/// of the list, the earlier the corresponding [AnalysisDriver] should be asked
/// to perform work.  	¿"ò¿"ò  ¿"£¿"£  ¿"Æ¿"Æ  ¿"√¿"√  ¿"€¿"€  ¿"Ì¿"Ì  ¿"˝¿"˝  ¿#	¿#	  ¿#
¿#     ¿X,¿X
   ¿X¿X  ¿X!¿X!  ¿X)¿X)     ¿Z   ¿Z‘¿Z‘¿Z◊¿Z◊   ¿Z¸K¿[  ¿[¿[  ¿[¿[    ¿[KÅƒ¿[V    ¿[oÄÕ¿[y    ¿\@ÄÕ¿\J               äy MÄõÄ◊ÄÿÄÌÅÅÅIÅÅ¨ÅÿÇÇ;ÇsÇ°Ç÷ÉÉZÉ™ÉÛÑ:ÑÑºÑ˚Ö3Ö|ÖøÜÜFÜÄÜπÜÛá,áká±áÍà2àlàúà‘ââXâ†â‹ääIäyäªä˘ã4ãgã™ãÏå7åvå∫å˙ç2çdçÖçÜçøç√éébéØé¸èKèõè·ê'ê[ê_ê¨ê·êÂëëëcëîëòë‚í,íyí±íµììXìçìëì‹î+î}îÅîƒî€ï+ïRïSïüïÁñññgññ´ñ¨ñÔóóóDópóqó®óÆó„òòòDòJòò≥ò¥ôôOôdôíôìô‹ô˝ö)ö*ösöäö∏öπöˆö˜õ>õZõ[õßõæõ‰õÂúú1ú2ú}ú≤ú“ú”ú˝ù*ù+ùjùôùöù‡ûûûQûÄûÅû≈ûˆû˜ü8ü]ü^ü®ü‹ü›†'†?†h†i†≥†¯†˘°A°É°“°”¢¢`¢~¢º¢Ω¢È£8£9£s£†£°£Ï§§J§K§É§À§Ã••O•û•ü•Ë¶#¶B¶¶Ä¶–ßß6ßpßqßø®®B®C®ê® ®À®ˆ©5©6©d©Ø©∞©‚™#™N™O™z™ó™ò™¬™√™‰™Â´´3´4´d´~´´∏´€´‹¨¨?¨@¨â¨”¨≠≠≠b≠ó≠π≠∫≠‘≠’ÆÆNÆOÆÄÆÜÆ’ØØ2ØbØÜØ∂Øÿ∞∞"∞9∞N∞h∞ú∞∆∞Ú±±D±t±í±ª±Â≤≤≤?≤m≤ç≤©≤˜≥B≥b≥¢≥º≥⁄¥¥2¥x¥º¥‡¥˝¥˛µµxµØµ∂∂b∂h∂ã∂´∂Î∂¯∑n∑£∑©∑™∑Û∑Ù∏∏(∏D∏H∏I∏ï∏Œ∏œ∏ÁππBπFπGπÉπ¬∫∫∫:∫e∫ü∫£∫§∫Ùª
ªNª~ªóªòª“ºººAºlºmº±º≤ΩΩQΩÑΩºΩΩΩ˝æ#æRæ|æÆæ≈æ‚øøCøoøîø∂øı¿ @"¿ @C¿ @J¿ @N¿ @O¿ @è¿ @“¿ @”¿ A¿ AS¿ AT¿ A°¿ AÌ¿ AÓ¿ B8¿ B>¿ B|¿ BÇ¿ BÕ¿ C¿ C`¿ Cí¿ C¨¿ CΩ¿ CË¿ D¿ D/¿ DY¿ Dr¿ Dv¿ Dw¿ Dí¿ Dª¿ DÚ¿ Dˆ¿ D˜¿ EC¿ EÅ¿ EÇ¿ Eπ¿ E∫¿ EÍ¿ F
¿ F¿ FZ¿ Fq¿ F¶¿ Fß¿ FÎ¿ G¿ G>¿ Go¿ Gu¿ G©¿ GŸ¿ Gﬂ¿ H¿ H6¿ H<¿ Hf¿ Hó¿ Hù¿ H‘¿ I¿ I¿ I:¿ Ik¿ Iq¿ Iù¿ IŒ¿ I‘¿ Iˇ¿ J0¿ J6¿ Jg¿ Jò¿ Jû¿ J√¿ JÔ¿ K¿ KQ¿ K[¿ Kc¿ Ki¿ Kì¿ K¿¿ K∆¿ KÓ¿ L ¿ L&¿ LU¿ Lâ¿ Lè¿ LΩ¿ L˜¿ L˝¿ M*¿ Ma¿ Mg¿ Mè¿ Mº¿ M¬¿ Mˆ¿ N#¿ N)¿ NT¿ NX¿ NY¿ Nâ¿ N©¿ NÕ¿ Nı¿ O¿ OG¿ Om¿ Oô¿ O–¿ Oˇ¿ P*¿ P[¿ PÄ¿ PÑ¿ PÖ¿ P÷¿ PÏ¿ PÚ¿ Q$¿ Q*¿ Qx¿ Qñ¿ Qπ¿ Q€¿ QÈ¿ QÔ¿ R0¿ RP¿ Ru¿ Rî¿ Rƒ¿ RÕ¿ RË¿ RÓ¿ RÚ¿ RÛ¿ S¿ S%¿ S=¿ SA¿ SB¿ Së¿ S–¿ S÷¿ T¿ Tn¿ T∫¿ U¿ UQ¿ Uö¿ UÕ¿ U˜¿ V3¿ Vd¿ Vò¿ V∑¿ Vƒ¿ W¿ W$¿ WT¿ WZ¿ W^¿ W_¿ W´¿ Wﬁ¿ W‰¿ X¿ X?¿ X_¿ Xá¿ Xî¿ XÃ¿ XÕ¿ XÚ¿ Y¿ Y¿ YQ¿ YR¿ Yq¿ Yî¿ YÕ¿ Z ¿ ZJ¿ ZÑ¿ ZÖ¿ ZÆ¿ Z¿¿ ZÈ¿ [¿ [,¿ [7¿ [?¿ [E¿ [F¿ [y¿ [z¿ [¢¿ [‹¿ [˘¿ \ ¿ \¿ \¿ \Q¿ \†¿ \¶¿ \ÿ¿ \ﬁ¿ ]0¿ ]6¿ ]Ç¿ ]œ¿ ^¿ ^8¿ ^>¿ ^à¿ ^’¿ _"¿ _A¿ _b¿ _Ö¿ _ß¿ _µ¿ _ª¿ _¸¿ `¿ `A¿ ``¿ `ì¿ `ú¿ `∑¿ `Ω¿ `¡¿ `¬¿ `⁄¿ `˙¿ a¿ a¿ a¿ ah¿ a¥¿ b¿ bS¿ bg¿ bÜ¿ b¶¿ b¬¿ b∆¿ b«¿ c¿ cc¿ cì¿ cª¿ c…¿ cœ¿ c¯¿ c˘¿ d¿ d9¿ d^¿ dd¿ de¿ dÑ¿ d∏¿ dÌ¿ e,¿ eQ¿ ex¿ eÄ¿ eÜ¿ eá¿ eµ¿ e¡¿ e˘¿ f+¿ fJ¿ fm¿ f•¿ f“¿ f‡¿ g¿ g0¿ g<¿ gF¿ g[¿ ga¿ gb¿ gê¿ g ¿ h¿ h&¿ hK¿ hS¿ hY¿ h]¿ h^¿ h°¿ h√¿ hÍ¿ i ¿ i%¿ i&¿ iN¿ iä¿ i∑¿ iÙ¿ i¸¿ j¿ j#¿ j$¿ j\¿ jâ¿ j∆¿ jŒ¿ j‘¿ jÒ¿ jÚ¿ k5¿ kb¿ kü¿ kß¿ k≠¿ k’¿ k÷¿ l¿ lA¿ l~¿ lÜ¿ lå¿ lØ¿ l∞¿ lÎ¿ m+¿ m1¿ m\¿ m]¿ mv¿ mì¿ mó¿ mò¿ mﬂ¿ n.¿ n>¿ n|¿ nß¿ n®¿ nˆ¿ oF¿ oj¿ op¿ o¢¿ o®¿ o˙¿ p5¿ pX¿ p{¿ p¿ pÄ¿ p£¿ p›¿ q¿ q	¿ q
¿ qV¿ qx¿ q~¿ q∞¿ q∂¿ r¿ rF¿ rÄ¿ r¢¿ rΩ¿ r⁄¿ r„¿ rÈ¿ rÍ¿ s¿ s'¿ sE¿ sN¿ sT¿ sU¿ sj¿ sÖ¿ sÆ¿ s∑¿ sΩ¿ sæ¿ s˝¿ t,¿ t^¿ tê¿ tñ¿ tó¿ t±¿ t‰¿ u¿ u-¿ uJ¿ uN¿ uO¿ uñ¿ uÂ¿ v	¿ vJ¿ v}¿ vñ¿ vª¿ vø¿ v¿¿ w¿ wL¿ wp¿ w©¿ w‘¿ wÌ¿ x¿ x¿ x¿ x^¿ xd¿ xñ¿ x¬¿ x‰¿ y¿ y¿ y¿ yA¿ y\¿ y{¿ yí¿ yô¿ yù¿ yû¿ y∑¿ y‚¿ z¿ z	¿ z
¿ zX¿ z£¿ z≥¿ zÓ¿ {¿ {)¿ {`¿ {f¿ {à¿ {•¿ {´¿ {¨¿ {Î¿ |¿ |L¿ |}¿ |É¿ |Ñ¿ |û¿ |Ÿ¿ }¿ }!¿ }>¿ }B¿ }C¿ }Y¿ }ì¿ }≥¿ }∑¿ }∏¿ ~	¿ ~W¿ ~û¿ ~Â¿ ¿ ¿ =¿ d¿ ´¿ ‰¿ Ä¿ Ä6¿ Äh¿ Äp¿ Äv¿ Äw¿ Ä®¿ Äæ¿ Äœ¿ Ä¯¿ Å!¿ Å?¿ Åf¿ Åô¿ ÅÕ¿ Å¯¿ Ç$¿ Ç5¿ Çx¿ ÇÇ¿ ÇÉ¿ ÇΩ¿ ÇÏ¿ É3¿ É=¿ É>¿ ÉÑ¿ É∫¿ ÉÂ¿ Ñ¿ ÑT¿ Ñ^¿ Ñ_¿ Ñ}¿ Ñ®¿ Ñﬁ¿ Ñ¸¿ Ö?¿ Ö|¿ ÖÆ¿ Ö¥¿ Ö∏¿ Öπ¿ Ü¿ Ü¿ Ü=¿ Üw¿ Üô¿ Üª¿ Ü¡¿ Ü¬¿ Ü‰¿ á¿ á¿ á¿ á<¿ áV¿ áy¿ á®¿ áÿ¿ áˇ¿ à'¿ à4¿ às¿ ày¿ àz¿ à†¿ à«¿ àÎ¿ â¿ âH¿ âs¿ â{¿ âò¿ âû¿ âü¿ â√¿ â‚¿ âˆ¿ â˝¿ ä¿ ä¿ ä ¿ äY¿ äÅ¿ äÖ¿ äÜ¿ ä—¿ ã¿ ã:¿ ãP¿ ãa¿ ãä¿ ã≥¿ ãﬂ¿ å
¿ å7¿ å=¿ åA¿ åB¿ åê¿ å‡¿ ç¿ ç¿ çN¿ çT¿ ç¶¿ ç¨¿ ç˜¿ éE¿ éì¿ é‹¿ è'¿ è8¿ èÑ¿ è¶¿ è»¿ èŒ¿ èœ¿ èÒ¿ ê¿ ê¿ ê¿ ê0¿ êK¿ êt¿ ê}¿ êÉ¿ êÑ¿ êº¿ ê—¿ ê◊¿ êÿ¿ ë¿ ëB¿ ë[¿ ëx¿ ë|¿ ë}¿ ëÀ¿ í¿ íP¿ íV¿ í°¿ íÔ¿ ì=¿ ìÜ¿ ì—¿ ì‚¿ î/¿ î]¿ îs¿ îÑ¿ î≠¿ î÷¿ ï¿ ï/¿ ï\¿ ïb¿ ïf¿ ïg¿ ï∂¿ ï˛¿ ñ4¿ ñ:¿ ñl¿ ñr¿ ñƒ¿ ñ ¿ ó¿ ój¿ ó™¿ ó∞¿ óˇ¿ òQ¿ ò°¿ òÔ¿ ô$¿ ôb¿ ôç¿ ôØ¿ ô ¿ ôÁ¿ ô¿ ôˆ¿ ô˜¿ ö¿ ö4¿ öR¿ ö[¿ öa¿ öb¿ öÉ¿ öâ¿ ö…¿ öÂ¿ õ¿ õ:¿ õD¿ õi¿ õq¿ õw¿ õx¿ õç¿ õ®¿ õ—¿ õ⁄¿ õ‡¿ õ·¿ ú ¿ úO¿ úÅ¿ ú≠¿ ú≥¿ ú¥¿ úŒ¿ ù¿ ù1¿ ùJ¿ ùg¿ ùk¿ ùl¿ ùâ¿ ù∆¿ ùÒ¿ û¿ û¿ ûL¿ ûS¿ ûW¿ ûX¿ û†¿ û ¿ ü¿ ü*¿ üE¿ üb¿ ük¿ üq¿ ür¿ üî¿ üØ¿ üÕ¿ ü÷¿ ü‹¿ ü›¿ üÚ¿ †¿ †6¿ †?¿ †E¿ †F¿ †}¿ †√¿ †Ú¿ °$¿ °[¿ °a¿ °b¿ °|¿ °¥¿ °È¿ ¢¿ ¢¿ ¢#¿ ¢$¿ ¢@¿ ¢}¿ ¢£¿ ¢ß¿ ¢®¿ ¢Ó¿ ¢Ù¿ £&¿ £,¿ £~¿ £Ñ¿ £œ¿ §¿ §0¿ §d¿ §Ü¿ §®¿ §Æ¿ §Ø¿ §„¿ •#¿ •T¿ •u¿ •î¿ •´¿ •Ω¿ •‹¿ •„¿ •Á¿ •Ë¿ ¶¿ ¶6¿ ¶[¿ ¶_¿ ¶`¿ ¶õ¿ ¶¿¿ ¶Ÿ¿ ¶Û¿ ¶Ù¿ ßB¿ ßN¿ ßâ¿ ßµ¿ ß›¿ ®"¿ ®b¿ ®ê¿ ®ò¿ ®¶¿ ®¨¿ ®≠¿ ®Œ¿ ©¿ ©!¿ ©/¿ ©5¿ ©6¿ ©Z¿ ©ë¿ ©∏¿ ©∆¿ ©Ã¿ ©Õ¿ ©Ó¿ ™'¿ ™E¿ ™S¿ ™Y¿ ™Z¿ ™{¿ ™≥¿ ™–¿ ™ﬁ¿ ™‰¿ ™Â¿ ´¿ ´J¿ ´m¿ ´{¿ ´Å¿ ´Ç¿ ´∞¿ ¨¿ ¨8¿ ¨F¿ ¨L¿ ¨M¿ ¨v¿ ¨ø¿ ¨Ó¿ ¨¸¿ ≠¿ ≠¿ ≠#¿ ≠J¿ ≠x¿ ≠ö¿ ≠™¿ ≠≤¿ ≠∏¿ ≠π¿ ≠ÿ¿ Æ¿ Æ0¿ Æ>¿ ÆD¿ ÆH¿ ÆI¿ Æò¿ Æû¿ Æ–¿ Æ÷¿ Ø¿ Øk¿ Øé¿ ØØ¿ Ø“¿ ØÙ¿ ∞¿ ∞¿ ∞I¿ ∞u¿ ∞ï¿ ∞∫¿ ∞Ÿ¿ ±¿ ±¿ ±0¿ ±6¿ ±:¿ ±;¿ ±S¿ ±s¿ ±é¿ ±í¿ ±ì¿ ±’¿ ±Ô¿ ≤¿ ≤;¿ ≤H¿ ≤x¿ ≤ä¿ ≤†¿ ≤¿¿ ≤«¿ ≤˜¿ ≥¿ ≥5¿ ≥9¿ ≥:¿ ≥y¿ ≥≤¿ ≥€¿ ≥‹¿ ¥¿ ¥1¿ ¥O¿ ¥o¿ ¥u¿ ¥y¿ ¥z¿ ¥´¿ ¥‡¿ ¥ı¿ µ¿ µ1¿ µG¿ µk¿ µv¿ µ¿ µÜ¿ µä¿ µã¿ µ≠¿ µ«¿ µ˙¿ ∂¿ ∂B¿ ∂v¿ ∂û¿ ∂ü¿ ∂Õ¿ ∂Œ¿ ∑¿ ∑,¿ ∑^¿ ∑_¿ ∑§¿ ∑¿ ∏¿ ∏$¿ ∏P¿ ∏y¿ ∏ó¿ ∏Ø¿ ∏Õ¿ ∏⁄¿ ∏Â¿ ∏Ê¿ π¿ πA¿ πS¿ πê¿ πù¿ πØ¿ ππ¿ π∫¿ πÈ¿ ∫¿ ∫(¿ ∫f¿ ∫s¿ ∫Ö¿ ∫è¿ ∫ê¿ ∫¥¿ ∫–¿ ∫¿ ª¿ ª=¿ ªe¿ ªt¿ ªÅ¿ ªå¿ ªç¿ ªæ¿ ªÔ¿ º3¿ º\¿ ºå¿ ºÕ¿ ºﬁ¿ ºÏ¿ º¯¿ Ω¿ Ω¿ Ω7¿ ΩT¿ Ωü¿ Ωÿ¿ Ωˇ¿ æ6¿ æ7¿ æ^¿ æy¿ æñ¿ æ∞¿ æ¸¿ ø¿ ø3¿ øi¿ ø~¿ ø¿ øÃ¿ øÕ¿ ¿¿ ¿/¿ ¿Y¿ ¿Z¿ ¿|¿ ¿ß¿ ¿Ÿ¿ ¿⁄¿ ¡¿ ¡,¿ ¡P¿ ¡]¿ ¡à¿ ¡â¿ ¡®¿ ¡Ï¿ ¡Ì¿ ¬¿ ¬3¿ ¬N¿ ¬s¿ ¬ë¿ ¬∫¿ ¬…¿ ¬÷¿ ¬◊¿ ¬Ô¿ √1¿ √2¿ √~¿ √ä¿ √»¿ ƒ¿ ƒ=¿ ƒq¿ ƒå¿ ƒ®¿ ƒ¬¿ ƒı¿ ≈¿ ≈¿ ≈9¿ ≈r¿ ≈´¿ ≈¨¿ ≈◊¿ ∆¿ ∆¿ ∆ ¿ ∆g¿ ∆q¿ ∆r¿ ∆©¿ ∆Ã¿ «¿ «#¿ «.¿ «/¿ «X¿ «ú¿ «¶¿ «ß¿ ««¿ »¿ »¿ »B¿ »|¿ »ñ¿ »æ¿ »◊¿ …!¿ …d¿ …e¿ …ù¿ …·¿  ¿  5¿  s¿  Å¿  ç¿  ó¿  ò¿  ø¿  È¿ À¿ À%¿ ÀT¿ Àa¿ Àz¿ Àó¿ ÀÃ¿ ÀŸ¿ À„¿ Ã¿ Ã¿ ÃW¿ Ãb¿ Ãê¿ Ãò¿ Ã†¿ Ã§¿ Ã•¿ Ã…¿ ÃÛ¿ Õ%¿ ÕG¿ Õç¿ ÕÆ¿ Õ–¿ Õˆ¿ Œ¿ ŒD¿ Œi¿ Œí¿ Œ‹¿ œ#¿ œD¿ œL¿ œR¿ œs¿ œt¿ œπ¿ œÚ¿ œÛ¿ –'¿ –f¿ –ì¿ –Ω¿ –Ÿ¿ —¿ —¿ —¿ —¿ —¿ —¿ —g¿ —≥¿ —˝¿ “G¿ “u¿ “ê¿ “Æ¿ “—¿ “’¿ “÷¿ ”¿ ”¿ ”8¿ ”M¿ ”S¿ ”x¿ ”ô¿ ”≠¿ ”«¿ ”–¿ ”◊¿ ‘¿ ‘R¿ ‘Ç¿ ‘¨¿ ‘æ¿ ‘‘¿ ‘€¿ ‘Ó¿ ‘Ú¿ ‘Û¿ ’ ¿ ’=¿ ’f¿ ’m¿ ’ä¿ ’©¿ ’ƒ¿ ’·¿ ÷ ¿ ÷¿ ÷N¿ ÷}¿ ÷≤¿ ÷€¿ ÷Ò¿ ◊¿ ◊%¿ ◊)¿ ◊*¿ ◊i¿ ◊o¿ ◊æ¿ ◊Õ¿ ◊Î¿ ◊¸¿ ◊˝¿ ÿ4¿ ÿX¿ ÿÉ¿ ÿû¿ ÿ•¿ ÿ¶¿ ÿ∆¿ ÿ’¿ ÿÁ¿ Ÿ ¿ Ÿ¿ Ÿ!¿ ŸO¿ Ÿh¿ ŸÄ¿ Ÿò¿ Ÿ≤¿ ŸÃ¿ Ÿ˝¿ ⁄*¿ ⁄E¿ ⁄f¿ ⁄É¿ ⁄©¿ ⁄∞¿ ⁄˘¿ ⁄˝¿ ⁄˛¿ €1¿ €N¿ €z¿ €Å¿ €§¿ €√¿ €⁄¿ €˜¿ ‹¿ ‹¿ ‹#¿ ‹$¿ ‹j¿ ‹∞¿ ‹˙¿ › ¿ ›H¿ ›î¿ ›‚¿ ﬁ/¿ ﬁ{¿ ﬁ©¿ ﬁØ¿ ﬁ˚¿ ﬂ¿ ﬂ(¿ ﬂJ¿ ﬂX¿ ﬂ^¿ ﬂÅ¿ ﬂÇ¿ ﬂµ¿ ﬂ˜¿ ‡*¿ ‡Y¿ ‡~¿ ‡¶¿ ‡Æ¿ ‡¥¿ ‡∏¿ ‡π¿ ‡◊¿ ‡˙¿ ·¿ ·¿ ·2¿ ·3¿ ·c¿ ·à¿ ·é¿ ·í¿ ·ì¿ ·«¿ ·Û¿ ‚+¿ ‚`¿ ‚é¿ ‚¬¿ ‚¯¿ „A¿ „h¿ „í¿ „—¿ „‡¿ „Ï¿ „ˆ¿ „˛¿ ‰¿ ‰¿ ‰	¿ ‰¿ ‰:¿ ‰V¿ ‰t¿ ‰x¿ ‰y¿ ‰ô¿ ‰∫¿ ‰€¿ Â	¿ Â7¿ Â;¿ Â<¿ Â^¿ Â¿ Â†¿ Â¡¿ ÂÛ¿ Ê!¿ Ê"¿ Ê^¿ Êë¿ Êí¿ Ê¬¿ Ê∆¿ Ê«¿ ÊÁ¿ Á¿ Á)¿ ÁJ¿ ÁK¿ Áy¿ Á}¿ Á~¿ Á≠¿ Á€¿ Á‹¿ Ë ¿ Ë:¿ Ël¿ Ëm¿ Ëì¿ Ë—¿ Ëˇ¿ È ¿ È%¿ È>¿ ÈÖ¿ Èº¿ È ¿ È–¿ È—¿ ÈÔ¿ ÈÛ¿ ÈÙ¿ Í5¿ Íe¿ Íß¿ Í€¿ Î¿ ÎW¿ Îz¿ Îù¿ Î•¿ Î´¿ Îæ¿ Î¬¿ Î√¿ ÎÙ¿ Ï)¿ Ï5¿ Ï]¿ Ï^¿ Ï~¿ Ï°¿ Ï‚¿ Ï¸¿ Ì¿ Ì
¿ Ì2¿ Ì6¿ Ì7¿ Ì`¿ Ìç¿ Ìô¿ Ì¡¿ Ì¬¿ Ì‚¿ Ó¿ Ó>¿ ÓX¿ Ó`¿ Óf¿ Óé¿ Óí¿ Óì¿ Ó¡¿ ÓÔ¿ Ó¿ Ô4¿ ÔN¿ ÔÄ¿ ÔÅ¿ Ôß¿ ÔÂ¿ ¿ ¿ 9¿ R¿ ë¿ Ã¿ ⁄¿ ‡¿ ·¿ ˇ¿ Ò¿ Ò¿ Ò6¿ Òn¿ Òú¿ Ò∂¿ Ò ¿ ÒË¿ Ò˜¿ Ú¿ ÚC¿ ÚS¿ ÚÄ¿ Úã¿ Úõ¿ Ú∂¿ Úﬂ¿ ÚÔ¿ Û¿ Û¿ Û/¿ Û>¿ Û¿ ÛÖ¿ ÛÜ¿ Ûæ¿ ÛÛ¿ Ù¿ Ù¿ Ù¿ Ù&¿ Ù*¿ Ù+¿ Ùu¿ Ù¶¿ Ù»¿ ÙÃ¿ ÙÕ¿ ı¿ ı^¿ ı¨¿ ıŸ¿ ˆ
¿ ˆ9¿ ˆT¿ ˆõ¿ ˆ°¿ ˆœ¿ ˜¿ ˜P¿ ˜v¿ ˜°¿ ˜ø¿ ˜√¿ ˜ƒ¿ ˜¯¿ ¯,¿ ¯-¿ ¯q¿ ¯ã¿ ¯Ω¿ ¯æ¿ ¯›¿ ¯˚¿ ˘2¿ ˘9¿ ˘:¿ ˘~¿ ˘¶¿ ˘≈¿ ˘‹¿ ˘Ù¿ ˘˚¿ ˘¸¿ ˙6¿ ˙:¿ ˙;¿ ˙d¿ ˙ä¿ ˙∏¿ ˙’¿ ˙Í¿ ˚¿ ˚K¿ ˚R¿ ˚V¿ ˚W¿ ˚}¿ ˚∏¿ ˚º¿ ˚Ω¿ ˚˙¿ ¸ ¿ ¸P¿ ¸e¿ ¸m¿ ¸s¿ ¸Ö¿ ¸â¿ ¸ä¿ ¸±¿ ¸ÿ¿ ¸˜¿ ˝¿ ˝¿ ˝N¿ ˝l¿ ˝t¿ ˝z¿ ˝~¿ ˝¿ ˝«¿ ˝˛¿ ˛/¿ ˛Z¿ ˛ì¿ ˛∞¿ ˛œ¿ ˛Í¿ ˇ¿ ˇ&¿ ˇ;¿ ˇt¿ ˇ£¿ ˇÿ¿ ¿ ¿ ,¿ K¿ `¿ u¿ µ¿ ÿ¿ „¿ Ï¿¿ ¿$¿%¿I¿o¿ç¿π¿Ê¿ı¿"¿*¿0¿4¿5¿h¿ñ¿ó¿€¿ı¿'¿(¿[¿z¿ò¿œ¿÷¿◊¿¿P¿v¿≥¿·¿¿,¿;¿C¿D¿Ñ¿¥¿µ¿‹¿˜¿¿"¿*¿+¿M¿¿Ö¿Ü¿≈¿‰¿¿K¿|¿}¿ø¿˛¿¿¿¿G¿ê¿»¿	¿	7¿	?¿	q¿	¿	Ö¿	Ü¿	º¿	⁄¿	ﬁ¿	ﬂ¿
¿
0¿
A¿
G¿
i¿
ó¿
ò¿
∫¿
Ó¿
Ô¿:¿[¿w¿ú¿√¿À¿ı¿˚¿¸¿8¿Y¿`¿d¿e¿≥¿œ¿¿¿B¿C¿M¿}¿ù¿«¿Ë¿¿J¿T¿c¿Ö¿∑¿ø¿—¿¿[¿a¿b¿ì¿–¿¿¿¿¿<¿S¿k¿ì¿Æ¿Œ¿◊¿ﬁ¿‚¿„¿%¿O¿[¿°¿¿¿‰¿˘¿¿¿&¿;¿C¿D¿t¿u¿ª¿◊¿¿¿.¿H¿f¿ã¿Ø¿’¿‚¿Ì¿ˆ¿@¿{¿∞¿À¿¿e¿ö¿õ¿«¿‡¿˚¿¿]¿n¿ê¿ƒ¿‚¿ˆ¿¿8¿Z¿c¿d¿í¿ª¿‘¿Ë¿ˇ¿¿;¿\¿ã¿≠¿‚¿Î¿Û¿˜¿¯¿?¿p¿ü¿≤¿ø¿Á¿Ì¿˜¿¿[¿í¿ß¿‰¿!¿R¿l¿õ¿Ã¿¿¿¿>¿`¿v¿~¿¿°¿ƒ¿Á¿˛¿¿¿-¿U¿{¿¢¿Õ¿¯¿)¿m¿n¿ì¿•¿∑¿ ¿–¿‘¿’¿$¿S¿Å¿£¿Í¿¿Ù¿ı¿ :¿ d¿ â¿ Ω¿ Á¿!%¿!R¿!y¿!â¿!ë¿!ó¿!ª¿!ø¿!¡¿!¬¿"¿"c¿"x¿"ñ¿"°¿"¨¿"¡¿"Ÿ¿"Î¿"˚¿#¿#¿##¿#%¿#&¿#v¿#≠¿#Õ¿$¿$¿$f¿$¥¿$Ù¿%+¿%,¿%z¿% ¿&¿&B¿&H¿&ì¿&‡¿'/¿'i¿'j¿'ä¿'ã¿'◊¿'˝¿'˛¿((¿(x¿(y¿(ß¿(Ê¿(Á¿)¿)9¿):¿)u¿)ù¿)¢¿)£¿)º¿)Ω¿*¿*/¿*5¿*n¿*í¿*ì¿*»¿*Œ¿+¿+_¿+ò¿+Ã¿+˚¿+¸¿,;¿,<¿,ä¿,ò¿,û¿,ﬁ¿,‰¿-0¿-}¿-Œ¿-˛¿.¿.Q¿.ì¿.’¿/¿/B¿/H¿/ï¿/¿¿/∆¿0¿0d¿0®¿0Æ¿0˙¿1G¿1Ç¿1à¿1´¿1Ï¿2*¿2y¿2¬¿2Í¿2Î¿3¿3¿3L¿3c¿3ñ¿3ö¿3õ¿3‹¿3¸¿4¿4F¿4[¿4c¿4i¿4{¿4¿4Ä¿4¬¿4Ê¿5 ¿5¿5A¿5k¿5q¿5u¿5v¿5≥¿5≈¿5‹¿6¿6
¿6¿6V¿6{¿6¢¿6Ã¿6È¿7 ¿7¿7¿7O¿7z¿7ã¿7ü¿7‚¿7Ë¿7˝¿8	¿8¿8¿8]¿8c¿8Ø¿8¬¿9 ¿9¿9M¿9c¿9Å¿9œ¿9ﬂ¿:¿:7¿:J¿:i¿:±¿:Ò¿;¿;¿;¿;.¿;/¿;]¿;É¿;ã¿;å¿;±¿;‹¿;‰¿;Â¿<#¿<C¿<q¿<ß¿<Ø¿<∞¿<‰¿=
¿=V¿={¿=∫¿=Ì¿>¿>/¿>9¿>A¿>B¿>g¿>£¿>„¿?¿?P¿?o¿?Ö¿?ë¿?õ¿?£¿?§¿?ÿ¿?˘¿@$¿@E¿@e¿@m¿@n¿@õ¿@◊¿@È¿@Ò¿@Ú¿A&¿AL¿AM¿Ao¿Aà¿Aé¿Aí¿Aì¿A‡¿A˜¿B$¿B:¿BW¿B]¿B©¿B≠¿BØ¿B∞¿Bœ¿B˙¿B˚¿C1¿CU¿CZ¿C[¿C¿CÄ¿C¢¿C£¿CŸ¿C⁄¿D¿DA¿DÑ¿DΩ¿D¡¿D¬¿D˙¿E¿E"¿E$¿E%¿Er¿Ev¿E≤¿E—¿F#¿Ft¿Fü¿F†¿FË¿G¿G¿G¿G.¿GN¿Ga¿GÑ¿Gä¿G≥¿GŒ¿H¿H9¿HÜ¿H’¿HÛ¿I(¿Ih¿I{¿IÅ¿IÇ¿I∑¿IË¿J¿J ¿J?¿Je¿Já¿J´¿JÕ¿Jˆ¿K¿K
¿K¿K¿K5¿KK¿Kg¿KÉ¿Kü¿KΩ¿L
¿L2¿L9¿L=¿L>¿LÑ¿Lº¿LÌ¿M¿M*¿MP¿Mr¿M≠¿Mœ¿MÎ¿Mˆ¿Mˇ¿N¿N¿N1¿NM¿Ni¿Nó¿Nµ¿Nﬂ¿O¿O¿O¿O¿Oc¿Oâ¿O«¿P¿P¿P¿P¿PA¿PY¿P•¿P´¿P ¿P„¿P‰¿Q¿Q@¿QA¿QÜ¿Q©¿Q™¿Q˚¿RI¿Ró¿R ¿RÊ¿RÁ¿R˚¿S¿S9¿SV¿St¿Sz¿S|¿S}¿S¨¿Sø¿S·¿T¿TG¿TH¿Tj¿T≤¿Tˆ¿U(¿U)¿Uc¿Uã¿Uß¿U´¿U¨¿UÊ¿V¿V6¿V<¿V@¿VB¿VC¿Vl¿Vç¿V“¿V˝¿V˛¿W$¿WB¿WD¿WE¿WY¿Wn¿Wå¿Wç¿W≤¿W≥¿Wø¿W’¿W˛¿X¿X¿X¿X2¿X3¿Xc¿Xx¿X™¿X´¿X·¿X„¿X‰¿Y¿Y!¿YS¿YT¿YÇ¿YÑ¿YÖ¿Y™¿Yø¿Y”¿Z¿ZN¿ZO¿Zp¿Zà¿Z¢¿Z¡¿Z«¿Z…¿Z ¿Z˙¿[¿[D¿[H¿[J¿[K¿[m¿[ã¿[À¿[ˆ¿\"¿\(¿\9¿\=¿\>¿\\¿\ñ¿\«¿\Û¿\˘¿]
¿]¿]    AnalysisDriverAnalysisDriverPriorityAnalysisDriverSchedulerAnalysisDriverTestViewDriverWatcherErrorEncodingExceptionResult
OwnedFilesSchedulerWorker_FileChange_FileChangeKind'_GetFilesDefiningClassMemberNameRequest_GetFilesReferencingNameRequest_ResolveForCompletionRequestFileExtension ü