Å[compositeCallbackenabledcreateRenderObjectupdateRenderObject_cancelCallback_enabledpainttextvaluebuildTextSpan	selectionclearclearComposing _isSelectionWithinComposingRangeemptycopycutpaste	selectAllonContentInsertedallowedMimeTypesiOSBlinkingCaretKeyFramestimemaxDuration
_keyFramesdxisDone_lastKeyFrameIndexx
controller	focusNodeobscuringCharacterobscureTexttextHeightBehaviortextWidthBasisreadOnly	forceLinetoolbarOptionsshowSelectionHandles
showCursorautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsstyleundoController
strutStyle_strutStyle	textAligntextDirectiontextCapitalizationlocaletextScaleFactor
textScalercursorColorautocorrectionTextRectColorbackgroundCursorColormaxLinesminLinesexpands	autofocusselectionColorselectionControlskeyboardTypetextInputAction	onChangedonEditingCompleteonSubmittedonAppPrivateCommandonSelectionChangedonSelectionHandleTappedgroupIdonTapOutsideinputFormattersmouseCursorrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOpacityAnimatescursorOffsetpaintCursorAboveTextselectionHeightStyleselectionWidthStylekeyboardAppearancescrollPaddingenableInteractiveSelectiondebugDeterministicCursordragStartBehaviorscrollControllerscrollPhysicsscribbleEnabledselectionEnabledautofillHintsautofillClientclipBehaviorrestorationIdscrollBehaviorenableIMEPersonalizedLearningcontentInsertionConfigurationcontextMenuBuilderspellCheckConfigurationmagnifierConfiguration_userSelectionEnabledgetEditableButtonItems_inferKeyboardTypecreateStatedebugFillProperties_cursorTimer_cursorBlinkOpacityController$_backingCursorBlinkOpacityController_iosBlinkCursorSimulation_cursorVisibilityNotifier_editableKeyclipboardStatus_liveTextInputStatus_textInputConnection_hasInputConnection_selectionOverlay_scrollNotificationObserver_dataWhenToolbarShowScheduled&_listeningToScrollNotificationObserver_webContextMenuEnabled_scrollableKey_internalScrollController_scrollController_toolbarLayerLink_startHandleLayerLink_endHandleLayerLink_didAutoFocus_currentAutofillScopecurrentAutofillScope_effectiveAutofillClient_spellCheckConfiguration_stylespellCheckEnabledspellCheckResults_spellCheckResultsReceived_processTextService_processTextActions_shouldCreateInputConnection_floatingCursorResetTime_floatingCursorResetController_lastOrientationwantKeepAlive_cursorColor
cutEnabledcopyEnabledpasteEnabledselectAllEnabledlookUpEnabledsearchWebEnabledshareEnabledliveTextInputEnabled_onChangedClipboardStatus_onChangedLiveTextInputStatus%_textEditingValueforTextLayoutMetricscopySelectioncutSelection_allowPaste	pasteText
_pasteTextlookUpSelectionsearchWebForSelectionshareSelection_startLiveTextInputfindSuggestionSpanAtCursorIndex_inferSpellCheckConfigurationbuttonItemsForToolbarOptionsgetGlyphHeightscontextMenuAnchorscontextMenuButtonItems _textProcessingActionButtonItems	initState_initProcessTextActions_tickersEnableddidChangeDependenciesdidUpdateWidget"_disposeScrollNotificationObserverdispose _lastKnownRemoteTextEditingValuecurrentTextEditingValueupdateEditingValue_checkNeedsAdjustAffinityperformActionperformPrivateCommandinsertContent_startCaretCenter_lastTextPosition_pointOffsetOrigin_lastBoundedOffset_floatingCursorOffsetupdateFloatingCursor_onFloatingCursorResetTick_finalizeEditing_batchEditDepthbeginBatchEditendBatchEdit!_updateRemoteEditingValueIfNeeded_value	_hasFocus_isMultiline_getOffsetToRevealCaret_needsAutofill_openInputConnection_closeInputConnectionIfNeeded#_openOrCloseInputConnectionIfNeeded_restartConnectionScheduled_scheduleRestartConnection_restartConnectionIfNeededdidChangeInputControlconnectionClosed_nextFocusChangeIsInternal_flagInternalFocus_unflagInternalFocusrequestKeyboard(_updateOrDisposeSelectionOverlayIfNeeded_platformSupportsFadeOnScroll!_isInternalScrollableNotification(_scrollableNotificationIsFromSameSubtree _handleContextMenuOnParentScroll_calculateDeviceRect_showToolbarOnScreenScheduled_handleContextMenuOnScroll_selectionInViewport_createSelectionOverlay_handleSelectionChanged_caretAnimationDuration_caretAnimationCurve_showCaretOnScreenScheduled_scheduleShowCaretOnScreen_lastBottomViewInsetdidChangeMetrics_performSpellCheck_formatAndSetValue_bringIntoViewBySelectionState_onCursorColorTick_showBlinkingCursorcursorCurrentlyVisiblecursorBlinkIntervalselectionOverlay_obscureShowCharTicksPending_obscureLatestCharIndex_startCursorBlink_onCursorTick_stopCursorBlink_startOrStopCursorTimerIfNeeded_didChangeTextEditingValue_handleFocusChanged_adjustedSelectionWhenFocused_compositeCallback_updateSizeAndTransform#_schedulePeriodicPostFrameCallbacks_scribbleCacheKey_updateSelectionRects_updateComposingRectIfNeeded_updateCaretRectIfNeeded_textDirectionrenderEditabletextEditingValue_devicePixelRatiouserUpdateTextEditingValuebringIntoViewshowToolbarhideToolbartoggleToolbar showSpellCheckSuggestionsToolbarshowMagnifierhideMagnifier_placeholderLocationinsertTextPlaceholderremoveTextPlaceholderperformSelector
autofillId_viewIdtextInputConfigurationautofill_currentPromptRectRangeshowAutocorrectionPromptRect_semanticsOnCopy_semanticsOnCut_semanticsOnPaste_moveBeyondTextBoundary_moveToTextBoundary_characterBoundary_nextWordBoundary
_linebreak_paragraphBoundary_documentBoundary_makeOverridable_transposeCharacters_transposeCharactersAction_replaceText_replaceTextAction_scrollToDocumentBoundary_scroll_extendSelectionByPage_updateSelection_updateSelectionAction_verticalSelectionUpdateAction_hideToolbarIfVisible_defaultOnTapOutside_actionsbuild
inlineSpanstartHandleLayerLinkendHandleLayerLinkhasFocusoffsettextSelectionDelegatedevicePixelRatiopromptRectRangepromptRectColorstructStyleplaceholdersizecomparechildeditableKeyupdateSelectionRects_nextElementIdentifier_elementIdentifierelementIdentifieronScribbleFocusisInScribbleRectbounds_text_breaksSurrogatePairgetLeadingTextBoundaryAtgetTrailingTextBoundaryAtstategetTextBoundary_applyTextBoundary_hideToolbarIfTextChangedinvokeisActionEnabledignoreNonCollapsedSelectionisExpandextentAtIndexapplyTextBoundaryNEWLINE_CODE_UNIT_isAtWordwrapUpstream_isAtWordwrapDownstream_verticalMovementRun_runSelection(stopCurrentVerticalRunIfSelectionChangesupdateSelectionChangedCallbackAppPrivateCommandCallbackEditableTextContextMenuBuilder_ApplyTextBoundary_kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks!kDefaultContentInsertionMimeTypes_CompositionCallback_RenderCompositionCallbackTextEditingControllerToolbarOptionsContentInsertionConfiguration	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleCacheKey_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_CodePointBoundary_DeleteTextAction_UpdateTextSelectionAction$_UpdateTextSelectionVerticallyAction_SelectAllAction_CopySelectionAction_WebClipboardStatusNotifierÉï	TextStyleCharacterRangeStringCharactersDragStartBehaviorKeyboardInsertedContentSelectionChangedCauseSmartDashesTypeSmartQuotesTypeTextEditingValueTextInputTypeTextSelectionvoidStringMapdynamic"SelectableRegionContextMenuBuilderSelectableRegionWidgetBuildContextTextPositionboolTextBoundaryDurationmillisecondsintListSingleChildRenderObjectWidgetCompositionCallbackoverrideRenderObjectupdateRenderObjectcompositeCallbackenabledRenderProxyBoxVoidCallbackcallmarkNeedsPaintPaintingContextOffsetaddCompositionCallbackpaintTextInputFormatterdispose	TextFieldValueNotifierisValid	fromValueemptytext	composingisComposingRangeValidnotifyListenerscopyWith	selection	collapsedoffset	TextRangevalueTextSpanwithComposingstylemerge
decorationTextDecoration	underlinechildren
textBefore
textInside	textAfterlengthendstartFlutterError
DeprecatedreadOnlycontentInsertionConfiguration
isNotEmptyValueChangeddouble
Simulation_iOSBlinkingCaretKeyFrameslasttimei	TextInputCupertinoTextFieldTextInputActiondoneAutomaticKeepAliveClientMixinwantKeepAliveFormIntentActionActionsinvokemaybeInvoke	ShortcutsDefaultTextEditingShortcutsoverridableDeleteCharacterIntentDeleteToNextWordBoundaryIntentextentDeleteToLineBreakIntentbaseSelectAllTextIntent%DoNothingAndStopPropagationTextIntentReplaceTextIntentUpdateSelectionIntentCopySelectionTextIntentPasteTextIntent
WidgetsAppLogicalKeyboardKeykeyASystemChannelskeyEvent	FocusNode	textInputTextInputClient!DoNothingAndStopPropagationIntent#TextSelectionGestureDetectorBuilderScaffold
ScrollableScrollNotificationObserverTextSelectionOverlaySemanticsServiceannounceStatefulWidget	multiline
StrutStyle	TextAlignTextWidthBasisparentTextCapitalizationnoneBoxHeightStyletightBoxWidthStyleall
BrightnesslightCliphardEdgeTextMagnifierConfigurationdisabledTextSelectionHandleControls	selectAllpastecopycutmisspelledTextStyleautofillHintsmaxLinesFilteringTextInputFormattersingleLineFormatterIterableTextHeightBehaviorUndoHistoryControllerforceStrutHeightinheritFromTextStylefromTextStyleTextDirectionltrrtlDirectionalityRenderEditablelocaleLocaleMediaQueryDatatextScaleFactor
MediaQuery
TextScalerColorCupertinoThemeDataprimaryColorCupertinoColorsinactiveGrayFloatingCursorDragStateTextFormFieldExpandedSizedBoxDefaultSelectionStyleTextSelectionThemeDataselectionColorTextSelectionControlsbuildToolbar	ThemeDataplatformaddListener
ListenableperformPrivateCommandTextFieldTapRegionObjectunfocusPointerDownEvent	TapRegionTapRegionCallbackSystemMouseCursorsMouseCursorignorePointerpreferredLineHeightRadius
EdgeInsetsScrollController
controllerScrollPhysicsphysicsScrollBehaviorselectionEnabledAutofillClientAutofillScopeAutofillHintsnameemailemailAddressRestorationBucketRestorationScopeRestorableTextEditingControllerRestorationManager	ScrollbarScrollConfigurationonContentInsertedallowedMimeTypesshowToolbarbuildGestureDetectorContextMenuControllercontextMenuAnchorscontextMenuButtonItems"TextSelectionToolbarLayoutDelegateAdaptiveTextSelectionToolbargetAdaptiveButtonsContextMenuButtonItemBrowserContextMenuSpellCheckServiceDefaultSpellCheckServiceSpellCheckConfigurationgetSelectableButtonItemsbuttonItemsClipboardStatusonPasteclipboardStatusunknowndefaultTargetPlatformTargetPlatformandroidaddAllonCut	onPressedtypeContextMenuButtonTypeonCopyonShareshareonSelectAllonLookUplookUponSearchWeb	searchWebonLiveTextInputaddliveTextInputisEmptyfirstkIsWebiOSmacOSaddressCityaddressCityAndStateaddressStatecountryNamecreditCardNumbernumber
familyNamefullStreetAddress	givenNamejobTitlelocation
middleName
namePrefix
nameSuffixnewPasswordnewUsernamenicknameoneTimeCodeorganizationNamepassword
postalCodestreetAddressLine1streetAddressLine2sublocalitytelephoneNumberurlusernameiOSKeyboardTypefuchsialinuxwindowsstreetAddressbirthdaydatetimebirthdayDaybirthdayMonthbirthdayYearcountryCodecreditCardExpirationDatecreditCardExpirationDaycreditCardExpirationMonthcreditCardExpirationYearcreditCardFamilyNamecreditCardGivenNamecreditCardMiddleNamecreditCardNamecreditCardSecurityCodecreditCardTypegenderimpplanguagemiddleInitialphotopostalAddresspostalAddressExtendedpostalAddressExtendedPostalCodestreetAddressLevel1streetAddressLevel2streetAddressLevel3streetAddressLevel4streetAddressLine3phonetelephoneNumberAreaCodetelephoneNumberCountryCodetelephoneNumberDevicetelephoneNumberExtensiontelephoneNumberLocaltelephoneNumberLocalPrefixtelephoneNumberLocalSuffixtelephoneNumberNationaltransactionAmountnumberWithOptionsdecimaltransactionCurrencyDiagnosticPropertiesBuilderdebugFillPropertiesDiagnosticsPropertydefaultValueEnumPropertyIntPropertyStateWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTimerAnimationControllervsynciOSBlinkingCaret	GlobalKeyClipboardStatusNotifierLiveTextLiveTextInputStatusNotifierTextInputConnectionattachedScrollNotificationObserverStateRectwidgetscrollController	LayerLinkAutofillGroupStateautofillClientvisibleForTestingspellCheckEnabledSpellCheckResultssuggestionSpansProcessTextServiceDefaultProcessTextServiceProcessTextActionOrientation	focusNodehasFocusmincursorColoralphawithOpacityselectionControlstoolbarOptionsobscureTextisCollapsed	pasteableenableInteractiveSelectiontrimLiveTextInputStatussetStatecurrentContext
StateError	ClipboardsetDataClipboardDatatoolbarupdateSchedulerBindinginstanceaddPostFrameCallbackmounted
debugLabelFuturegetData
kTextPlainmax
baseOffsetextentOffsetreplacedinvokeMethodstartLiveTextInputSuggestionSpanSpellCheckSuggestionsToolbarrangefloorspellCheckServiceWidgetsBindingplatformDispatchernativeSpellCheckServiceDefinedreportErrorFlutterErrorDetails	exceptionlibrarystack
StackTracecurrentTextSelectionToolbarAnchorsgetSelectionRect
InlineSpantoPlainTextstartGlyphHeightendGlyphHeight
charactersgetRectForComposingRangeheightlastSecondaryTapDownPositionprimaryAnchorTextSelectionPointgetEndpointsForSelectionfromSelection	renderBoxselectionEndpointsgetEditableButtonItemsSelectableRegionStatelabelactionprocessTextActionid	initState
showCursorspellCheckConfigurationclearqueryTextActionsdidChangeDependencies
boldTextOfcontext
fontWeight
FontWeightboldAutofillGroupmaybeOf
unregisterregister	autofocushasSize
FocusScopeof
TickerModeViewviewIdupdateConfigtextInputConfigurationorientationOfremoveListenerdidUpdateWidgetcontextMenuBuilderonSelectionHandleTappeddragStartBehaviormagnifierConfigurationtoolbarIsVisiblehandlesVisibleshowHandlesshowSelectionHandles
autofillIdupdateKeepAlivesetStyle
fontFamilyfontSizetextDirection	textAligncanPastecancelremoveObserverFocusManagersetEditingStateaffinityscribbleInProgressscribble
forcePresskeyboardbrieflyShowPasswordresetCharTickswithAnimationnewlineshouldUnfocusgonextprevioussearchsendcontinueActionemergencyCalljoinrouteunspecifiedonAppPrivateCommandcontainsmimeTypeRawFloatingCursorPointstateStartisAnimatingstopstartLocationshouldResetOrigincurrentTextPositionstartCaretCentergetLocalRectForCaretcenter$calculateBoundedFloatingCursorOffsetsetFloatingCursorUpdatecenteredPointrawCursorOffsetgetPositionForPointlocalToGlobalEnd	animateTodurationcurveCurves
decelerate
centerLeftisCompletedfromPosition
lerpDoubledxdyresetLerpValuepragmaonEditingCompleteErrorDescriptionclearComposing	nextFocuspreviousFocusonSubmittedRevealedOffsetpositionallowImplicitScrollingrectSizesizewidthclampDoublerightleft
fromCenterbottomtopminScrollExtentmaxScrollExtentshiftautofillConfigurationattachshowrequestAutofillcloseconsumeKeyboardTokenscheduleMicrotaskcurrentAutofillScopeTextInputControlhideconnectionClosedReceivedrequestFocusScrollableStatefindAncestorStateOfTypeScrollNotificationScrollStartNotificationScrollEndNotificationsizeOfFlutterViewpadding
viewInsetsdevicePixelRatiofromLTWHupdateForScrollspellCheckToolbarIsVisibleTextBoxgetBoxesForSelectionmapboxtoRectreduceresultexpandToIncludeselectionBoundshideToolbarselectionStartInViewportselectionEndInViewportMatrixUtilstransformRectgetTransformTohasNaNoverlapsRenderAbstractViewportpaintBoundsdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkrenderObjectselectionDelegate	doubleTapdrag	longPresstaponSelectionChangedCurvefastOutSlowInfindRenderObject
hasClientsscrollPaddinggetHandleSizekMinInteractiveDimensiongetHandleAnchorTextSelectionHandleTypeshowOnScreeninflateRectjumpToLocalizationsmaybeLocaleOffetchSpellCheckSuggestionsinputFormattersfold	formatterformatEditUpdatenewValueuserInteraction	onChangeddebugDeterministicCursorfloatingCursorOnisActivecursorOpacityAnimatesanimateWithwhenCompleteperiodiczero(stopCurrentVerticalRunIfSelectionChangesaddObserverLayerElementdebugIsActiveMatrix4setEditableSizeAndTransformscribbleEnabledScrollDirectionuserScrollDirectionidle
textScalerlineartextScalerOf
inlineSpantextHeightBehaviorDefaultTextHeightBehaviorstructStyle
strutStyleplaceholderRenderComparisonforcelayoutcompareindexSelectionRectincludeSemanticsLabelsmoveNextbounds	directionsetSelectionRectssetComposingRectsetCaretRectdevicePixelRatioOfhideHandles#spellCheckSuggestionsToolbarBuilder showSpellCheckSuggestionsToolbarmagnifierIsVisibleupdateMagnifiershowMagnifierhideMagnifierintentForMacOSSelectorprimaryFocushashCodeTextInputConfigurationtoListgrowableAutofillConfigurationuniqueIdentifiercurrentEditingValue	inputTypekeyboardTypeautocorrectsmartDashesTypesmartQuotesTypeenableSuggestions_userSelectionEnabledinputActiontextInputActiontextCapitalizationkeyboardAppearanceenableIMEPersonalizedLearningcanCopy
handleCopycanCut	handleCuthandlePastegetTrailingTextBoundaryAtgetLeadingTextBoundaryAtTextAffinityupstream
downstreamCharacterBoundarywordBoundariesmoveByWordBoundaryLineBoundaryParagraphBoundaryDocumentBoundarydefaultActionTransposeCharactersIntentatmoveBack
expandNextcurrentCharactersstringBeforestringAfterstringBeforeLengthCallbackActiononInvokecurrentTextEditingValuereplacementRangereplacementTextcauseScrollToDocumentBoundaryIntentforwardScrollIntentScrollIncrementTypepageScrollPositioncurrentStateScrollActiongetDirectionalIncrementpixelsExtendSelectionByPageIntentAxisDirectiondownupnewSelectionDirectionalCaretMovementIntentDismissIntentonTapOutsidekindPointerDeviceKindtouchmousestylusinvertedStylustrackpadUnimplementedErrorTypeDoNothingActionconsumesKeyDirectionalFocusIntentDirectionalFocusActionforTextField ExtendSelectionByCharacterIntentignoreNonCollapsedSelection'ExtendSelectionToNextWordBoundaryIntent,ExtendSelectionToNextParagraphBoundaryIntent ExtendSelectionToLineBreakIntent-ExtendSelectionVerticallyToAdjacentLineIntent-ExtendSelectionVerticallyToAdjacentPageIntent;ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent'ExtendSelectionToDocumentBoundaryIntent6ExtendSelectionToNextWordBoundaryOrCaretLocationIntent ExpandSelectionToLineBreakIntentisExpand'ExpandSelectionToDocumentBoundaryIntentextentAtIndexintentdebugCheckHasMediaQuerybuildchildgroupIdkReleaseModeMouseRegioncursormouseCursoractionsUndoHistoryonTriggeredshouldChangeUndoStackoldValueundoStackModifierundoControllerFocusincludeSemanticsNotificationListeneronNotificationnotificationkeyexcludeFromSemanticsaxisDirectionscrollPhysicsrestorationIdscrollBehavior
scrollbars
overscrollviewportBuilderViewportOffsetCompositedTransformTargetlink	SemanticseditableKeyupdateSelectionRectsSizeChangedLayoutNotifierbackgroundCursorColor	forceLineminLinesexpandsmisspelledSelectionColortextWidthBasisobscuringCharacterrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOffsetselectionHeightStyleselectionWidthStylepaintCursorAboveTexttextSelectionDelegatepromptRectRangepromptRectColorautocorrectionTextRectColorclipBehaviorSetreplaceRange	substringshrink&buildTextSpanWithSpellCheckSuggestionsbuildTextSpanMultiChildRenderObjectWidget
WidgetSpanextractFromInlineSpansetPromptRectRange	immutable	identical	compareToScribbleClienttoStringregisterScribbleElementunregisterScribbleElementselectPositionAtfrom	intersectHitTestResulthitTestInViewpathanyHitTestEntryentrytarget	RenderBoxTextPainterParagraphBuilder	noScalingPlaceholderDimensionsdebugAssertIsValid	pushStylegetTextStyleaddPlaceholder	alignmentpoprunesisHighSurrogate
codeUnitAtisLowSurrogateDirectionalTextEditingIntentContextAction_selectionOverlayselectionOverlay_value_characterBoundaryrenderEditablegetLineAtOffsettextEditingValuecollapseSelectioncontinuesAtWrapexpandToextendTocollapseAtReversalVerticalCaretMovementRun%_textEditingValueforTextLayoutMetricsstartVerticalCaretMovementmoveByOffsetmovePreviouscutSelectioncopySelection
hasStringsSingleChildRenderObjectWidgetRenderProxyBoxValueNotifier
SimulationStatefulWidgetStateAutomaticKeepAliveClientMixinWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTextInputClientAutofillClientMultiChildRenderObjectWidgetScribbleClient
WidgetSpanTextBoundaryContextActionClipboardStatusNotifierùâsÅò£¨1+»ÃÆ„ Ü‚ágKeyboardInsertedContentSelectionChangedCauseSmartDashesTypeSmartQuotesTypeTextEditingValueTextInputTypeTextSelection Üªpackage:flutter/services.dart0  Ä¶  
dart:async  Äª  ÄÕmathÄ–	dart:mathÄÌÄ˚ 	TextStyle Ä◊  ÄÁuiÄÍdart:uiÅ*ÅOCharacterRangeStringCharacters Äˇ  "package:characters/characters.dart  ÅR  package:flutter/foundation.dartÅ¢Å∏DragStartBehavior Å|  package:flutter/gestures.dart  Åª  package:flutter/rendering.dart  Å‰  package:flutter/scheduler.dart  Ç  package:flutter/services.dart  Ç6  actions.dart  ÇM  autofill.dart  Çe  automatic_keep_alive.dart  Çâ  
basic.dart  Çû  binding.dart  Çµ  constants.dart  ÇŒ  context_menu_button_item.dart  Çˆ  
debug.dart  É  default_selection_style.dart  É2  #default_text_editing_shortcuts.dart  É`  focus_manager.dart  É}  focus_scope.dart  Éò  focus_traversal.dart  É∑  framework.dart  É–  localizations.dart  ÉÌ  magnifier.dart  Ñ  media_query.dart  Ñ!  notification_listener.dart  ÑF  scroll_configuration.dart  Ñj  scroll_controller.dart  Ñã  scroll_notification.dart  ÑÆ  !scroll_notification_observer.dart  Ñ⁄  scroll_physics.dart  Ñ¯  scroll_position.dart  Ö  scrollable.dart  Ö1  scrollable_helpers.dart  ÖS  shortcuts.dart  Öl  !size_changed_layout_notifier.dart  Öò  spell_check.dart  Ö≥  tap_region.dart  ÖÕ  	text.dart  Ö·  text_editing_intents.dart  Ü  text_selection.dart  Ü#  #text_selection_toolbar_anchors.dart  ÜQ  ticker_provider.dart  Üp  undo_history.dart  Üå  	view.dart  Ü†  widget_span.dart    	dart:core¿≤L ¿ÿGóµ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇıÉ
É1É_É|ÉóÉ∂ÉœÉÏÑÑ ÑEÑiÑäÑ≠ÑŸÑ˜ÖÖ0ÖRÖkÖóÖ≤ÖÃÖ‡ÜÜ"ÜPÜoÜãÜüÜ∫ÜªáiájáÇá†áΩáæàà3àúàùàÍâGâHâîâ≠â±âøâ√ää,äfä~ä•ä®ä©äˆã1ãáãàãœååIåèåêå€çç4ç5çÇçÜçœééé.é=éMé\élé{é~éé¬è)èXènèoè{èµè¯è¸êêcêòê—ëë6ë:ë<ë=ëwëºëΩëÏííí.íGífííîí≥í—í˚ììììì*ìdìwìƒì ìÏììÚìÛî î$îcî≤ïïOï\ï`ï¨ïÌïÒñBñèñ”ñ◊ó%ónóæòòUò°òÏô+ôpôtô¬öö%ö)öwö¡ö≈öŸõ%õpõîõòõÙúúúúúkúíú‹ùùºûûTûZûßûµûªüüQü¢üÒ†>†V†\†™†»†Œ†‰°2°°†°¶¢¢¢@¢ì¢î¢Ó¢Ù£8£X£ì£°£Û§C§î§æ§«§ı§ˆ•$•E•ñ•‰¶1¶o¶u¶≤ß ßMßìßﬂ®
®'®C®X®î®∂®Ω®¡®¬®Œ®˜©©H©ô©Î™™™6™:™;™o™u™∆´´r´…¨¨j¨∂≠≠≠7≠h≠n≠o≠ÿÆÆ/ÆCÆ_ÆüÆ±Æ“Ø
ØØTØ]ØdØhØiØõØ°ØÒ∞∞A∞í∞‡±-±k±q±Æ±ı≤B≤i≤o≤¡≤–≤˛≥L≥è≥ï¥¥Z¥^¥_¥¥Ö¥–µµµYµßµ¯∂6∂G∂ö∂û∂ü∂—∂◊∑%∑p∑~∑Ñ∑’∏#∏t∏≤∏Ãπππ	πLπèπÏππÚπÛ∫!∫%∫s∫¿∫‘∫ÿª,ªªãªòªøªˆª¯ººHºNºëº†º…ΩΩΩΩ6ΩLΩdΩÄΩÜΩáΩ∆Ω˛Ωˇæ-æ3æLæ_æ`æçæìæÂæÎøøøøFøLø†ø¶øøø”ø‘¿ @¿ @¿ @'¿ @?¿ @A¿ @B¿ @ê¿ @î¿ @„¿ A0¿ AS¿ AW¿ Ae¿ Ai¿ Aú¿ A¬¿ B¿ B¿ Bc¿ Bv¿ B|¿ B∏¿ C¿ C#¿ CH¿ Cá¿ C≥¿ C¥¿ D¿ D-¿ D3¿ DÖ¿ Dã¿ D°¿ Dß¿ DÙ¿ E¿ E¿ Eu¿ Eá¿ Eç¿ Eù¿ E£¿ EÌ¿ F.¿ F/¿ FÄ¿ F–¿ Fˆ¿ F¸¿ GL¿ Gw¿ G}¿ GÃ¿ H¿ H.¿ H4¿ H^¿ Hd¿ Hz¿ H»¿ HŒ¿ I6¿ IH¿ IN¿ I^¿ Id¿ IÆ¿ I√¿ IÍ¿ IÏ¿ IÌ¿ J/¿ JA¿ Jk¿ Jñ¿ Jﬁ¿ K¿ K&¿ KJ¿ Kn¿ Kí¿ K∂¿ K⁄¿ K˛¿ L"¿ LF¿ Lk¿ Lp¿ Lq¿ L≤¿ L«¿ L›¿ Lﬂ¿ L‡¿ M¿ Mz¿ MΩ¿ M‚¿ N¿ N'¿ Nc¿ N†¿ N∫¿ N∆¿ N–¿ NÂ¿ O#¿ O$¿ O@¿ OA¿ Oe¿ Of¿ Or¿ Oë¿ Oí¿ Oû¿ O—¿ O“¿ P¿ P<¿ P=¿ PI¿ Pc¿ Pç¿ Pé¿ P›¿ Q'¿ QK¿ Q`¿ Qx¿ QÆ¿ Q¯¿ R¿ R1¿ RV¿ Rc¿ Rã¿ R§¿ R™¿ R´¿ RÙ¿ SB¿ Sk¿ Sü¿ SŸ¿ S˜¿ T¿ T¿ T&¿ T,¿ T-¿ TS¿ TÑ¿ Tà¿ Tä¿ Tã¿ T©¿ T≠¿ T˝¿ UE¿ US¿ UW¿ U°¿ UÏ¿ V&¿ V*¿ VE¿ VI¿ Vô¿ VÍ¿ W4¿ W8¿ W}¿ WÅ¿ W—¿ X¿ X ¿ Xc¿ Xg¿ X|¿ XÄ¿ XÀ¿ Y¿ Y9¿ Y=¿ Yã¿ Y“¿ Z¿ Zk¿ Z∏¿ [¿ [Q¿ [†¿ [∆¿ [ ¿ \¿ \¿ \¿ \g¿ \É¿ \á¿ \”¿ ] ¿ ]K¿ ]O¿ ]ê¿ ]î¿ ]·¿ ^#¿ ^'¿ ^p¿ ^ø¿ ^ˇ¿ _¿ _¿ _d¿ _¥¿ _ÿ¿ _‹¿ `¿ `¿ `f¿ `≥¿ `˜¿ aH¿ aê¿ a‹¿ aÍ¿ aÓ¿ b>¿ bÖ¿ b‘¿ c ¿ c¿ cA¿ cE¿ d2¿ d›¿ eà¿ fc¿ gY¿ g]¿ g¥¿ g∏¿ h¢¿ iå¿ jç¿ kå¿ l—¿ m–¿ n˚¿ p&¿ pÚ¿ pˆ¿ q#¿ q'¿ r¿ r˚¿ sπ¿ th¿ uØ¿ vX¿ w¿ wÊ¿ xì¿ x–¿ x‘¿ xÍ¿ xÓ¿ yU¿ yº¿ zW¿ {"¿ {–¿ |6¿ |Ì¿ |Ò¿ }¿ }¿ }e¿ }≤¿ ~¿ ~P¿ ~†¿ ~¥¿ ~∏¿ ~˚¿ 3¿ 7¿ á¿ ’¿ Ä"¿ Äm¿ ÄΩ¿ ÄÂ¿ ÄÈ¿ Å6¿ Å¿ Å≈¿ Ç¿ Çb¿ Ç≤¿ Ç¿ ÇÙ¿ ÉD¿ Éî¿ É‚¿ Ñ1¿ ÑU¿ Ñh¿ Ñl¿ Ñã¿ Ñè¿ Ñﬁ¿ Ö+¿ ÖV¿ ÖZ¿ Ö™¿ Ö˘¿ ÜG¿ Ür¿ Üv¿ Üµ¿ Ü‡¿ Ü‰¿ á3¿ á~¿ áÇ¿ á…¿ à¿ àI¿ às¿ àÜ¿ àä¿ à™¿ àÆ¿ à˝¿ âC¿ âì¿ â‚¿ ä¿ ä¿ äQ¿ äÑ¿ äà¿ ä√¿ ä«¿ ã¿ ãR¿ ãr¿ ãv¿ ãº¿ å	¿ åT¿ åû¿ åÈ¿ ç1¿ ç5¿ çA¿ çc¿ çÉ¿ ç–¿ çÿ¿ çﬁ¿ çÊ¿ çÍ¿ ç˝¿ é¿ é¿ é¿ éb¿ é†¿ éÃ¿ éˆ¿ é¸¿ èJ¿ èö¿ è⁄¿ è‡¿ ê/¿ êÄ¿ êΩ¿ ë¿ ë¿ ë]¿ ëë¿ ë¢¿ ë±¿ ëœ¿ ëÏ¿ í¿ í*¿ íH¿ íe¿ íã¿ í±¿ í‘¿ íÌ¿ ì	¿ ì(¿ ìQ¿ ìw¿ ìè¿ ì†¿ ì±¿ ì“¿ îA¿ î}¿ îÉ¿ îù¿ î≤¿ î…¿ î‹¿ îˆ¿ ï¿ ï.¿ ï_¿ ï{¿ ïë¿ ï∏¿ ï—¿ ïÌ¿ ñ¿ ñ(¿ ñ_¿ ñs¿ ñè¿ ñ•¿ ñ√¿ ñ‡¿ ó¿ ó#¿ ó:¿ ói¿ ó¿ ó®¿ óƒ¿ ó€¿ óÚ¿ ò¿ ò1¿ òX¿ òë¿ ò»¿ ò˝¿ ô-¿ ôc¿ ôâ¿ ô§¿ ôº¿ ô‚¿ ôÛ¿ ö¿ öY¿ ö_¿ öÉ¿ öÆ¿ ö«¿ öÓ¿ õ¿ õ¿ õ@¿ õo¿ õó¿ õ¥¿ õ÷¿ ú¿ ú6¿ úe¿ ú’¿ ùE¿ ùv¿ ùÖ¿ ù“¿ û¿ û¿ û¿ û\¿ û°¿ û´¿ ü¿ ü`¿ üÓ¿ †¿ †!¿ †v¿ †ì¿ †Ω¿ †Î¿ °¿ °>¿ °b¿ °z¿ °ï¿ °ƒ¿ °Ô¿ ¢¿ ¢:¿ ¢Q¿ ¢¿ ¢™¿ ¢Õ¿ ¢Ô¿ £¿ £;¿ £U¿ £d¿ £ë¿ £‚¿ §!¿ §å¿ §ñ¿ §∑¿ •#¿ •J¿ •m¿ •≠¿ •˛¿ ¶¿ ¶+¿ ¶X¿ ¶Y¿ ¶¿ ¶©¿ ¶™¿ ¶·¿ ¶˛¿ ¶ˇ¿ ßA¿ ßÉ¿ ßâ¿ ß∞¿ ß∂¿ ßÈ¿ ß˛¿ ®!¿ ®"¿ ®]¿ ®†¿ ®¶¿ ®Ô¿ ©;¿ ©ã¿ ©û¿ ©§¿ ©Ω¿ ©“¿ ©Ï¿ ©Ì¿ ™¿ ™G¿ ™H¿ ™É¿ ™™¿ ™´¿ ™„¿ ´
¿ ´¿ ´L¿ ´ó¿ ´ù¿ ´∂¿ ´À¿ ´‚¿ ´„¿ ¨1¿ ¨7¿ ¨Ö¿ ¨∂¿ ¨º¿ ¨‘¿ ¨⁄¿ ¨Í¿ ¨¿ ≠9¿ ≠Q¿ ≠R¿ ≠z¿ ≠Ä¿ ≠–¿ Æ¿ Æl¿ Æî¿ Æª¿ Æº¿ ÆÂ¿ ÆÎ¿ Ø7¿ Øá¿ ØÆ¿ Ø¥¿ Øƒ¿ Ø ¿ ∞¿ ∞1¿ ∞2¿ ∞l¿ ∞ä¿ ∞ê¿ ∞‚¿ ∞˜¿ ∞˝¿ ±¿ ±¿ ±l¿ ±Ö¿ ±Ü¿ ±¡¿ ±È¿ ±Ô¿ ≤¿ ≤¿ ≤6¿ ≤7¿ ≤~¿ ≤ß¿ ≤®¿ ≤Ô¿ ≥¿ ≥¿ ≥b¿ ≥Ç¿ ≥É¿ ≥∂¿ ≥œ¿ ≥–¿ ¥¿ ¥¿ ¥Z¿ ¥â¿ ¥ä¿ ¥ƒ¿ ¥¯¿ ¥˛¿ µE¿ µà¿ µÃ¿ ∂¿ ∂b¿ ∂h¿ ∂¥¿ ∂˝¿ ∑I¿ ∑X¿ ∑^¿ ∑©¿ ∑Ï¿ ∑Ú¿ ∏[¿ ∏Ø¿ ∏ƒ¿ ∏ ¿ π¿ πo¿ π±¿ πœ¿ πÓ¿ ∫4¿ ∫:¿ ∫n¿ ∫r¿ ∫ì¿ ∫î¿ ∫Õ¿ ª ¿ ª¿ ª+¿ ª@¿ ª]¿ ª^¿ ªõ¿ ª¡¿ ª«¿ º¿ º3¿ º9¿ ºá¿ º‘¿ Ω"¿ Ωk¿ Ωª¿ ΩÀ¿ Ω—¿ æ	¿ æ¿ æD¿ æE¿ æá¿ æŒ¿ æË¿ æÓ¿ ø8¿ øm¿ øs¿ ø†¿ ø¶¿ ø∂¿ øº¿ ¿¿ ¿¿ ¿)¿ ¿X¿ ¿Y¿ ¿ô¿ ¿—¿ ¿◊¿ ¡¿ ¡p¿ ¡v¿ ¡Æ¿ ¡∆¿ ¡«¿ ¬¿ ¬L¿ ¬h¿ ¬n¿ ¬¶¿ ¬¨¿ ¬˝¿ √¿ √"¿ √s¿ √¥¿ √…¿ √ÿ¿ √˜¿ ƒd¿ ƒû¿ ƒ¢¿ ƒ√¿ ƒƒ¿ ƒ˚¿ ≈¿ ≈¿ ≈M¿ ≈h¿ ≈i¿ ≈ß¿ ≈≠¿ ≈Ó¿ ∆>¿ ∆ó¿ ∆•¿ ∆´¿ ∆Ë¿ ∆Ó¿ «3¿ «_¿ «`¿ «±¿ «‹¿ «‚¿ »'¿ »-¿ »=¿ »C¿ »í¿ »¶¿ »À¿ »Ã¿ …¿ …R¿ …X¿ …®¿ …€¿ …·¿  +¿  G¿  M¿  õ¿  ‚¿ À3¿ À[¿ Àa¿ À≤¿ Ã¿ ÃT¿ Ãê¿ Ãñ¿ ÃÂ¿ Õ2¿ Õb¿ Õh¿ Õ¥¿ Õ¬¿ Õ⁄¿ Õ‰¿ ÕÍ¿ Œ9¿ Œâ¿ Œ ¿ Œÿ¿ Œ˛¿ œ¿ œ¿ œY¿ œö¿ œ®¿ œÀ¿ œ’¿ œ€¿ –*¿ –W¿ –e¿ –ï¿ –ü¿ –•¿ –µ¿ –ª¿ — ¿ —¿ —f¿ —{¿ —í¿ —ì¿ —À¿ “¿ “!¿ “q¿ “§¿ “™¿ “¸¿ ”N¿ ”T¿ ”™¿ ”∞¿ ‘¿ ‘L¿ ‘^¿ ‘d¿ ‘µ¿ ’¿ ’$¿ ’*¿ ’Ñ¿ ’’¿ ’Ô¿ ’ı¿ ÷@¿ ÷d¿ ÷r¿ ÷è¿ ÷ô¿ ÷ü¿ ÷Ì¿ ◊>¿ ◊W¿ ◊e¿ ◊î¿ ◊û¿ ◊§¿ ◊º¿ ◊¬¿ ◊“¿ ◊ÿ¿ ÿ%¿ ÿp¿ ÿå¿ ÿ°¿ ÿÚ¿ Ÿ¿ Ÿ¿ Ÿ¿ ŸV¿ Ÿõ¿ Ÿ°¿ ŸË¿ ⁄$¿ ⁄*¿ ⁄v¿ ⁄ö¿ ⁄†¿ ⁄π¿ ⁄ø¿ €¿ €W¿ €]¿ €ê¿ €û¿ €¥¿ €Ì¿ €ı¿ €ˇ¿ ‹¿ ‹*¿ ‹+¿ ‹d¿ ‹±¿ ‹¿¿ ‹∆¿ ›¿ ›f¿ ›l¿ ›Ö¿ ›ö¿ ›Ì¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁR¿ ﬁX¿ ﬁ¶¿ ﬁ≈¿ ﬁÀ¿ ﬂ¿ ﬂ\¿ ﬂß¿ ﬂ∆¿ ﬂ«¿ ‡¿ ‡I¿ ‡O¿ ‡ü¿ ‡Ò¿ ·4¿ ·Å¿ ·ƒ¿ ·Ÿ¿ ·ﬂ¿ ·Ô¿ ·ı¿ ‚F¿ ‚í¿ ‚•¿ ‚ı¿ „D¿ „z¿ „¨¿ „≠¿ „È¿ ‰!¿ ‰'¿ ‰g¿ ‰í¿ ‰ß¿ ‰À¿ ‰Ã¿ Â¿ Â5¿ Â6¿ Âo¿ Â∞¿ ÂÊ¿ ÂÏ¿ Ê1¿ Êx¿ Êº¿ Êﬂ¿ ÊÂ¿ Á*¿ Áo¿ Áö¿ Á†¿ Á¿ Ë@¿ Ëè¿ Ëï¿ Ë´¿ Ë˘¿ È@¿ ÈF¿ È•¿ È∑¿ ÈÃ¿ È“¿ Í¿ ÍA¿ Íd¿ Í≥¿ Íˇ¿ ÎJ¿ Îx¿ Î~¿ Î¡¿ Ï¿ ÏN¿ Ïû¿ ÏÌ¿ Ì¿ Ì)¿ Ì/¿ Ì?¿ ÌE¿ ÌÖ¿ ÌÀ¿ Ó¿ ÓN¿ Óú¿ Óﬂ¿ Ô¿ Ô	¿ ÔJ¿ Ôù¿ Ôº¿ Ô¬¿ ¿ 7¿ =¿ å¿ ‹¿ ¯¿ ˛¿ ÒN¿ Òù¿ ÒË¿ Ú¿ Ú"¿ Út¿ Úâ¿ Ú≤¿ Ú≥¿ ÚÓ¿ Û>¿ ÛK¿ ÛQ¿ Ûõ¿ ÛÈ¿ Ù/¿ Ù5¿ ÙF¿ Ùï¿ Ùõ¿ Ù©¿ ÙÔ¿ Ù˘¿ Ùˇ¿ ıM¿ ıó¿ ıË¿ ˆ¿ ˆ"¿ ˆM¿ ˆN¿ ˆë¿ ˆÿ¿ ˆﬁ¿ ˜)¿ ˜9¿ ˜?¿ ˜é¿ ˜≈¿ ˜À¿ ˜€¿ ¯è¿ ¯ﬂ¿ ˘¿ ˘ù¿ ˘Ì¿ ˙¿ ˙0¿ ˙h¿ ˙i¿ ˙´¿ ˙˙¿ ˚¿ ˚ ¿ ˚V¿ ˚W¿ ˚ü¿ ˚Œ¿ ˚œ¿ ¸¿ ¸R¿ ¸X¿ ¸§¿ ¸“¿ ¸ÿ¿ ¸Ë¿ ¸Ó¿ ˝;¿ ˝Ü¿ ˝õ¿ ˝≥¿ ˝¥¿ ˝¿ ˛?¿ ˛e¿ ˛k¿ ˛º¿ ˇ¿ ˇX¿ ˇ¶¿ ˇˆ¿ (¿ .¿ ¿  ¿¿d¿¥¿–¿÷¿'¿r¿æ¿˛¿¿¿/¿{¿À¿¿¿^¿â¿è¿Ë¿˙¿ ¿¿¿S¿|¿}¿º¿ˆ¿¸¿J¿õ¿Ê¿7¿h¿n¿~¿Ñ¿“¿¿*¿]¿^¿™¿∏¿æ¿	¿	¿	]¿	≠¿	¸¿
¿
:¿
;¿
Ñ¿
«¿
Õ¿¿d¿™¿∞¿ˇ¿P¿†¿»¿Œ¿¿R¿X¿Å¿á¿ó¿ù¿Â¿8¿Y¿~¿¿∫¿ﬁ¿‰¿˚¿¿I¿ñ¿‚¿2¿R¿g¿É¿Ñ¿¿¿„¿È¿<¿Q¿o¿p¿¨¿„¿È¿¿*¿H¿I¿é¿€¿˚¿¿Q¿u¿ä¿Æ¿Ø¿Î¿	¿
¿N¿q¿r¿º¿¬¿¿1¿2¿|¿Ç¿¿¿Ó¿Ô¿¿¿N¿T¿z¿°¿¢¿ﬂ¿B¿H¿¨¿‡¿N¿ƒ¿ ¿Ú¿¿)¿*¿t¿∏¿Œ¿‘¿¿W¿ñ¿ú¿ﬂ¿%¿N¿T¿l¿Å¿™¿´¿¯¿G¿_¿e¿µ¿Ÿ¿ﬂ¿ ¿P¿Q¿ç¿∫¿ª¿˚¿D¿J¿Ö¿ã¿Æ¿√¿Ô¿¿-¿s¿y¿√¿…¿È¿˛¿ ¿ O¿ ö¿ ±¿ ◊¿ ÿ¿!¿![¿!a¿!Ä¿!Ü¿!û¿!≥¿!—¿!“¿"¿">¿"D¿"|¿"•¿"∫¿"ı¿"ˆ¿#3¿#Ö¿#ó¿#ù¿#Ï¿$;¿$~¿$Ã¿$˝¿%¿%Q¿%z¿%Ä¿%°¿%ß¿% ¿%–¿&¿&Q¿&W¿&u¿&˜¿'I¿'û¿'Ù¿(D¿(Å¿(á¿(™¿(∞¿) ¿)Q¿)ù¿)æ¿)ƒ¿*¿*¿*_¿*©¿*Ø¿*¸¿+L¿+ò¿+Ê¿,4¿,Ñ¿,ä¿,ÿ¿-%¿-s¿-√¿.¿.%¿.+¿.v¿.≈¿/¿/¿/^¿/y¿/¿/Õ¿0¿0i¿0∑¿0˝¿1k¿1q¿1Ü¿1 ¿1Û¿1Ù¿2C¿2I¿2ê¿2‘¿2¸¿2˝¿33¿39¿3\¿3w¿3x¿3∫¿3–¿3÷¿4!¿4f¿4l¿4∑¿5¿5	¿5Q¿5ñ¿5–¿5÷¿5Ê¿5Ï¿69¿6K¿6j¿6k¿6£¿6Ó¿6Ù¿7A¿7Ö¿7ö¿7†¿7Â¿84¿8x¿8ê¿8ñ¿8‡¿9/¿9=¿9e¿9f¿9ª¿9Á¿9Ë¿:5¿:Ñ¿:í¿:ò¿:Á¿;:¿;j¿;p¿;¬¿<¿<I¿<O¿<e¿<k¿<∏¿<À¿<—¿=9¿=K¿=Q¿=ñ¿=‹¿>*¿>Q¿>W¿>§¿>Ù¿?¿?'¿?m¿?n¿?∞¿?Ù¿?˙¿@J¿@ï¿@‚¿A1¿A7¿Ax¿A~¿Aø¿B¿BY¿B_¿B∞¿B·¿BÁ¿C3¿CZ¿C`¿CØ¿C˙¿D ¿DP¿DÇ¿Dà¿Dÿ¿E'¿Et¿EÉ¿Eâ¿Eü¿EÔ¿F6¿F<¿F†¿F≤¿F∏¿FŒ¿G¿G;¿GA¿G•¿G∑¿GΩ¿GÕ¿H¿Hk¿H~¿HÃ¿I¿I(¿Iw¿Iæ¿I”¿J¿J¿JW¿Jù¿J£¿JÚ¿K.¿K4¿K~¿KŒ¿L¿L¿Ll¿LÅ¿Lª¿Lº¿M
¿M¿M¿ML¿Má¿Mà¿MÁ¿MË¿N4¿Ns¿Ny¿N…¿N·¿NÁ¿N˜¿N˝¿OA¿O¿OÕ¿P¿P`¿Pï¿P…¿Q¿Qe¿Q£¿Qÿ¿R¿R)¿RS¿RÅ¿R¨¿R⁄¿S¿S6¿S=¿Së¿Sí¿S¿¿T	¿TX¿T•¿Tµ¿T∂¿T˝¿UZ¿U[¿Uí¿U≠¿UŒ¿UÏ¿V¿V&¿VB¿Vc¿VÇ¿V∞¿VΩ¿V⁄¿V˚¿W¿WJ¿WW¿Wê¿W±¿W—¿X ¿X¿X.¿XO¿Xs¿X¶¿X≥¿X—¿XÚ¿Y¿YC¿YP¿Yq¿Yí¿Y∂¿YÈ¿Yˆ¿Z0¿ZQ¿Zq¿Z†¿Z≠¿Z∑¿ZΩ¿Zæ¿ZÈ¿[¿[>¿[b¿[ï¿[ü¿[•¿[¶¿[√¿[«¿[»¿\¿\=¿\k¿\á¿\é¿\»¿]¿]¿]¿]P¿]Q¿]¢¿]ı¿^G¿^õ¿^¢¿^Û¿_D¿_{¿_é¿_µ¿_÷¿_˘¿`P¿`å¿`È¿a&¿ab¿a∏¿aˆ¿b1¿bs¿b≠¿c
¿cg¿cƒ¿c˘¿dV¿d≥¿dÔ¿e+¿eà¿e∆¿f#¿f\¿fó¿f⁄¿g7¿gî¿g‘¿h1¿hj¿hw¿hx¿h∆¿hÏ¿i¿i¿i>¿ic¿iÜ¿i´¿iº¿iƒ¿i ¿iÀ¿i‰¿j
¿j¿j¿jd¿j£¿jÍ¿k*¿ka¿kõ¿k◊¿l¿lJ¿lÄ¿l«¿m¿mU¿mú¿m€¿n¿nX¿në¿nŒ¿o¿oJ¿oÇ¿o∑¿o¸¿p-¿pa¿pè¿p¬¿pı¿q1¿qi¿qû¿qÕ¿r¿r7¿rm¿r£¿r÷¿s¿sG¿sz¿s™¿sÎ¿t4¿tÄ¿t∑¿t˛¿uE¿uå¿u”¿v¿v_¿v•¿v‰¿w¿wb¿w®¿wÈ¿x-¿xm¿x≥¿x˘¿y<¿yî¿y“¿yˇ¿z2¿z9¿z:¿z}¿zÅ¿zÇ¿zé¿z»¿z…¿z’¿{¿{E¿{ü¿{Î¿|K¿|•¿}¿}´¿~R¿~Ω¿~Ë¿A¿¶¿˝¿Ä`¿Ä®¿ÄÛ¿ÅK¿Åß¿Ç¿ÇÜ¿ÇÚ¿Éa¿É‹¿ÑC¿Ñ∆¿ÖC¿Öπ¿ÜC¿áE¿áI¿áK¿áL¿ál¿àU¿àl¿à¶¿àÔ¿â¿â*¿â.¿âk¿âœ¿â–¿ä#¿äQ¿äR¿äÅ¿ä∫¿ã¿ã\¿ã©¿ãÌ¿å¿å6¿å7¿åm¿ås¿åÉ¿å”¿ç¿çD¿çE¿çr¿çΩ¿çæ¿çÈ¿é)¿é|¿é≥¿é¥¿éˇ¿è ¿è0¿è_¿è⁄¿è€¿ê¿êE¿êz¿ê{¿êô¿êö¿ê«¿ê”¿ë¿ë¿ëh¿ëi¿ë¢¿ëª¿ëº¿í¿í	¿íN¿íä¿íê¿í†¿íÓ¿ì¿ìV¿ìW¿ìÑ¿ìä¿ì€¿ìÒ¿î=¿î>¿î|¿îÇ¿î…¿ï¿ïh¿ïê¿ïë¿ñ¿ñ¿ñs¿ñ¡¿ñ¬¿ó¿óX¿óY¿ó®¿ó∂¿óº¿ò
¿òW¿ò]¿ò®¿òÚ¿ò¯¿ô¿ô<¿ô^¿ôò¿ôﬂ¿ô‡¿ö+¿öh¿ö∏¿öπ¿ö¿öÒ¿õ¿õ¿õ¿õV¿õW¿õr¿õÁ¿ú$¿ú(¿ú)¿ú5¿úM¿úë¿ú‰¿úÍ¿ù¿ù%¿ùY¿ù]¿ù^¿ùj¿ùÉ¿ù«¿û¿û¿û,¿û`¿ûd¿ûe¿ûq¿ûã¿ûœ¿ü¿ü¿ü/¿üp¿üt¿üu¿üÅ¿üü¿ü„¿†c¿†i¿†j¿†ï¿†±¿†◊¿†Î¿†Ò¿†Ú¿°¿°8¿°N¿°m¿°ù¿°‘¿°˜¿¢¿¢;¿¢^¿¢é¿¢ƒ¿£¿£¿£!¿£"¿£.¿£I¿£Ä¿£î¿£ö¿£π¿£Ï¿§B¿§F¿§G¿§S¿§q¿§®¿§º¿§¬¿§√¿§‚¿•¿•k¿•o¿•p¿•|¿•ñ¿•ª¿•ﬁ¿•˝¿¶ ¿¶W¿¶±¿¶“¿¶ı¿ß¿ß9¿ßO¿ßU¿ßY¿ßZ¿ßf¿ßà¿ß—¿ß¿®¿®<¿®@¿®A¿®f¿®x¿®¬¿® ¿®Œ¿®œ¿®¯¿©
¿©X¿©`¿©d¿©e¿©§¿©Î¿™¿™I¿™O¿™p¿™t¿™u¿™¢¿™Æ¿™‚¿´"¿´Y¿´g¿´m¿´ú¿´‰¿¨¿¨N¿¨h¿¨i¿¨ê¿¨±¿¨‘¿¨˜¿≠¿≠-¿≠R¿≠w¿≠Ω¿≠„¿Æ¿Æ,¿ÆÜ¿Æï¿Æ¿¿ÆÕ¿Æ’¿Æ€¿Æ˘¿Æ˝¿Æ˛¿Ø*¿Ø6¿Øi¿Øö¿Ø®¿ØÆ¿ØÓ¿∞¿∞>¿∞L¿∞R¿∞ö¿∞Á¿±¿±c¿±û¿±µ¿±Ò¿±˚¿≤8¿≤M¿≤S¿≤q¿≤u¿≤v¿≤è¿≤“¿≤÷¿≤◊¿≤˙¿≥¿≥D¿≥\¿≥j¿≥p¿≥†¿≥€¿¥*¿¥B¿¥P¿¥V¿¥y¿¥}¿¥~¿¥º¿¥‘¿¥‚¿¥Ë¿¥È¿µ6¿µM¿µç¿µË¿∂:¿∂Ä¿∂á¿∂à¿∂®¿∂„¿∂¿∂˜¿∑)¿∑s¿∑Æ¿∑≈¿∏¿∏¿∏H¿∏]¿∏c¿∏g¿∏h¿∏å¿∏ò¿∏»¿∏˘¿πC¿πZ¿πh¿πn¿πé¿πØ¿∫¿∫¿∫"¿∫)¿∫*¿∫\¿∫É¿∫®¿∫…¿∫Ó¿∫ˇ¿ª"¿ªE¿ªj¿ªÉ¿ªã¿ª≤¿ª◊¿ª¸¿º¿ºD¿ºÄ¿º£¿ºƒ¿º’¿º›¿º„¿ºÁ¿ºË¿Ω¿Ω@¿ΩF¿Ωx¿Ω~¿Ωº¿æ ¿æ!¿æ"¿æx¿æ¶¿æ¥¿æ∫¿æÍ¿ø¿ø¿ø¿ø¿ø¿øM¿øÉ¿øâ¿øª¿ø¡¿ø˝¿¿&¿¿p¿¿ë¿¿Ø¿¿Ω¿¿√¿¿ƒ¿¡¿¡5¿¡g¿¡É¿¡ë¿¡ö¿¡†¿¡§¿¡•¿¡·¿¬¿¬¿¬Y¿¬_¿¬õ¿¬ƒ¿√¿√(¿√F¿√T¿√Z¿√[¿√±¿√Ã¿√˛¿ƒ¿ƒ$¿ƒ-¿ƒ3¿ƒ7¿ƒ8¿ƒr¿ƒì¿ƒ°¿ƒß¿ƒ∆¿ƒÎ¿ƒÒ¿≈#¿≈8¿≈>¿≈B¿≈C¿≈ê¿≈•¿≈´¿≈ª¿≈¡¿∆	¿∆R¿∆ç¿∆“¿∆ˆ¿«D¿«í¿«¡¿«‘¿«⁄¿«€¿»0¿»G¿»x¿»é¿»è¿»µ¿»Ó¿…8¿…~¿…¿…Õ¿…˜¿…ˇ¿ 1¿ T¿ \¿ i¿ ã¿ ì¿ ô¿ ™¿ Æ¿ Ø¿ ˜¿ ˝¿ÀA¿Àt¿À›¿Ã0¿Ãµ¿Õi¿Õ∂¿Œ¿ŒN¿ŒÅ¿Œì¿ŒÂ¿œ	¿œ*¿œQ¿œ¢¿œÏ¿–8¿–à¿–¡¿–“¿–˚¿—$¿—3¿—@¿—J¿—_¿—k¿—¢¿—®¿—©¿“¿“¿“¿“`¿“o¿“¨¿“Â¿“È¿”I¿”ä¿”º¿”œ¿”’¿”˘¿‘%¿‘D¿‘^¿‘ó¿‘§¿‘œ¿‘⁄¿’¿’'¿’A¿’{¿’à¿’¥¿’ø¿’Ô¿÷¿÷(¿÷^¿÷k¿÷ò¿÷£¿÷€¿÷˙¿◊¿◊J¿◊W¿◊à¿◊ì¿◊ö¿◊û¿◊ü¿◊Ô¿ÿ
¿ÿ¿ÿ ¿ÿ&¿ÿt¿ÿâ¿ÿ“¿Ÿ¿Ÿ¿ŸX¿Ÿ¢¿ŸÚ¿⁄:¿⁄â¿⁄—¿⁄˙¿€,¿€\¿€è¿€ﬁ¿€Ì¿‹+¿‹g¿‹p¿‹v¿‹w¿‹º¿›¿›k¿›â¿›√¿›À¿ﬁ ¿ﬁv¿ﬁØ¿ﬁ…¿ﬁ—¿ﬁﬁ¿ﬂ8¿ﬂé¿ﬂï¿ﬂô¿ﬂö¿ﬂ‘¿‡¿‡'¿‡-¿‡=¿‡C¿‡í¿‡¡¿‡¯¿·7¿·a¿·¶¿·Ø¿·µ¿·∂¿‚(¿‚h¿‚î¿‚–¿„¿„'¿„Q¿„w¿„ô¿„†¿„§¿„•¿„Ò¿‰-¿‰3¿‰C¿‰I¿‰ó¿‰ﬂ¿Â0¿Âr¿Â¡¿Â◊¿Ê(¿Ê]¿Êë¿Ê›¿Á-¿Áh¿Á∫¿ÁË¿Ë¿ËA¿ËS¿Ëk¿Ë©¿Ëª¿Ë◊¿È¿È$¿ÈH¿ÈÉ¿Èï¿È≥¿ÈÙ¿Í¿Í*¿Íq¿ÍÉ¿Íü¿Íﬂ¿ÍÒ¿Î¿Îb¿Ît¿Î•¿Î©¿Î™¿ÎÔ¿Ï>¿Ï~¿ÏÀ¿ÏÂ¿ÏÎ¿ÏÏ¿Ì.¿Ì[¿Ìx¿Ìñ¿ÌÈ¿Ó¿Óì¿ÓÏ¿Ô2¿Ôj¿Ô≤¿Ô«¿Ô‰¿ÔÚ¿Ô˛¿	¿¿¿1¿5¿6¿L¿M¿Y¿n¿Ö¿À¿Ò¿ÒF¿Ò}¿Ò∂¿Ú¿Ú3¿Ú7¿Ú8¿Úâ¿ÚÆ¿Úﬂ¿Û ¿ÛN¿ÛR¿ÛS¿Û£¿Û≈¿Û‰¿ÛÂ¿ÛÒ¿Ù¿Ù5¿Ù6¿Ùb¿Ù≠¿Ù≈¿Ù∆¿ı¿ıK¿ıÄ¿ı∞¿ıÒ¿ı˜¿ı¯¿ˆ&¿ˆB¿ˆ}¿ˆÆ¿ˆŒ¿˜¿˜¿˜F¿˜L¿˜M¿˜ë¿˜À¿˜˙¿¯$¿¯E¿¯b¿¯ü¿¯ª¿¯√¿¯…¿¯ ¿¯Ó¿˘¿˘B¿˘d¿˘¡¿˘…¿˘œ¿˘–¿˙:¿˙H¿˙N¿˙O¿˙ö¿˙·¿˚¿˚+¿˚9¿˚?¿˚j¿˚ê¿˚…¿˚Â¿˚Ì¿¸*¿¸A¿¸I¿¸O¿¸P¿¸Ç¿¸Œ¿˝¿˝e¿˝ï¿˝Í¿˛;¿˛ç¿˛ì¿˛ó¿˛ò¿˛§¿˛’¿˛˚¿ˇ0¿ˇw¿ˇ∏¿ˇ„¿ˇÈ¿ˇÍ¿ ¿ U¿ ú¿ Ô¿6¿à¿“¿¿>¿s¿ß¿Ì¿¿>¿J¿m¿õ¿ß¿≥¿ª¿¿4¿:¿¿Ä¿Ω¿¿[¿a¿b¿ï¿‘¿¿&¿,¿-¿V¿}¿Ø¿¿A¿Ö¿•¿ﬂ¿Â¿Ê¿¿B¿ü¿ß¿≠¿Æ¿Õ¿	¿	c¿	k¿	q¿	r¿	ù¿	Ó¿
¿
;¿
à¿
¢¿
√¿
Î¿¿9¿b¿ã¿≤¿Ω¿≈¿À¿Ã¿¿*¿0¿Ç¿ô¿÷¿¿5¿;¿?¿@¿n¿¢¿—¿&¿P¿V¿Z¿[¿g¿z¿§¿◊¿¿H¿s¿ò¿∫¿÷¿Ô¿$¿U¿w¿ï¿œ¿¿J¿o¿Æ¿Õ¿ˆ¿6¿`¿u¿√¿«¿»¿Ì¿Ó¿9¿?¿ã¿œ¿ ¿C¿I¿î¿«¿˝¿˛¿
¿D¿E¿Q¿Ö¿“¿"¿k¿l¿∫¿€¿¿¿¿¿E¿≠¿≥¿¥¿œ¿ ¿:¿u¿{¿©¿™¿≈¿¿K¿ç¿õ¿°¿¢¿Ó¿¿:¿y¿©¿ÿ¿$¿V¿e¿ï¿ù¿‘¿·¿¿W¿ù¿˜¿¿¿A¿B¿}¿∑¿¿q¿r¿’¿/¿p¿v¿w¿Æ¿˛¿ -¿ H¿ N¿ O¿ û¿ Ï¿!9¿!W¿!å¿!ê¿!ë¿!Ã¿"¿"?¿"Ñ¿"Ω¿"˙¿"˛¿"ˇ¿#¿#:¿#P¿#t¿#ø¿$¿$¿$8¿$q¿${¿$ú¿$ª¿$‹¿%¿%$¿%E¿%|¿%ß¿%—¿%Ú¿&¿&5¿&]¿&®¿&Ò¿')¿'/¿'3¿'4¿'@¿'â¿'Ω¿'¡¿'¬¿'Œ¿(¿(n¿(π¿(Ω¿(æ¿)¿)%¿)&¿)w¿)Ñ¿)ß¿)®¿)Ú¿*¿*¿*G¿*e¿*f¿*∑¿+¿+M¿+¶¿+ß¿+≥¿+Ô¿,+¿,>¿,n¿,â¿,≥¿,Ó¿- ¿-H¿-R¿-â¿-∫¿-Ì¿.>¿.`¿.ã¿.å¿.≥¿.„¿/	¿/R¿/}¿/¢¿/Ï¿/˝¿0!¿0´¿1	¿1¿1¿1B¿1Ê¿2¿2w¿2¢¿2Ï¿3O¿3P¿3≥¿4>¿4û¿4∆¿4È¿5¿5>¿5Ö¿5º¿64¿6>¿6D¿6H¿6I¿6o¿6Ï¿7#¿7ã¿7‘¿8¿8i¿8≥¿8”¿8‘¿9$¿9s¿9¬¿:¿:U¿:V¿:¢¿:Ë¿;0¿;r¿;•¿<$¿<ó¿<ü¿<ø¿<ﬂ¿= ¿=!¿=.¿=t¿=‘¿>4¿>5¿>¬¿>»¿>Ã¿>Õ¿>˙¿?K¿?ñ¿?¬¿?Œ¿?Û¿@¿@L¿@l¿@Ñ¿@¢¿@ˆ¿A¿A
¿A¿AU¿A•¿AÊ¿B¿B+¿BE¿Bj¿Bñ¿Bª¿Bﬁ¿C¿C*¿CY¿C~¿C§¿C“¿C˙¿D"¿DG¿Dq¿Dö¿D»¿D“¿D⁄¿D‡¿D·¿E#¿EB¿EP¿EV¿EW¿Eö¿E§¿Eƒ¿EÂ¿F¿F7¿FM¿Fi¿Fµ¿Fø¿F≈¿F∆¿G¿Ge¿G≤¿Gﬂ¿H¿H"¿Hs¿H√¿I¿I¿I8¿I\¿Ib¿If¿Ig¿IÇ¿IÉ¿I‘¿J¿J¿Ji¿J∫¿J÷¿J¿K
¿K¿K¿K_¿K¨¿K≤¿Kˇ¿L¿L#¿L=¿LI¿Le¿L¥¿Lª¿L‰¿LË¿LÈ¿M¿MM¿M[¿Ma¿Më¿MÀ¿MŸ¿Mﬂ¿N¿NI¿NM¿NN¿Nà¿NØ¿N‘¿Nÿ¿NŸ¿O¿O=¿O>¿Oã¿O⁄¿P)¿P=¿PB¿Pé¿Pﬂ¿Q-¿Q>¿Qt¿Q≤¿Q˝¿R¿R¿R7¿RZ¿Rw¿Rx¿Rë¿RÀ¿R˜¿S)¿Sr¿S≥¿S˚¿T"¿T/¿T}¿TŒ¿U¿U5¿UR¿Um¿U∏¿U¡¿U¬¿V¿VA¿Vö¿V¡¿V«¿V»¿W¿W)¿WV¿Wâ¿Wª¿WÌ¿WÙ¿Wı¿X=¿Xö¿Xû¿Xü¿XÔ¿X˛¿Yj¿Yk¿Yç¿Y«¿YÁ¿Z¿Z¿Z$¿ZD¿Zv¿Zw¿Z∆¿[¿[!¿[*¿[w¿[ƒ¿\¿\6¿\Ç¿\‡¿]3¿]T¿]Å¿]ù¿]±¿]⁄¿]ˇ¿^(¿^Q¿^x¿^Ç¿^®¿^∫¿^÷¿_%¿_P¿_Å¿_â¿_æ¿_À¿_Ô¿_ı¿_˘¿_˙¿`#¿`B¿`g¿`ä¿`π¿`Ÿ¿`¯¿`˛¿a¿a¿a2¿ar¿aê¿a≠¿a‘¿a˛¿b¿b¿b	¿b5¿b[¿bÇ¿bê¿bñ¿bæ¿bÒ¿bı¿c@¿cE¿cí¿cﬂ¿d¿d4¿d]¿dû¿d¨¿d≤¿d’¿dˆ¿e#¿e$¿eá¿e¿fB¿fl¿fm¿f¿fé¿f†¿f«¿fÍ¿g¿g8¿g]¿ge¿gÜ¿gµ¿gπ¿g∫¿gª¿g«¿h"¿hN¿hh¿hÇ¿hà¿hå¿hç¿hô¿hµ¿h‘¿i¿i/¿i^¿iÄ¿iÜ¿iä¿iã¿iœ¿j¿j/¿jZ¿j[¿j®¿jΩ¿j€¿k¿k?¿kC¿kD¿kd¿kå¿kÃ¿k–¿k—¿l
¿l¿l^¿l¨¿l˙¿mI¿mh¿mÉ¿mò¿m∂¿m√¿mﬂ¿nS¿nY¿n]¿n^¿ní¿n∑¿nŒ¿n˘¿o¿o.¿oP¿oX¿o^¿ob¿oc¿o±¿oœ¿oÔ¿p¿p)¿pE¿pj¿po¿pp¿pæ¿q,¿qr¿qv¿qw¿qÃ¿qÛ¿r¿r¿r9¿rí¿rÈ¿s¿sÅ¿s∞¿sƒ¿s ¿sÔ¿tY¿tï¿t™¿t≤¿t„¿tÈ¿t˚¿tˇ¿u ¿uK¿uì¿uƒ¿u¯¿v¿v¿v(¿vy¿v»¿v◊¿w/¿w]¿wã¿w«¿x4¿xf¿xl¿xp¿xq¿xë¿x…¿x˚¿yz¿y‚¿zX¿z˙¿z˛¿zˇ¿{-¿{r¿{î¿{¢¿{®¿{“¿{˛¿|¿|¿|T¿|q¿|x¿|∆¿}¿}b¿}ñ¿}…¿}¸¿~¿~¿~R¿~õ¿~¿¿¿'¿â¿„¿ÄH¿Ä¿ÄÕ¿Å:¿Åì¿Åª¿ÅÛ¿Ç&¿Ç6¿Ç>¿Çz¿Ç«¿Çı¿É#¿É3¿É;¿É<¿Ég¿Éw¿É¿É´¿ÉÔ¿Ñ¿Ñ6¿ÑH¿ÑR¿Ñä¿Ö¿Ö≠¿Ü#¿Ü$¿ÜK¿Üx¿ÜÕ¿ÜÊ¿á¿á ¿áV¿á\¿á`¿áa¿áï¿áÛ¿à¿àß¿à◊¿â¿â[¿âq¿ây¿â…¿âœ¿â‡¿â‰¿âÂ¿ä¿är¿ä∫¿ä‚¿ä˙¿ã¿ã/¿ãZ¿ãç¿ãº¿ã‡¿å¿å2¿åe¿å§¿åÛ¿ç¿ç%¿çJ¿ç_¿çq¿ç~¿çâ¿ç∆¿çÕ¿çŒ¿çÎ¿çÔ¿ç¿é¿éu¿éƒ¿è¿è5¿èk¿è≥¿è¡¿è«¿è»¿èı¿èˆ¿ê:¿ê~¿ê¬¿ë ¿ë.¿ëC¿ëT¿ëÄ¿ëß¿ë‘¿í ¿í+¿íQ¿í{¿íñ¿í¡¿í⁄¿í˜¿ì¿ì¿ìX¿ì|¿ìú¿ì©¿ì–¿î¿î¿îA¿îI¿îê¿î∏¿îæ¿ï¿ï2¿ïj¿ït¿ï≠¿ïŒ¿ñ¿ñ ¿ñ6¿ñR¿ñ§¿ñÆ¿ñ¥¿ñµ¿ó¿ó<¿ók¿óÜ¿óå¿óê¿óë¿ó÷¿ò%¿òg¿òh¿òî¿òï¿òÿ¿òˇ¿ô¿ô¿ô;¿ô}¿ô®¿ôı¿ö@¿öm¿öª¿ö‹¿õ¿õE¿õU¿õ]¿õ^¿õ¢¿õ£¿õÒ¿ú+¿úe¿úü¿úÈ¿ù¿ùO¿ùg¿ùã¿ùñ¿ù⁄¿ùˆ¿û%¿û=¿ûJ¿ûå¿ûÆ¿û‰¿û˝¿ü¿ü¿ü¿üL¿üv¿üw¿ü€¿†)¿†*¿†I¿†ã¿†Æ¿†ÿ¿†Á¿°D¿°ì¿°ﬂ¿¢¿¢+¿¢W¿¢h¿¢±¿¢˚¿£¿£¿£¿£)¿£N¿£m¿£ö¿£¡¿£Ã¿£Ò¿§)¿§V¿§}¿§à¿§ó¿§Œ¿§Û¿•+¿•6¿•>¿•l¿•p¿•q¿•ï¿•ñ¿•¢¿•æ¿•“¿•‡¿•Ê¿¶¿¶R¿¶ñ¿¶ƒ¿¶˙¿ß5¿ßâ¿ßﬁ¿®¿® ¿®&¿®Y¿®]¿®^¿®õ¿®•¿©	¿©
¿©¿©@¿©ñ¿©ü¿©†¿©÷¿©˜¿™¿™]¿™^¿™¿™‹¿™Ï¿™Ù¿™ı¿´5¿´b¿´É¿´∑¿´’¿´Î¿¨¿¨J¿¨T¿¨Z¿¨^¿¨_¿¨å¿¨˛¿≠,¿≠f¿≠≈¿Æ¿Æ¿Æ7¿Æã¿Æ‹¿ÆÎ¿Ø:¿Øä¿ØŸ¿∞)¿∞c¿∞o¿∞Ø¿∞¿¿±5¿±I¿±J¿±°¿±À¿±’¿±¯¿≤.¿≤N¿≤f¿≤Ñ¿≤Ã¿≤ÿ¿≤‡¿≤Ê¿≤Á¿≥.¿≥/¿≥|¿≥Ω¿≥”¿≥Á¿¥8¿¥É¿¥÷¿¥Ê¿µ¿µ¿µS¿µâ¿µ¡¿∂¿∂¿∂C¿∂k¿∂w¿∂§¿∂«¿∂˝¿∑¿∑5¿∑S¿∑ì¿∑ü¿∑ß¿∑≠¿∑¡¿∑≈¿∑∆¿∏D¿∏i¿∏à¿∏©¿∏·¿π¿πB¿πL¿πm¿πê¿π≥¿π÷¿∫	¿∫M¿∫{¿∫ ¿∫˙¿ª¿ª¿ª¿ª¿ª¿ª9¿ªÆ¿º¿ºê¿ºî¿ºï¿Ω.¿Ω/¿Ω|¿Ω∞¿Ω≈¿æ¿æ¿æb¿æ∞¿æ—¿æÊ¿ø%¿ø&¿ø^¿øs¿ø∂¿ø∑¿øﬂ¿øˇ¿¿ ¿¿¿¿é¿¿¨¿¿∫¿¿¿¿¿‹¿¿Í¿¿¿¡¿¡;¿¡l¿¡z¿¡Ä¿¡®¿¬¿¬¿¬¿¬Ö¿¬â¿¬ä¿¬£¿¬œ¿√3¿√^¿√k¿√ö¿√¥¿√º¿√¬¿√√¿√Î¿ƒ	¿ƒX¿ƒo¿≈¿≈¿≈R¿≈∂¿≈æ¿∆¿∆"¿∆&¿∆'¿∆a¿∆¶¿∆¿«G¿«c¿«|¿«ñ¿«æ¿«ƒ¿«»¿«…¿«Ù¿»¿».¿»U¿»p¿»v¿»z¿»{¿»°¿»”¿…'¿…y¿…û¿…¿ 4¿ z¿ ª¿ ¡¿ Í¿À¿ÀA¿Àë¿À≤¿À˘¿ÃH¿ÃL¿ÃM¿Ãl¿Ãó¿Ãæ¿ÃÓ¿Õ¿ÕQ¿ÕÇ¿Õ√¿Õ·¿Œ¿Œ"¿Œq¿Œó¿Œ–¿Œÿ¿ŒÂ¿œ¿œQ¿œW¿œn¿œr¿œs¿œ¶¿œƒ¿–¿–@¿–[¿–¶¿–∂¿–◊¿–Ó¿—¿—!¿—M¿—°¿—Ë¿—Ó¿“¿“¿“	¿“2¿“q¿“æ¿“›¿”¿”'¿”-¿”B¿”r¿”ë¿”ï¿”ñ¿”∏¿”Ú¿‘¿‘@¿‘É¿‘À¿‘œ¿‘–¿’¿’3¿’A¿’G¿’d¿’à¿’®¿’‹¿÷¿÷;¿÷B¿÷F¿÷n¿÷o¿÷§¿÷ˆ¿◊¿◊
¿◊¿◊g¿◊ö¿◊®¿◊Æ¿◊Ø¿◊Á¿ÿI¿ÿÉ¿ÿ’¿Ÿ%¿Ÿ,¿Ÿ-¿Ÿj¿Ÿà¿Ÿ´¿Ÿ–¿Ÿ˜¿⁄Z¿⁄w¿⁄ù¿⁄∆¿⁄Á¿⁄Ó¿⁄Ô¿€¿€=¿€â¿€≈¿€”¿€Ÿ¿€˛¿€ˇ¿‹8¿‹S¿‹†¿‹Ø¿›¿›H¿›p¿›Ω¿ﬁ¿ﬁQ¿ﬁZ¿ﬁ[¿ﬁö¿ﬁ≥¿ﬁ¿ﬂ?¿ﬂz¿ﬂß¿ﬂ∏¿ﬂ¬¿‡¿‡8¿‡e¿‡í¿‡‚¿·O¿·Y¿·a¿·Ñ¿·ä¿·æ¿·¬¿·√¿‚¿‚¿‚b¿‚±¿‚⁄¿‚ﬂ¿„¿„,¿„c¿„x¿„À¿‰¿‰2¿‰~¿‰◊¿‰›¿Â¿Â¿Â¿Âd¿Âi¿Â∂¿Ê¿ÊB¿ÊG¿Êì¿Ê‚¿Á2¿Ád¿Ái¿Áí¿Á∂¿Áı¿Ë(¿Ë6¿Ë<¿Ëê¿ËÂ¿È¿È¿È¿Èw¿Èx¿È©¿ÈØ¿È˛¿Í1¿Í¢¿Í£¿ÍØ¿Í‚¿Í„¿Î-¿Î.¿Î:¿Îî¿Îÿ¿Ï&¿ÏW¿ÏÉ¿Ïú¿Ï∑¿ÏÓ¿ÏÙ¿Ïı¿ÌE¿Ìî¿Ì›¿Ó¿Ó*¿ÓH¿Óq¿Ó™¿Ó≤¿Ó¿¿Ó∆¿Ó«¿Ô¿Ô¿Ô	¿Ô¿ÔC¿Ôç¿ÔŸ¿Ô⁄¿¿G¿K¿L¿ï¿õ¿Í¿Ò.¿Ò:¿ÒQ¿Ò¢¿ÒÚ¿ÚB¿Úç¿ÚŒ¿Ú¿Û¿Û
¿Û¿Û0¿ÛD¿ÛJ¿Ûn¿Ûå¿Û≤¿Ù¿Ù7¿Ù`¿Ùï¿ÙÍ¿ı;¿ıç¿ıì¿ı§¿ı®¿ı©¿ıµ¿ıÂ¿ˆ+¿ˆU¿ˆl¿ˆó¿ˆ∏¿ˆ˜¿˜+¿˜S¿˜Y¿˜]¿˜^¿˜ã¿˜Ω¿¯ ¿¯M¿¯m¿¯z¿¯è¿¯ï¿¯ô¿¯ö¿¯Ë¿˘¿˘;¿˘á¿˘’¿˙¿˙;¿˙V¿˙x¿˙ì¿˙∏¿˙ﬂ¿˚>¿˚â¿˚ÿ¿˚Ï¿˚Ú¿˚Û¿˚ˇ¿¸K¿¸ã¿¸œ¿¸‰¿¸Î¿¸Ï¿˝¿˝,¿˝M¿˝w¿˝™¿˝¡¿˝’¿˝‚¿˝Ì¿˝Ù¿˛¿˛	¿˛
¿˛O¿˛w¿˛}¿˛ƒ¿˛Î¿˛Ò¿ˇA¿ˇi¿ˇó¿ˇº¿ˇ ¿ˇ–¿ˇ—¿ ¿ <¿ I¿ Å¿ á¿ ã¿ å¿ ∏¿ —¿ ˆ¿¿
¿¿<¿f¿l¿p¿q¿Ω¿»¿Õ¿¿^¿¿Ä¿å¿∂¿Ÿ¿Á¿Ì¿Ó¿¿,¿2¿3¿E¿ò¿†¿§¿•¿±¿“¿¿!¿'¿(¿:¿[¿c¿g¿h¿t¿¢¿„¿‰¿˛¿@¿d¿î¿ú¿¢¿¶¿ß¿≥¿Ë¿È¿˘¿˙¿¿<¿ì¿·¿ ¿(¿P¿à¿í¿∫¿ª¿‚¿¿¿B¿c¿ä¿±¿‡¿	¿	B¿	Ç¿	ﬂ¿
¿
 ¿
)¿
^¿
ì¿
«¿¿W¿r¿¥¿ª¿ø¿¿¿Ã¿¿¿?¿e¿f¿r¿¨¿æ¿¿	¿¿¿R¿u¿ä¿Œ¿Ë¿9¿F¿j¿†¿®¿∂¿∫¿ª¿˛¿!¿6¿z¿ì¿‚¿Ô¿¿G¿O¿]¿a¿b¿ß¿ ¿ﬂ¿#¿>¿ë¿—¿ﬁ¿¿5¿=¿K¿O¿P¿¢¿Ó¿¿r¿í¿¥¿¿[¿≠¿˚¿B¿n¿r¿s¿æ¿Ù¿˘¿F¿ï¿„¿-¿ê¿∞¿À¿Í¿¿9¿`¿ê¿ö¿Í¿'¿u¿ü¿¿;¿_¿Ñ¿ä¿“¿
¿V¿ß¿Ó¿8¿Å¿î¿¿t¿x¿y¿À¿Ã¿J¿Õ¿5¿|¿¡¿¬¿ ¿ ^¿ b¿ c¿ ´¿ ∆¿ Ã¿!¿!6¿!<¿!}¿!Ω¿!Ë¿"¿"@¿"N¿"T¿"U¿"z¿"∞¿"Ï¿#B¿#S¿#r¿#¿#¨¿#≤¿#È¿#Í¿$
¿$"¿$I¿$z¿$¨¿$”¿$ˇ¿%N¿%Y¿%b¿%à¿%è¿%ì¿&*¿&+¿&[¿&â¿&ÿ¿&˜¿'¿'¿'T¿'U¿'†¿'Ì¿(<¿(W¿(w¿(õ¿(°¿(•¿)¿)¿)j¿)ç¿)◊¿)Ò¿*0¿*=¿*q¿*w¿*{¿*|¿*¡¿*◊¿*˝¿+0¿+>¿+D¿+E¿+Ö¿+•¿+ﬂ¿+Ì¿+Û¿+Ù¿,E¿,â¿,◊¿,Â¿,Î¿,Ï¿-@¿-ì¿-ø¿-‚¿.¿."¿.)¿.S¿.a¿.g¿.í¿.ñ¿.ó¿.Ê¿/¿/F¿/f¿/t¿/z¿/{¿/¢¿/„¿0¿0	¿0]¿0†¿0Æ¿0¬¿1¿15¿1>¿1E¿1Ö¿1ü¿1‡¿1¿1¯¿2¿2]¿2∞¿3¿3;¿3k¿3©¿3∏¿3È¿4¿4¿4(¿4X¿4h¿4p¿4ñ¿4’¿5&¿5P¿5Ä¿5æ¿5Õ¿5˛¿6'¿60¿66¿67¿6`¿6Ä¿6±¿6◊¿6ﬁ¿6‚¿6„¿7¿7'¿7v¿8¿8
¿8¿8c¿8¿8˜¿8¯¿9'¿9G¿9ñ¿9™¿9±¿9µ¿:<¿:=¿:∞¿;¿;¿;;¿;s¿;ç¿;†¿;¶¿;“¿;÷¿;◊¿;ÿ¿<¿<¿<l¿<¢¿<Î¿=¿=-¿=P¿=o¿=í¿=‡¿>.¿>L¿>w¿>ë¿>ª¿>…¿>Ù¿? ¿?T¿?Å¿?©¿?◊¿@+¿@5¿@V¿@w¿@ö¿@æ¿@ƒ¿@»¿@…¿A¿Ac¿Aé¿A¡¿B¿BW¿BX¿Bf¿B¿Cã¿D¿D¿D+¿D¯¿Ez¿FS¿G8¿G¯¿H]¿H¬¿Iƒ¿Jù¿Kî¿L¿Lb¿Lc¿L{¿MK¿NE¿NF¿NX¿Nõ¿NÊ¿Om¿On¿Oª¿O¿¿O¡¿OÕ¿OÙ¿P"¿Pb¿Pc¿P©¿Q¿QE¿Qó¿QÁ¿QÓ¿QÔ¿R¿R=¿Ra¿RÇ¿R£¿R˘¿S3¿SO¿Sê¿S™¿S…¿S˚¿T#¿TY¿T¨¿TΩ¿U¿UO¿Uo¿UÅ¿UÇ¿U™¿U…¿U€¿U‹¿V¿V8¿Ve¿Vî¿V¡¿V¿W<¿WÜ¿W™¿W¿¿WÔ¿XJ¿X¶¿X√¿Xﬁ¿X¿XÒ¿YT¿Ye¿Y°¿YÛ¿ZG¿Zö¿Z—¿[N¿[_¿[ä¿[ª¿[◊¿\¿\-¿\o¿\∞¿\ˆ¿]4¿]b¿]Ñ¿]ô¿]æ¿]Á¿^¿^s¿^¶¿^Ÿ¿_¿_S¿_™¿_˛¿`9¿`†¿`–¿`˘¿a¿ae¿aù¿aŒ¿a¯¿b6¿br¿b≤¿bÁ¿c ¿cW¿cî¿cÀ¿d¿dC¿db¿d†¿d–¿e¿eP¿eô¿e÷¿f¿f@¿fï¿f‹¿g¿gT¿gâ¿gƒ¿gˇ¿h8¿hw¿hﬁ¿iO¿iå¿iÕ¿j
¿jI¿jÄ¿j˝¿kD¿kì¿k‘¿l¿l[¿lú¿lﬂ¿m"¿mt¿m«¿n¿nk¿n≈¿o¿oG¿oë¿oÊ¿p)¿pJ¿pi¿pÜ¿p°¿p∫¿p—¿pÊ¿p˘¿q
¿q¿q&¿q1¿q:¿qA¿qE¿qF¿qz¿qÄ¿q≈¿r¿r.¿r/¿rM¿rn¿r§¿rÓ¿s:¿sV¿sõ¿s”¿s‹¿tB¿tö¿tª¿u¿uK¿uö¿u§¿u¨¿uﬁ¿u‰¿v7¿vá¿vÿ¿vÚ¿w[¿wº¿x8¿xG¿xØ¿x∑¿xÙ¿y=¿yX¿yû¿y©¿y≤¿y∏¿yˆ¿z¿zo¿z¡¿{¿{j¿{k¿{…¿{ ¿{ˇ¿|¿|2¿|B¿|y¿|ï¿|û¿|§¿|•¿|‹¿}¿} ¿}5¿}Y¿}`¿}d¿}f¿}g¿}û¿}¨¿}ª¿}Ÿ¿}Ú¿~¿~@¿~V¿~v¿~î¿~±¿~Õ¿~Í¿¿(¿D¿W¿r¿á¿†¿æ¿€¿¸¿Ä¿Ä3¿ÄR¿Äl¿Äï¿Ä¥¿ÄÀ¿Ä‚¿Å¿Å*¿Åc¿Åö¿Å∆¿ÅÔ¿Ç¿Ç-¿ÇG¿Çg¿Çπ¿Ç∫¿ÇŸ¿Ç˘¿É¿É=¿Éc¿Éâ¿É±¿É…¿É‡¿É˜¿Ñ¿Ñ%¿Ñ;¿Ñ[¿Ñz¿Ñô¿Ñ∂¿Ñ€¿ÑÛ¿Ö¿Ö0¿Ö`¿Öá¿Ö¶¿ÖÀ¿ÖÁ¿Ü¿Ü#¿Ü@¿Üc¿Üì¿Ü¡¿ÜÍ¿á¿á@¿ád¿áÑ¿áü¿á†¿á¨¿áË¿à¿à¿à;¿àm¿àõ¿àœ¿àÌ¿â	¿â#¿â=¿âW¿âq¿ââ¿âß¿âÕ¿âÎ¿ä¿ä+¿äi¿äã¿ä°¿äŒ¿ä¸¿ã¿ãJ¿ãp¿ãê¿ã≤¿ã‘¿ãˆ¿å(¿åZ¿åä¿å»¿å¸¿ç&¿çN¿çv¿çò¿çü¿ç£¿ç§¿ç∞¿çˇ¿é¿é*¿éL¿éÄ¿é∞¿éÊ¿è¿è$¿è@¿è\¿èx¿èî¿èÆ¿èŒ¿èˆ¿ê¿ê4¿êZ¿êö¿êæ¿ê÷¿ë¿ë5¿ë]¿ëç¿ëØ¿ë—¿ëı¿í¿í=¿íq¿í£¿í„¿ì¿ìE¿ìy¿ì£¿ì«¿ìÙ¿ì¯¿ì˙¿ì˚¿î¿î!¿î=¿î[¿îx¿îô¿î∑¿î›¿î˜¿ï¿ï5¿ïM¿ïS¿ïT¿ïq¿ïñ¿ïµ¿ïÂ¿ï˝¿ñ¿ñ6¿ñI¿ñh¿ñi¿ñü¿ñ¡¿ñÍ¿ñ¿ó*¿ól¿ó®¿ò4¿òh¿ò¶¿ò‰¿ô¿ôp¿ôt¿ôv¿ôw¿ô©¿ô∆¿ôﬂ¿ô¸¿ö¿öC¿ö^¿öd¿öe¿ö{¿öò¿ö∑¿ö‚¿ö¯¿ö˘¿õ¿õK¿õM¿õN¿õ™¿ú¿ú¿ú¿ú%¿ú<¿úV¿úò¿úû¿ú¢¿ú£¿úØ¿úÊ¿ù¿ù<¿ù~¿ùÑ¿ùÖ¿ùµ¿ùÛ¿ù˘¿ù˝¿ù˛¿û
¿û¿ûY¿ûn¿ûr¿ûs¿ûÂ¿ûÊ¿ü¿ü2¿ü3¿ü?¿üu¿üv¿üÇ¿ü™¿üœ¿†*¿†M¿†Q¿†R¿†^¿†É¿†≠¿†⁄¿†Ó¿†Ù¿°¿°1¿°7¿°c¿°w¿°}¿°Ω¿°Ô¿¢P¿¢§¿¢®¿¢©¿¢µ¿¢…¿£¿£B¿£Z¿£`¿£ò¿£ˇ¿§¿§¿§¿§7¿§P¿§T¿§V¿§W¿§á¿§¶¿§¿¿§ÿ¿§ﬁ¿§ﬂ¿•<¿•O¿•P¿•\¿•à¿•∫¿•Á¿•Ó¿¶¿¶9¿¶M¿¶ì¿¶ô¿¶Ÿ¿¶Ì¿ß¿ß¿ß¿ß¿ß¿ßP¿ßT¿ß•¿ß¿®<¿®¿®–¿©¿©*¿©.¿©~¿©ï¿©ô¿©ß¿©´¿©¿™(¿™y¿™±¿™·¿´	¿´
¿´ ¿´!¿´r¿´û¿´Á¿¨.¿¨q¿¨u¿¨v¿¨Ç¿¨≤¿¨€¿¨Ó¿¨Ù¿≠¿≠¿≠#¿≠G¿≠b¿≠h¿≠Ö¿≠ú¿≠¢¿≠£¿≠Õ¿≠‰¿≠¯¿≠¸¿≠˝¿Æ	¿Æ:¿Æo¿ÆÇ¿Æà¿Æ†¿Æ∞¿Æ∂¿Æﬁ¿Æ˘¿Æˇ¿Ø¿Ø3¿Ø9¿Ø:¿Øh¿Ø¿Øó¿Øõ¿Øù¿Øû¿ØÔ¿∞J¿∞ö¿∞õ¿∞º¿∞Ì¿±¿±¿±Z¿±≤¿±¿¿±∆¿≤¿≤[¿≤z¿≤ò¿≤ü¿≤…¿≥¿≥Z¿≥Å¿≥°¿≥ß¿≥´¿≥¨¿≥∏¿≥Ó¿¥*¿¥H¿¥[¿¥a¿¥Ä¿¥»¿µ¿µ.¿µx¿µ°¿∂¿∂U¿∂^¿∂‹¿∑¿∑-¿∑?¿∑Z¿∑c¿∑i¿∑j¿∑œ¿∑–¿∏¿∏$¿∏à¿∏€¿∏˜¿∏˛¿πÇ¿π¥¿πœ¿πﬂ¿π¯¿πˇ¿∫¿∫¿∫¿∫h¿∫j¿∫k¿∫—¿∫Ô¿∫ˇ¿ª¿ª7¿ªf¿ªÅ¿ª°¿ªß¿ª®¿ª…¿ªÛ¿º
¿º&¿ºW¿ºÖ¿ºÜ¿º±¿º≤¿º¸¿Ω¿ΩJ¿Ωu¿Ω∑¿Ωﬁ¿ΩÂ¿æ4¿æç¿æë¿æí¿æÿ¿æÚ¿ø*¿øW¿øõ¿ø¢¿ø‘¿¿1¿¿5¿¿6¿¿B¿¿x¿¿¥¿¿”¿¿‘¿¡3¿¡ä¿¡«¿¡›¿¬8¿¬`¿¬j¿¬p¿¬q¿¬ù¿¬Ï¿√#¿√E¿√Ç¿√°¿√¬¿√Õ¿ƒ¿ƒ3¿ƒT¿ƒ¿ƒä¿ƒí¿ƒò¿ƒô¿≈9¿≈æ¿∆2¿∆`¿∆⁄¿∆€¿«¿«é¿»¿»w¿»{¿»|¿»à¿»∆¿»»¿»…¿…9¿…m¿…n¿…è¿…ê¿…¬¿…‚¿…„¿ ¿ N¿ n¿ ö¿ ®¿ Æ¿ ⁄¿À(¿ÀÖ¿À„¿ÃF¿Ãe¿Ãà¿Ã§¿Ã™¿ÃÆ¿ÃØ¿Ãª¿ÃÓ¿Õ¿Õ¿Õz¿Õ ¿ÕÓ¿Õ¸¿Œ¿Œ¿Œ5¿ŒX¿Œt¿Œz¿Œ{¿Œ¿¿œ"¿œ#¿œw¿œŸ¿–%¿–S¿–n¿––¿—	¿—7¿—d¿—e¿—y¿—â¿—€¿—‚¿“¿“=¿“a¿“g¿“k¿“l¿“x¿“∂¿“∏¿“π¿“˝¿”¿”¿”?¿”@¿”L¿”î¿”Ø¿”ø¿”‹¿”Ú¿‘@¿‘V¿‘_¿‘f¿‘j¿‘k¿‘w¿‘¥¿‘∂¿‘∑¿’¿’'¿’(¿’I¿’J¿’V¿’ü¿’√¿’Î¿’¯¿÷!¿÷'¿÷+¿÷,¿÷8¿÷ù¿÷ü¿÷†¿÷ﬁ¿÷ˇ¿◊¿◊N¿◊t¿◊∏¿◊ƒ¿◊˘¿◊˙¿ÿ¿ÿ ¿ÿA¿ÿE¿ÿG    /Ä•  Ä∫Ä— Ä÷ÄÎÄÌÄ˚Ä˛ Å*ÅOÅQ  Å{ Å¢Å∏Å∫  Å„  Ç  Ç5  ÇL  Çd  Çà  Çù  Ç¥  ÇÕ  Çı  É
  É1  É_  É|  Éó  É∂  Éœ  ÉÏ  Ñ  Ñ   ÑE  Ñi  Ñä  Ñ≠  ÑŸ  Ñ˜  Ö  Ö0  ÖR  Ök  Öó  Ö≤  ÖÃ  Ö‡  Ü  Ü"  ÜP  Üo  Üã  Üü  ÜªÜ‚ág éÇºéÖ  éƒd é éﬁ é·é  èè  èè    è++èE  èZèe   èqÄäèä  èùè´  èqèrè˛Å;ê  ê"ê0  ê8'êT  è˛èˇ ë=Ç¥ëC  ëyB ëyëì ëîëö  ë¨ë≤   ëø+ëŸ  ëÓë¸  í0í5 í@íí    íIÄ”íM  íUí[   ì Äœì1  ì7ìH  ìPì[  ì ì! ìÛ•˛ù¬â»/// A controller for an editable text field.
///
/// Whenever the user modifies a text field with an associated
/// [TextEditingController], the text field updates [value] and the controller
/// notifies its listeners. Listeners can then read the [text] and [selection]
/// properties to learn what the user has typed or how the selection has been
/// updated.
///
/// Similarly, if you modify the [text] or [selection] properties, the text
/// field will be notified and will update itself appropriately.
///
/// A [TextEditingController] can also be used to provide an initial value for a
/// text field. If you build a text field with a controller that already has
/// [text], the text field will use that text as its initial value.
///
/// The [value] (as well as [text] and [selection]) of this controller can be
/// updated from within a listener added to this controller. Be aware of
/// infinite loops since the listener will also be notified of the changes made
/// from within itself. Modifying the composing region from within a listener
/// can also have a bad interaction with some input methods. Gboard, for
/// example, will try to restore the composing region of the text if it was
/// modified programmatically, creating an infinite loop of communications
/// between the framework and the input method. Consider using
/// [TextInputFormatter]s instead for as-you-type text modification.
///
/// If both the [text] and [selection] properties need to be changed, set the
/// controller's [value] instead. Setting [text] will clear the selection
/// and composing range.
///
/// Remember to [dispose] of the [TextEditingController] when it is no longer
/// needed. This will ensure we discard any resources used by the object.
///
/// {@tool dartpad}
/// This example creates a [TextField] with a [TextEditingController] whose
/// change listener forces the entered text to be lower case and keeps the
/// cursor at the end of the input.
///
/// ** See code in examples/api/lib/widgets/editable_text/text_editing_controller.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a Material Design text field that can be controlled
///    with a [TextEditingController].
///  * [EditableText], which is a raw region of editable text that can be
///    controlled with a [TextEditingController].
///  * Learn how to use a [TextEditingController] in one of our [cookbook recipes](https://docs.flutter.dev/cookbook/forms/text-field-changes#2-use-a-texteditingcontroller). ûÑé ¢¢-ÉÁ/// Creates a controller for an editable text field, with no initial selection.
///
/// This constructor treats a null [text] argument as if it were the empty
/// string.
///
/// The initial selection is `TextSelection.collapsed(offset: -1)`.
/// This indicates that there is no selection at all ([TextSelection.isValid]
/// is false in this case). When a text field is built with a controller whose
/// selection is not valid, the text field will update the selection when it
/// is focused (the selection will be an empty selection positioned at the
/// end of the text).
///
/// Consider using [TextEditingController.fromValue] to initialize both the
/// text and the selection.
///
/// {@tool dartpad}
/// This example creates a [TextField] with a [TextEditingController] whose
/// initial selection is empty (collapsed) and positioned at the beginning
/// of the text (offset is 0).
///
/// ** See code in examples/api/lib/widgets/editable_text/text_editing_controller.1.dart **
/// {@end-tool}¢0¢9  ¢F¢K¢ê¢Y¢r¢Q¢L¢T¢[¢k¢l¢t¢Ñ¢è¢â¢Ö¢ã¢ñÇ^£o£p£yÄª/// Creates a controller for an editable text field from an initial [TextEditingValue].
///
/// This constructor treats a null [value] argument as if it were
/// [TextEditingValue.empty].£z£ç  &£ô£ü£Ò§ƒ£”£∑£Ø£©£≤£∫£ª£¿£¡£ £À£÷£€£‹£˚§§§§K§L§]§N§S§T§^§ú§Õ§“§Ú§Ÿ§”§‹§Ï§Ì §¯L•1+/// The current string the user is editing.   •GÉy®ÇÆ/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; **however, one should not also set [selection]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value].** Setting this here will clear
/// the current selection and composing range, so avoid using it directly
/// unless that is the desired behavior. ®®   ®ƒÅu®‘  ®⁄®Ï  ®ƒ®≈ØkÄ’∞#Äù/// The currently selected range within [text].
///
/// If the selection is collapsed, then this property gives the offset of the
/// cursor within the text.   ∞CÑ≤÷Çv/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [text]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value].
///
/// If the new selection is outside the composing range, the composing range is
/// cleared. ≤‡≤Ô   ™=Ö*´Ä¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined. Descendants
/// can override this method to customize appearance of text. ´ ´7  ´?´K  ´R´a   ¥aÇ<∂=Åƒ/// Set the [value] to empty.
///
/// After calling this function, [text] will be the empty string and the
/// selection will be collapsed at zero offset.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ∂°Çf∏πÅ˛/// Set the composing region to an empty range.
///
/// The composing region is the range of text that is still being composed.
/// Calling this function indicates that the user is done composing that
/// region.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   πÄ‰πS@/// Check that the [selection] is inside of the composing range. πtπÉ    πÛÜMª˛Åó/// Toolbar configuration for [EditableText].
///
/// Toolbar is a context menu that will show up when user right click or long
/// press the [EditableText]. It includes several options: cut, copy, paste,
/// and select all.
///
/// [EditableText] and its derived widgets have their own default [ToolbarOptions].
/// Create a custom [ToolbarOptions] if you want explicit control over the toolbar
/// option. ºÅt ΩΩ{/// Create a toolbar configuration with given options.
///
/// All options default to false if they are not explicitly set.Ω#Ω)  Ω:Ω@  ΩPΩV  ΩhΩn  
ºìºîºûΩº§ºÕΩ/ΩEΩ]ΩyΩâsΩ‰</// An instance of [ToolbarOptions] with no options enabled.ΩÏΩ˙Ω˚æ\æYF/// Whether to show copy option in toolbar.
///
/// Defaults to false. æbÄ≤øÄô/// Whether to show cut option in toolbar.
///
/// If [EditableText.readOnly] is set to true, cut will be disabled regardless.
///
/// Defaults to false. øÄ∏øÃÄù/// Whether to show paste option in toolbar.
///
/// If [EditableText.readOnly] is set to true, paste will be disabled regardless.
///
/// Defaults to false. ø÷g¿ @4L/// Whether to show select all option in toolbar.
///
/// Defaults to false.   ªãªåªñªˆªöª¡¿ @Bâ©¿ A¢ÅY/// Configures the ability to insert media content through the soft keyboard.
///
/// The configuration provides a handler for any rich content inserted through
/// the system input method, and also provides the ability to limit the mime
/// types of the inserted content.
///
/// See also:
///
/// * [EditableText.contentInsertionConfiguration] ¿ AƒÅÓ ¿ C¿ C Å0/// Creates a content insertion configuration with the specified options.
///
/// A handler for inserted content, in the form of [onContentInserted], must
/// be supplied.
///
/// The allowable mime types of inserted content may also
/// be provided via [allowedMimeTypes], which cannot be an empty list.¿ C'¿ C6  ¿ CL9¿ CR  ¿ Cd¿ Cé¿ Cî¿ C∞¿ Cï¿ C•¿ C¶¿ C∂Çv¿ FÇ/// Called when a user inserts content through the virtual / on-screen keyboard,
/// currently only used on Android.
///
/// [KeyboardInsertedContent] holds the data representing the inserted content.
///
/// {@tool dartpad}
///
/// This example shows how to access the data for inserted content in your
/// `TextField`.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * <https://developer.android.com/guide/topics/text/image-keyboard> ¿ F1É∑¿ IÿÉe/// {@template flutter.widgets.contentInsertionConfiguration.allowedMimeTypes}
/// Used when a user inserts image-based content through the device keyboard,
/// currently only used on Android.
///
/// The passed list of strings will determine which MIME types are allowed to
/// be inserted via the device keyboard.
///
/// The default mime types are given by [kDefaultContentInsertionMimeTypes].
/// These are all the mime types that are able to be handled and inserted
/// from keyboards.
///
/// This field cannot be an empty list.
///
/// {@tool dartpad}
/// This example shows how to limit image insertion to specific file types.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * <https://developer.android.com/guide/topics/text/image-keyboard>
/// {@endtemplate}    ¿ J/ÇØ¿ J5  ¿ JC' ¿ JI¿ JR ¿ JS	¿ JY  ¿ J^
¿ Jd   ¿ JòÅ÷¿ Jµ <¿ J‹¿ Lm¿ J—¿ J€¿ J“¿ J‚¿ JÎ¿ Jˆ¿ JÏ¿ Jı¿ K¿ K¿ K¿ K¿ K¿ K*¿ K3¿ KA¿ K4¿ K=¿ KN¿ KW¿ Kd¿ KX¿ Ka¿ Kr¿ K{¿ Kâ¿ K|¿ KÖ¿ Kñ¿ Kü¿ K™¿ K†¿ K©¿ K∫¿ K√¿ KŒ¿ Kƒ¿ KÕ¿ Kﬁ¿ KÁ¿ Kı¿ KË¿ KÒ¿ L¿ L¿ L¿ L¿ L¿ L&¿ L/¿ L=¿ L0¿ L9¿ LJ¿ LS¿ L^¿ LT¿ L]¿ L¥¿ L¡  ¿ L…¿ L÷     ¿ L‡á©¿ LÊ  ¿ M`¿ M4¿ M5¿ ME  	¿ MJ¿ MN¿ MO¿ MP¿ Mw¿ MQ¿ MZ¿ M[¿ Mv¿ M|Å¶¿ Mó¿ Mò¿ Mô ¿ Mö¿ M†  ¿ M´¿ M±  ¿ M√¿ M…¿ Mﬂ¿ M ¿ M‘¿ M’¿ MË¿ MÓ¿ N¿ N¿ MÔ¿ M˘¿ M˙¿ M˛¿ Mˇ¿ N¿ N¿ N!¿ NÓ¿ O ¿ N"¿ NÎ¿ NÏ¿ NÌ¿ N¿ O&¿ O3  ¿ OC ¿ OY  ¿ P ¿ P$ ¿ P9 ¿ Oh(¿ O{  ¿ O~¿ OÜ  ¿ Oh¿ Oi¿ Oî<¿ O•  ¿ O¨¿ O¥  ¿ Oî¿ Oï¿ P?ÑH¿ PR  ¿ PT¿ P\  ¿ P?¿ P@ ¿ Tã¿2ø¿ é¶∫/// A basic text input field.
///
/// This widget interacts with the [TextInput] service to let the user edit the
/// text it contains. It also provides scrolling, selection, and cursor
/// movement.
///
/// The [EditableText] widget is a low-level widget that is intended as a
/// building block for custom widget sets. For a complete user experience,
/// consider using a [TextField] or [CupertinoTextField].
///
/// ## Handling User Input
///
/// Currently the user may change the text this widget contains via keyboard or
/// the text selection menu. When the user inserted or deleted text, you will be
/// notified of the change and get a chance to modify the new text value:
///
/// * The [inputFormatters] will be first applied to the user input.
///
/// * The [controller]'s [TextEditingController.value] will be updated with the
///   formatted result, and the [controller]'s listeners will be notified.
///
/// * The [onChanged] callback, if specified, will be called last.
///
/// ## Input Actions
///
/// A [TextInputAction] can be provided to customize the appearance of the
/// action button on the soft keyboard for Android and iOS. The default action
/// is [TextInputAction.done].
///
/// Many [TextInputAction]s are common between Android and iOS. However, if a
/// [textInputAction] is provided that is not supported by the current
/// platform in debug mode, an error will be thrown when the corresponding
/// EditableText receives focus. For example, providing iOS's "emergencyCall"
/// action when running on an Android device will result in an error when in
/// debug mode. In release mode, incompatible [TextInputAction]s are replaced
/// either with "unspecified" on Android, or "default" on iOS. Appropriate
/// [textInputAction]s can be chosen by checking the current platform and then
/// selecting the appropriate action.
///
/// {@template flutter.widgets.EditableText.lifeCycle}
/// ## Lifecycle
///
/// Upon completion of editing, like pressing the "done" button on the keyboard,
/// two actions take place:
///
///   1st: Editing is finalized. The default behavior of this step includes
///   an invocation of [onChanged]. That default behavior can be overridden.
///   See [onEditingComplete] for details.
///
///   2nd: [onSubmitted] is invoked with the user's input value.
///
/// [onSubmitted] can be used to manually move focus to another input widget
/// when a user finishes with the currently focused input widget.
///
/// When the widget has focus, it will prevent itself from disposing via
/// [AutomaticKeepAliveClientMixin.wantKeepAlive] in order to avoid losing the
/// selection. Removing the focus will allow it to be disposed.
/// {@endtemplate}
///
/// Rather than using this widget directly, consider using [TextField], which
/// is a full-featured, material-design text input field with placeholder text,
/// labels, and [Form] integration.
///
/// ## Text Editing [Intent]s and Their Default [Action]s
///
/// This widget provides default [Action]s for handling common text editing
/// [Intent]s such as deleting, copying and pasting in the text field. These
/// [Action]s can be directly invoked using [Actions.invoke] or the
/// [Actions.maybeInvoke] method. The default text editing keyboard [Shortcuts],
/// typically declared in [DefaultTextEditingShortcuts], also use these
/// [Intent]s and [Action]s to perform the text editing operations they are
/// bound to.
///
/// The default handling of a specific [Intent] can be overridden by placing an
/// [Actions] widget above this widget. See the [Action] class and the
/// [Action.overridable] constructor for more information on how a pre-defined
/// overridable [Action] can be overridden.
///
/// ### Intents for Deleting Text and Their Default Behavior
///
/// | **Intent Class**                 | **Default Behavior when there's selected text**      | **Default Behavior when there is a [caret](https://en.wikipedia.org/wiki/Caret_navigation) (The selection is [TextSelection.collapsed])**  |
/// | :------------------------------- | :--------------------------------------------------- | :----------------------------------------------------------------------- |
/// | [DeleteCharacterIntent]          | Deletes the selected text                            | Deletes the user-perceived character before or after the caret location. |
/// | [DeleteToNextWordBoundaryIntent] | Deletes the selected text and the word before/after the selection's [TextSelection.extent] position | Deletes from the caret location to the previous or the next word boundary |
/// | [DeleteToLineBreakIntent]        | Deletes the selected text, and deletes to the start/end of the line from the selection's [TextSelection.extent] position | Deletes from the caret location to the logical start or end of the current line |
///
/// ### Intents for Moving the [Caret](https://en.wikipedia.org/wiki/Caret_navigation)
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: true`)                        | Collapses the selection to the logical start/end of the selection | Moves the caret past the user-perceived character before or after the current caret location. |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: true`)                 | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position | Moves the caret to the previous/next word boundary. |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: true`)  | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position, or [TextSelection.base], whichever is closest in the given direction | Moves the caret to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: true`)                        | Collapses the selection to the start/end of the line at the selection's [TextSelection.extent] position | Moves the caret to the start/end of the current line .|
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: true`)           | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent line | Moves the caret to the closest position on the previous/next adjacent line. |
/// | [ExtendSelectionVerticallyToAdjacentPageIntent](`collapseSelection: true`)           | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent page | Moves the caret to the closest position on the previous/next adjacent page. |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: true`)                 | Collapses the selection to the start/end of the document | Moves the caret to the start/end of the document. |
///
/// #### Intents for Extending the Selection
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] past the user-perceived character before/after it |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the previous/next word boundary |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: false`) | Moves the selection's [TextSelection.extent] to the previous/next word boundary, or [TextSelection.base] whichever is closest in the given direction | Moves the selection's [TextSelection.extent] to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] to the start/end of the line |
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent line |
/// | [ExtendSelectionVerticallyToAdjacentPageIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent page |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the start/end of the document |
/// | [SelectAllTextIntent]  | Selects the entire document |
///
/// ### Other Intents
///
/// | **Intent Class**                        | **Default Behavior**                                 |
/// | :-------------------------------------- | :--------------------------------------------------- |
/// | [DoNothingAndStopPropagationTextIntent] | Does nothing in the input field, and prevents the key event from further propagating in the widget tree. |
/// | [ReplaceTextIntent]                     | Replaces the current [TextEditingValue] in the input field's [TextEditingController], and triggers all related user callbacks and [TextInputFormatter]s. |
/// | [UpdateSelectionIntent]                 | Updates the current selection in the input field's [TextEditingController], and triggers the [onSelectionChanged] callback. |
/// | [CopySelectionTextIntent]               | Copies or cuts the selected text into the clipboard |
/// | [PasteTextIntent]                       | Inserts the current text in the clipboard after the caret location, or replaces the selected text if the selection is not collapsed. |
///
/// ## Text Editing [Shortcuts]
///
/// It's also possible to directly remap keyboard shortcuts to new [Intent]s by
/// inserting a [Shortcuts] widget above this in the widget tree. When using
/// [WidgetsApp], the large set of default text editing keyboard shortcuts are
/// declared near the top of the widget tree in [DefaultTextEditingShortcuts],
/// and any [Shortcuts] widget between it and this [EditableText] will override
/// those defaults.
///
/// {@template flutter.widgets.editableText.shortcutsAndTextInput}
/// ### Interactions Between [Shortcuts] and Text Input
///
/// Shortcuts prevent text input fields from receiving their keystrokes as text
/// input. For example, placing a [Shortcuts] widget in the widget tree above
/// a text input field and creating a shortcut for [LogicalKeyboardKey.keyA]
/// will prevent the field from receiving that key as text input. In other
/// words, typing key "A" into the field will trigger the shortcut and will not
/// insert a letter "a" into the field.
///
/// This happens because of the way that key strokes are handled in Flutter.
/// When a keystroke is received in Flutter's engine, it first gives the
/// framework the opportunity to handle it as a raw key event through
/// [SystemChannels.keyEvent]. This is what [Shortcuts] listens to indirectly
/// through its [FocusNode]. If it is not handled, then it will proceed to try
/// handling it as text input through [SystemChannels.textInput], which is what
/// [EditableTextState] listens to through [TextInputClient].
///
/// This behavior, where a shortcut prevents text input into some field, can be
/// overridden by using another [Shortcuts] widget lower in the widget tree and
/// mapping the desired key stroke(s) to [DoNothingAndStopPropagationIntent].
/// The key event will be reported as unhandled by the framework and will then
/// be sent as text input as usual.
/// {@endtemplate}
///
/// ## Gesture Events Handling
///
/// When [rendererIgnoresPointer] is false (the default), this widget provides
/// rudimentary, platform-agnostic gesture handling for user actions such as
/// tapping, long-pressing, and scrolling.
///
/// To provide more complete gesture handling, including double-click to select
/// a word, drag selection, and platform-specific handling of gestures such as
/// long presses, consider setting [rendererIgnoresPointer] to true and using
/// [TextSelectionGestureDetectorBuilder].
///
/// {@template flutter.widgets.editableText.showCaretOnScreen}
/// ## Keep the caret visible when focused
///
/// When focused, this widget will make attempts to keep the text area and its
/// caret (even when [showCursor] is `false`) visible, on these occasions:
///
///  * When the user focuses this text field and it is not [readOnly].
///  * When the user changes the selection of the text field, or changes the
///    text when the text field is not [readOnly].
///  * When the virtual keyboard pops up.
/// {@endtemplate}
///
/// ## Scrolling Considerations
///
/// If this [EditableText] is not a descendant of [Scaffold] and is being used
/// within a [Scrollable] or nested [Scrollable]s, consider placing a
/// [ScrollNotificationObserver] above the root [Scrollable] that contains this
/// [EditableText] to ensure proper scroll coordination for [EditableText] and
/// its components like [TextSelectionOverlay].
///
/// {@template flutter.widgets.editableText.accessibility}
/// ## Troubleshooting Common Accessibility Issues
///
/// ### Customizing User Input Accessibility Announcements
///
/// To customize user input accessibility announcements triggered by text
/// changes, use [SemanticsService.announce] to make the desired
/// accessibility announcement.
///
/// On iOS, the on-screen keyboard may announce the most recent input
/// incorrectly when a [TextInputFormatter] inserts a thousands separator to
/// a currency value text field. The following example demonstrates how to
/// suppress the default accessibility announcements by always announcing
/// the content of the text field as a US currency value (the `\$` inserts
/// a dollar sign, the `$newText` interpolates the `newText` variable):
///
/// ```dart
/// onChanged: (String newText) {
///   if (newText.isNotEmpty) {
///     SemanticsService.announce('\$$newText', Directionality.of(context));
///   }
/// }
/// ```
///
/// {@endtemplate}
///
/// See also:
///
///  * [TextField], which is a full-featured, material-design text input field
///    with placeholder text, labels, and [Form] integration. ¿ éŒóâ ¿ ëì¿ ëüÇ™/// Creates a basic text input control.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is one, meaning this is a single-line
/// text field. [maxLines] must be null or greater than zero.
///
/// If [keyboardType] is not set or is null, its value will be inferred from
/// [autofillHints], if [autofillHints] is not empty. Otherwise it defaults to
/// [TextInputType.text] if [maxLines] is exactly one, and
/// [TextInputType.multiline] if [maxLines] is null or greater than one.
///
/// The text cursor is not shown if [showCursor] is false or if [showCursor]
/// is null (the default) and [readOnly] is true.H¿ ë¶	¿ ë≠  ¿ ëµ¿ ëƒ  ¿ ë”¿ ë‚  ¿ ë¿ ëˆ  ¿ í¿ í  ¿ í.¿ í4  ¿ íL¿ íR  ¿ íi ¿ í{  ¿ íè ¿ í°  ¿ íµ¿ íª  ¿ íÿ¿ íÁ  ¿ íÒ¿ í˛  ¿ ì¿ ì  ¿ ì,#¿ ì;  ¿ ìU ¿ ì[  ¿ ì{¿ ìÅ  ¿ ìì¿ ìô  ¿ ì§Ä˜¿ îç  ¿ î°¿ îß  ¿ î∂¿ îº  ¿ îÕ¿ î”  ¿ î‡¿ îÊ  ¿ î˙¿ ï   ¿ ï¿ ï  ¿ ï2+¿ ï8  ¿ ïc¿ ïi  ¿ ï¿ ïÜ  ¿ ïï!¿ ïõ  ¿ ïº¿ ï¬  ¿ ï’¿ ï€  ¿ ïÒ¿ ñ  ¿ ñ¿ ñ  ¿ ñ,1¿ ñ2  ¿ ñc¿ ñi  ¿ ñw¿ ñ}  ¿ ñì¿ ñô  ¿ ñ©¿ ñØ  ¿ ñ«¿ ñÕ  ¿ ñ‰¿ ñÍ  ¿ ó¿ ó  ¿ ó'¿ ó-  ¿ ó>)¿ óY  ¿ óm¿ ós  ¿ óÉ#¿ óâ  ¿ ó¨¿ ó≤  ¿ ó»¿ óŒ  ¿ óﬂ¿ óÂ  ¿ óˆ"¿ ó¸  ¿ ò¿ ò$  ¿ ò5!¿ ò;  ¿ ò\3¿ òb  ¿ òï1¿ òõ  ¿ òÃ/¿ ò“  ¿ ô*¿ ô  ¿ ô10¿ ô7  ¿ ôg ¿ ôn  ¿ ôç¿ ôì  ¿ ô®¿ ôÆ  ¿ ô¿ ¿ ô∆  ¿ ôÊÄõ¿ öt  ¿ öá%¿ öç  ¿ ö≤¿ ö∏  ¿ öÀ!¿ ö—  ¿ öÚ¿ ö¯  ¿ õ
¿ õ  ¿ õ#¿ õ)  ¿ õD)¿ õJ  ¿ õs"¿ õy  ¿ õõ¿ õ°  ¿ õ∏¿ õæ  ¿ õ⁄A¿ õ‡  ¿ ú!¿ ú'  ÅF¿ í ¿ í%¿ íA¿ í_¿ íŒ¿ ìf¿ ìo¿ ìp¿ ì§¿ ì•¿ ìØ¿ îÅ¿ ì∑¿ ìÿ¿ îG¿ î∆¿ îÔ¿ ï¿ ïH¿ ïV¿ ïW¿ ït¿ ï±¿ ñF¿ ñX¿ ñY¿ ó¿ ó°¿ óø¿ ò¿ òQ¿ òx¿ òz¿ ò{¿ òâ¿ òä¿ ò∞¿ ò≤¿ ò≥¿ ò¿¿ ò¡¿ ò·¿ òÁ¿ òÒ¿ òÚ¿ òı¿ ò˙¿ òˆ¿ ô¿ ô%¿ ô&¿ ôJ¿ ô[¿ ô\¿ ôÊ¿ ôÁ¿ ôÒ¿ ö]¿ ô˘¿ ö$¿ öú¿ ö™¿ ö´¿ ö¢¿ ö©¿ ö£¿ öﬂ¿ ö„¿ ö‰¿ õ:¿ õi¿ õ¯¿ ú¿ ú¿ ú=¿ úC¿ úb¿ ú^¿ úD¿ úV¿ úW¿ úa¿ ú|¿ úl¿ úé¿ ú~¿ úë¿ ú“¿ úû¿ úπ¿ úí¿ ú†¿ úØ¿ ú∞¿ úª¿ ú ¿ úÀ¿ úÏ¿ ú‹¿ ú˛¿ úÓ¿ ù¿ ùB¿ ù¿ ù)¿ ù¿ ù¿ ù¿ ù ¿ ù+¿ ù:¿ ù;¿ ùL¿ ùR¿ ùs¿ ùd¿ ù\¿ ùS¿ ù_¿ ùp¿ ùg¿ ùr¿ ù}¿ ùÉ¿ ù–¿ û¿ ù∑¿ ù°¿ ùé¿ ùü¿ ùò¿ ùè¿ ùõ¿ ù§¿ ùµ¿ ùÆ¿ ù•¿ ù±¿ ù∫¿ ùœ¿ ùƒ¿ ùª¿ ù«¿ ù€¿ û¿ û¿ ûZ¿ û®¿ û1¿ û(¿ û)¿ û4¿ ûY¿ ûF¿ û>¿ û5¿ ûA¿ ûR¿ ûI¿ ûU¿ ûe¿ û≤¿ û∏¿ û÷¿ û˛¿ û∆¿ ûπ¿ û∫¿ û“¿ û…¿ û’¿ ûÿ¿ ü#¿ ü¿ ü@¿ ü%¿ üC¿ ü]¿ üN¿ üD¿ üE¿ üQ¿ üR¿ üv¿ üg¿ ü√¿ ü⁄¿ ü©¿ üä¿ üx¿ üç¿ üª¿ ü¨¿ üæ¿ ü≈¿ ü”¿ ü‘¿ üÎ¿ ü‹¿ ü˘¿ £R¿ †¿ °â¿ ü˙¿ †¿ °x¿ †¶¿ †˛¿ †¿ †®¿ †∂¿ †∑¿ ° ¿ °¿ °¿ °w¿ °6¿ °-¿ °8¿ °Z¿ °U¿ °\¿ °ã¿ £Q¿ °◊¿ ¢í¿ °å¿ °Ÿ¿ °ﬂ¿ °Ì¿ ¢O¿ ¢¿ ¢¿ ¢¿ ¢2¿ ¢.¿ ¢4¿ ¢î¿ ¢ö¿ ¢®¿ £P¿ ¢≈¿ ¢¡¿ ¢«¿ ¢Á¿ ¢‰¿ ¢È¿ £¿ £¿ £¿ £3¿ £.¿ £5¿ £\¿ £b¿ §¿ §ì¿ £ﬂ¿ £é¿ £Ü¿ £n¿ £â¿ £≥¿ £õ¿ £∂¿ £º¿ £”¿ £‘¿ £‹¿ £›¿ §¿ £Ï¿ §¿ §¿ §¿ §+¿ §©¿ §ù¿ §´¿ §À¿ §æ¿ §⁄¿ §Õ¿ §›¿ §Ô¿ • ¿ §˝¿ §¿ §ˇ¿ •¿ •¿ •¿ •:¿ •*¿ •U¿ ¶¿ •E¿ •<¿ •H¿ •k¿ ¶¿ •W¿ •j¿ •X¿ •|¿ •ó¿ •ò¿ •º¿ •œ¿ •ø¿ •“¿ •ÿ¿ •‡¿ •Û¿ •·¿ •Ù¿ •ı¿ •˙¿ •˚¿ ¶¿ ¶=¿ ¶2¿ ¶J¿ ¶?¿ ¶M¿ ¶NH¿ ¶[L¿ ¶ù#/// Controls the text being edited. ¿ ¶¨P¿ ¶Û4/// Controls whether this widget has keyboard focus. ¿ ßÅ¿ ®ÄÚ/// {@template flutter.widgets.editableText.obscuringCharacter}
/// Character used for obscuring text if [obscureText] is true.
///
/// Must be only a single character.
///
/// Defaults to the character U+2022 BULLET (‚Ä¢).
/// {@endtemplate} ¿ ®$Å∆¿ ©ﬂÅõ/// {@template flutter.widgets.editableText.obscureText}
/// Whether to hide the text being edited (e.g., for passwords).
///
/// When this is set to true, all the characters in the text field are
/// replaced by [obscuringCharacter], and the text in the field cannot be
/// copied with copy or cut. If [readOnly] is also true, then the text cannot
/// be selected.
///
/// Defaults to false.
/// {@endtemplate} ¿ ©ÔV¿ ™3'/// {@macro dart.ui.textHeightBehavior} ¿ ™J^¿ ™ö8/// {@macro flutter.painting.textPainter.textWidthBasis} ¿ ™≠Å3¿ ´ÿÅ/// {@template flutter.widgets.editableText.readOnly}
/// Whether the text can be changed.
///
/// When this is set to true, the text cannot be modified
/// by any shortcut or keyboard operation. The text is still selectable.
///
/// Defaults to false.
/// {@endtemplate} ¿ ´ÂÅj¿ ≠FÅA/// Whether the text will take the full width regardless of the text width.
///
/// When this is set to false, the width will be based on text width, which
/// will also be affected by [textWidthBasis].
///
/// Defaults to true.
///
/// See also:
///
///  * [textWidthBasis], which controls the calculation of text width. ¿ ≠TÅe¿ Æ´Å5/// Configuration of toolbar options.
///
/// By default, all options are enabled. If [readOnly] is true, paste and cut
/// will be disabled regardless. If [obscureText] is true, cut and copy will
/// be disabled regardless. If [readOnly] and [obscureText] are both true,
/// select all will also be disabled. ¿ ÆæÅq¿ ∞Å?/// Whether to show selection handles.
///
/// When a selection is active, there will be two handles at each side of
/// boundary, or one handle if the selection is collapsed. The handles can be
/// dragged to adjust the selection.
///
/// See also:
///
///  * [showCursor], which controls the visibility of the cursor. ¿ ∞4ÅO¿ ±yÅ'/// {@template flutter.widgets.editableText.showCursor}
/// Whether to show cursor.
///
/// The cursor refers to the blinking caret when the [EditableText] is focused.
/// {@endtemplate}
///
/// See also:
///
///  * [showSelectionHandles], which controls the visibility of the selection handles. ¿ ±àÄ¨¿ ≤)Äã/// {@template flutter.widgets.editableText.autocorrect}
/// Whether to enable autocorrection.
///
/// Defaults to true.
/// {@endtemplate} ¿ ≤9l¿ ≤ñD/// {@macro flutter.services.TextInputConfiguration.smartDashesType} ¿ ≤™l¿ ≥D/// {@macro flutter.services.TextInputConfiguration.smartQuotesType} ¿ ≥e¿ ≥oF/// {@macro flutter.services.TextInputConfiguration.enableSuggestions} ¿ ≥ÖH¿ ≥»0/// The text style to use for the editable text. ¿ ≥“Äµ¿ ¥yÄÉ/// Controls the undo state of the current editable text.
///
/// If null, this widget will create its own [UndoHistoryController]. ¿ ∫t¿ ∫Ü  ¿ ∫ñÄ≈¿ ªRÄ°/// {@template flutter.widgets.editableText.textAlign}
/// How the text should be aligned horizontally.
///
/// Defaults to [TextAlign.start].
/// {@endtemplate} ¿ ª`Ç‚¿ æ5Ç°/// {@template flutter.widgets.editableText.textDirection}
/// The directionality of the text.
///
/// This decides how [textAlign] values like [TextAlign.start] and
/// [TextAlign.end] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the text is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.
///
/// Defaults to the ambient [Directionality], if any.
/// {@endtemplate} ¿ æGÇ¿ ¿DÅ«/// {@template flutter.widgets.editableText.textCapitalization}
/// Configures how the platform keyboard will select an uppercase or
/// lowercase keyboard.
///
/// Only supports text keyboards, other keyboard types will ignore this
/// configuration. Capitalization is locale-aware.
///
/// Defaults to [TextCapitalization.none].
///
/// See also:
///
///  * [TextCapitalization], for a description of each capitalization behavior.
///
/// {@endtemplate} ¿ ¿[Åi¿ ¡æÅF/// Used to select a font when the same Unicode character can
/// be rendered differently, depending on the locale.
///
/// It's rarely necessary to set this property. By default its value
/// is inherited from the enclosing app with `Localizations.localeOf(context)`.
///
/// See [RenderEditable.locale] for more information. ¿ ¡…Ç¯¿ ƒ≤ÅÈ/// {@template flutter.widgets.editableText.textScaleFactor}
/// Deprecated. Will be removed in a future version of Flutter. Use
/// [textScaler] instead.
///
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.
///
/// Defaults to the [MediaQueryData.textScaleFactor] obtained from the ambient
/// [MediaQuery], or 1.0 if there is no [MediaQuery] in scope.
/// {@endtemplate}¿ √À¿ √Ã¿ √÷¿ ƒ†¿ √‹¿ √˚¿ ƒh¿ ƒ∆S¿ ≈4/// {@macro flutter.painting.textPainter.textScaler} ¿ ≈H¿ ≈[./// The color to use when painting the cursor. ¿ ≈kÅÚ¿ «BÅµ/// The color to use when painting the autocorrection Rect.
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is null on non-iOS platforms and the same color used in [CupertinoTextField]
/// on iOS.
///
/// Currently the autocorrection Rect only appears on iOS.
///
/// Defaults to null, which disables autocorrection Rect painting. ¿ «bÅg¿ »¥Å3/// The color to use when painting the background cursor aligned with the text
/// while rendering the floating cursor.
///
/// Typically this would be set to [CupertinoColors.inactiveGray].
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail. ¿ »Œà¬¿ —ààD/// {@template flutter.widgets.editableText.maxLines}
/// The maximum number of lines to show at one time, wrapping if necessary.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is 1 (the default), the text will not wrap, but will scroll
/// horizontally instead.
///
/// If this is null, there is no limit to the number of lines, and the text
/// container will start with enough vertical space for one line and
/// automatically grow to accommodate additional lines as they are entered, up
/// to the height of its constraints.
///
/// If this is not null, the value must be greater than zero, and it will lock
/// the input to the given number of lines and take up enough horizontal space
/// to accommodate that number of lines. Setting [minLines] as well allows the
/// input to grow and shrink between the indicated range.
///
/// The full set of behaviors possible with [minLines] and [maxLines] are as
/// follows. These examples apply equally to [TextField], [TextFormField],
/// [CupertinoTextField], and [EditableText].
///
/// Input that occupies a single line and scrolls horizontally as needed.
/// ```dart
/// const TextField()
/// ```
///
/// Input whose height grows from one line up to as many lines as needed for
/// the text that was entered. If a height limit is imposed by its parent, it
/// will scroll vertically when its height reaches that limit.
/// ```dart
/// const TextField(maxLines: null)
/// ```
///
/// The input's height is large enough for the given number of lines. If
/// additional lines are entered the input scrolls vertically.
/// ```dart
/// const TextField(maxLines: 2)
/// ```
///
/// Input whose height grows with content between a min and max. An infinite
/// max is possible with `maxLines: null`.
/// ```dart
/// const TextField(minLines: 2, maxLines: 4)
/// ```
///
/// See also:
///
///  * [minLines], which sets the minimum number of lines visible.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ —ïáá¿ Ÿá/// {@template flutter.widgets.editableText.minLines}
/// The minimum number of lines to occupy when the content spans fewer lines.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is null (default), text container starts with enough vertical space
/// for one line and grows to accommodate additional lines as they are entered.
///
/// This can be used in combination with [maxLines] for a varying set of behaviors.
///
/// If the value is set, it must be greater than zero. If the value is greater
/// than 1, [maxLines] should also be set to either null or greater than
/// this value.
///
/// When [maxLines] is set as well, the height will grow between the indicated
/// range of lines. When [maxLines] is null, it will grow as high as needed,
/// starting from [minLines].
///
/// A few examples of behaviors possible with [minLines] and [maxLines] are as follows.
/// These apply equally to [TextField], [TextFormField], [CupertinoTextField],
/// and [EditableText].
///
/// Input that always occupies at least 2 lines and has an infinite max.
/// Expands vertically as needed.
/// ```dart
/// TextField(minLines: 2)
/// ```
///
/// Input whose height starts from 2 lines and grows up to 4 lines at which
/// point the height limit is reached. If additional lines are entered it will
/// scroll vertically.
/// ```dart
/// const TextField(minLines:2, maxLines: 4)
/// ```
///
/// Defaults to null.
///
/// See also:
///
///  * [maxLines], which sets the maximum number of lines visible, and has
///    several examples of how minLines and maxLines interact to produce
///    various behaviors.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ Ÿ!É¿ ‹!Ç /// {@template flutter.widgets.editableText.expands}
/// Whether this widget's height will be sized to fill its parent.
///
/// If set to true and wrapped in a parent widget like [Expanded] or
/// [SizedBox], the input will expand to fill the parent.
///
/// [maxLines] and [minLines] must both be null when this is set to true,
/// otherwise an error is thrown.
///
/// Defaults to false.
///
/// See the examples in [maxLines] for the complete picture of how [maxLines],
/// [minLines], and [expands] interact to produce various behaviors.
///
/// Input that matches the height of its parent:
/// ```dart
/// const Expanded(
///   child: TextField(maxLines: null, expands: true),
/// )
/// ```
/// {@endtemplate} ¿ ‹-ÅÓ¿ ﬁÅ\/// {@template flutter.widgets.editableText.autofocus}
/// Whether this text field should focus itself if nothing else is already
/// focused.
///
/// If true, the keyboard will open as soon as this text field obtains focus.
/// Otherwise, the keyboard is only shown after the user taps the text field.
///
/// Defaults to false.
/// {@endtemplate} ¿ ﬁ Å§¿ ﬂ∂Åx/// The color to use when painting the selection.
///
/// If this property is null, this widget gets the selection color from the
/// [DefaultSelectionStyle].
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is set to the ambient [TextSelectionThemeData.selectionColor]. ¿ ﬂ…É·¿ „ôÉé/// {@template flutter.widgets.editableText.selectionControls}
/// Optional delegate for building the text selection handles.
///
/// Historically, this field also controlled the toolbar. This is now handled
/// by [contextMenuBuilder] instead. However, for backwards compatibility, when
/// [selectionControls] is set to an object that does not mix in
/// [TextSelectionHandleControls], [contextMenuBuilder] is ignored and the
/// [TextSelectionControls.buildToolbar] method is used instead.
/// {@endtemplate}
///
/// See also:
///
///  * [CupertinoTextField], which wraps an [EditableText] and which shows the
///    selection toolbar upon user events that are appropriate on the iOS
///    platform.
///  * [TextField], a Material Design themed wrapper of [EditableText], which
///    shows the selection toolbar upon appropriate user events based on the
///    user's platform set in [ThemeData.platform]. ¿ „ØÅ¿ ‰ΩÄÌ/// {@template flutter.widgets.editableText.keyboardType}
/// The type of keyboard to use for editing the text.
///
/// Defaults to [TextInputType.text] if [maxLines] is one and
/// [TextInputType.multiline] otherwise.
/// {@endtemplate} ¿ ‰Œe¿ Â$</// The type of action button to use with the soft keyboard. ¿ Â8âŒ¿ Ó˝âP/// {@template flutter.widgets.editableText.onChanged}
/// Called when the user initiates a change to the TextField's
/// value: when they have inserted or deleted text.
///
/// This callback doesn't run when the TextField's text is changed
/// programmatically, via the TextField's [controller]. Typically it
/// isn't necessary to be notified of such changes, since they're
/// initiated by the app itself.
///
/// To be notified of all changes to the TextField's text, cursor,
/// and selection, one can add a listener to its [controller] with
/// [TextEditingController.addListener].
///
/// [onChanged] is called before [onSubmitted] when user indicates completion
/// of editing, such as when pressing the "done" button on the keyboard. That
/// default behavior can be overridden. See [onEditingComplete] for details.
///
/// {@tool dartpad}
/// This example shows how onChanged could be used to check the TextField's
/// current value each time the user inserts or deletes a character.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_changed.0.dart **
/// {@end-tool}
/// {@endtemplate}
///
/// ## Handling emojis and other complex characters
/// {@template flutter.widgets.EditableText.onChanged}
/// It's important to always use
/// [characters](https://pub.dev/packages/characters) when dealing with user
/// input text that may contain complex characters. This will ensure that
/// extended grapheme clusters and surrogate pairs are treated as single
/// characters, as they appear to the user.
///
/// For example, when finding the length of some user input, use
/// `string.characters.length`. Do NOT use `string.length` or even
/// `string.runes.length`. For the complex character "üë®‚Äçüë©‚Äçüë¶", this
/// appears to the user as a single character, and `string.characters.length`
/// intuitively returns 1. On the other hand, `string.length` returns 8, and
/// `string.runes.length` returns 5!
/// {@endtemplate}
///
/// See also:
///
///  * [inputFormatters], which are called before [onChanged]
///    runs and can validate and change ("format") the input value.
///  * [onEditingComplete], [onSubmitted], [onSelectionChanged]:
///    which are more specialized input change notifications.
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes. ¿ ÔÉ•¿ ÚüÉ[/// {@template flutter.widgets.editableText.onEditingComplete}
/// Called when the user submits editable content (e.g., user presses the "done"
/// button on the keyboard).
///
/// The default implementation of [onEditingComplete] executes 2 different
/// behaviors based on the situation:
///
///  - When a completion action is pressed, such as "done", "go", "send", or
///    "search", the user's content is submitted to the [controller] and then
///    focus is given up.
///
///  - When a non-completion action is pressed, such as "next" or "previous",
///    the user's content is submitted to the [controller], but focus is not
///    given up because developers may want to immediately move focus to
///    another input widget within [onSubmitted].
///
/// Providing [onEditingComplete] prevents the aforementioned default behavior.
/// {@endtemplate} ¿ ÚµÉñ¿ ˆ@ÉF/// {@template flutter.widgets.editableText.onSubmitted}
/// Called when the user indicates that they are done editing the text in the
/// field.
///
/// By default, [onSubmitted] is called after [onChanged] when the user
/// has finalized editing; or, if the default behavior has been overridden,
/// after [onEditingComplete]. See [onEditingComplete] for details.
///
/// ## Testing
/// The following is the recommended way to trigger [onSubmitted] in a test:
///
/// ```dart
/// await tester.testTextInput.receiveAction(TextInputAction.done);
/// ```
///
/// Sending a `LogicalKeyboardKey.enter` via `tester.sendKeyEvent` will not
/// trigger [onSubmitted]. This is because on a real device, the engine
/// translates the enter key to a done action, but `tester.sendKeyEvent` sends
/// the key to the framework only.
/// {@endtemplate} ¿ ˆPÑ¿ ˙SÉø/// {@template flutter.widgets.editableText.onAppPrivateCommand}
/// This is used to receive a private command from the input method.
///
/// Called when the result of [TextInputClient.performPrivateCommand] is
/// received.
///
/// This can be used to provide domain-specific features that are only known
/// between certain input methods and their clients.
///
/// See also:
///   * [performPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputConnection#performPrivateCommand\(java.lang.String,%20android.os.Bundle\)),
///     which is the Android documentation for performPrivateCommand, used to
///     send a command from the input method.
///   * [sendAppPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager#sendAppPrivateCommand),
///     which is the Android documentation for sendAppPrivateCommand, used to
///     send a command to the input method.
/// {@endtemplate} ¿ ˙kÄÈ¿ ˚BÄÆ/// {@template flutter.widgets.editableText.onSelectionChanged}
/// Called when the user changes the selection of text (including the cursor
/// location).
/// {@endtemplate} ¿ ˚Ys¿ ˚µE/// {@macro flutter.widgets.SelectionOverlay.onSelectionHandleTapped} ¿ ˚—Å‡¿ ˝™Åµ/// {@template flutter.widgets.editableText.groupId}
/// The group identifier for the [TextFieldTapRegion] of this text field.
///
/// Text fields with the same group identifier share the same tap region.
/// Defaults to the type of [EditableText].
///
/// See also:
///
///  * [TextFieldTapRegion], to give a [groupId] to a widget that is to be
///    included in a [EditableText]'s tap region that has [groupId] set.
/// {@endtemplate} ¿ ˝∂áƒ¿náR/// {@template flutter.widgets.editableText.onTapOutside}
/// Called for each tap that occurs outside of the[TextFieldTapRegion] group
/// when the text field is focused.
///
/// If this is null, [FocusNode.unfocus] will be called on the [focusNode] for
/// this text field when a [PointerDownEvent] is received on another part of
/// the UI. However, it will not unfocus as a result of mobile application
/// touch events (which does not include mouse clicks), to conform with the
/// platform conventions. To change this behavior, a callback may be set here
/// that operates differently from the default.
///
/// When adding additional controls to a text field (for example, a spinner, a
/// button that copies the selected text, or modifies formatting), it is
/// helpful if tapping on that control doesn't unfocus the text field. In
/// order for an external widget to be considered as part of the text field
/// for the purposes of tapping "outside" of the field, wrap the control in a
/// [TextFieldTapRegion].
///
/// The [PointerDownEvent] passed to the function is the event that caused the
/// notification. It is possible that the event may occur outside of the
/// immediate bounding box defined by the text field, although it will be
/// within the bounding box of a [TextFieldTapRegion] member.
/// {@endtemplate}
///
/// {@tool dartpad}
/// This example shows how to use a `TextFieldTapRegion` to wrap a set of
/// "spinner" buttons that increment and decrement a value in the [TextField]
/// without causing the text field to lose keyboard focus.
///
/// This example includes a generic `SpinnerField<T>` class that you can copy
/// into your own project and customize.
///
/// ** See code in examples/api/lib/widgets/tap_region/text_field_tap_region.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TapRegion] for how the region group is determined. ¿Ç‹¿LÇê/// {@template flutter.widgets.editableText.inputFormatters}
/// Optional input validation and formatting overrides.
///
/// Formatters are run in the provided order when the user changes the text
/// this widget contains. When this parameter changes, the new formatters will
/// not be applied until the next time the user inserts or deletes text.
/// Similar to the [onChanged] callback, formatters don't run when the text is
/// changed programmatically via [controller].
///
/// See also:
///
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes.
/// {@endtemplate} ¿`Åÿ¿
-Åß/// The cursor for a mouse pointer when it enters or is hovering over the
/// widget.
///
/// If this property is null, [SystemMouseCursors.text] will be used.
///
/// The [mouseCursor] is the only property of [EditableText] that controls the
/// appearance of the mouse pointer. All other properties related to "cursor"
/// stands for the text cursor, which is usually a blinking vertical line at
/// the editing position. ¿
=Ñ?¿fÉÒ/// Whether the caller will provide gesture handling (true), or if the
/// [EditableText] is expected to handle basic gestures (false).
///
/// When this is false, the [EditableText] (or more specifically, the
/// [RenderEditable]) enables some rudimentary gestures (tap to position the
/// cursor, long-press to select all, and some scrolling behavior).
///
/// These behaviors are sufficient for debugging purposes but are inadequate
/// for user-facing applications. To enable platform-specific behaviors, use a
/// [TextSelectionGestureDetectorBuilder] to wrap the [EditableText], and set
/// [rendererIgnoresPointer] to true.
///
/// When [rendererIgnoresPointer] is true true, the [RenderEditable] created
/// by this widget will not handle pointer events.
///
/// This property is false by default.
///
/// See also:
///
///  * [RenderEditable.ignorePointer], which implements this feature.
///  * [TextSelectionGestureDetectorBuilder], which implements platform-specific
///    gestures and behaviors. ¿ÅÇ ¿vÅ—/// {@template flutter.widgets.editableText.cursorWidth}
/// How thick the cursor will be.
///
/// Defaults to 2.0.
///
/// The cursor will draw under the text. The cursor width will extend
/// to the right of the boundary between characters for left-to-right text
/// and to the left for right-to-left text. This corresponds to extending
/// downstream relative to the selected position. Negative values may be used
/// to reverse this behavior.
/// {@endtemplate} ¿ÜÄÁ¿aÄ¬/// {@template flutter.widgets.editableText.cursorHeight}
/// How tall the cursor will be.
///
/// If this property is null, [RenderEditable.preferredLineHeight] will be used.
/// {@endtemplate} ¿rÄ‘¿:ÄØ/// {@template flutter.widgets.editableText.cursorRadius}
/// How rounded the corners of the cursor should be.
///
/// By default, the cursor has no radius.
/// {@endtemplate} ¿KÅa¿óÅ2/// {@template flutter.widgets.editableText.cursorOpacityAnimates}
/// Whether the cursor will animate from fully transparent to fully opaque
/// during each cursor blink.
///
/// By default, the cursor opacity will animate on iOS platforms and will not
/// animate on Android platforms.
/// {@endtemplate} ¿±V¿˚9///{@macro flutter.rendering.RenderEditable.cursorOffset} ¿c¿[A///{@macro flutter.rendering.RenderEditable.paintCursorAboveText} ¿tÄª¿Äà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles. ¿4Ä∏¿ŸÄá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles. ¿ÒÄÆ¿çÄÄ/// The appearance of the keyboard.
///
/// This setting is only honored on iOS devices.
///
/// Defaults to [Brightness.light]. ¿§ÇÉ¿ÇP/// {@template flutter.widgets.editableText.scrollPadding}
/// Configures padding to edges surrounding a [Scrollable] when the Textfield scrolls into view.
///
/// When this widget receives focus and is not completely visible (for example scrolled partially
/// off the screen or overlapped by the keyboard)
/// then it will attempt to make itself visible by scrolling a surrounding [Scrollable], if one is present.
/// This value controls how far from the edges of a [Scrollable] the TextField will be positioned after the scroll.
///
/// Defaults to EdgeInsets.all(20.0).
/// {@endtemplate} ¿,Ç|¿éÇ:/// {@template flutter.widgets.editableText.enableInteractiveSelection}
/// Whether to enable user interface affordances for changing the
/// text selection.
///
/// For example, setting this to true will enable features such as
/// long-pressing the TextField to select text and show the
/// cut/copy/paste menu, and tapping to move the text caret.
///
/// When this is false, the text selection cannot be adjusted by
/// the user, text cannot be copied, and the user cannot paste into
/// the text field from the clipboard.
///
/// Defaults to true.
/// {@endtemplate} ¿≠Å°¿.Åd/// Setting this property to true makes the cursor stop blinking or fading
/// on and off once the cursor appears on focus. This property is useful for
/// testing purposes.
///
/// It does not affect the necessity to focus the EditableText for the cursor
/// to appear in the first place.
///
/// Defaults to false, resulting in a typical blinking cursor.¿I¿Se¿ß9/// {@macro flutter.widgets.scrollable.dragStartBehavior} ¿ΩÅ0¿›Ä˘/// {@template flutter.widgets.editableText.scrollController}
/// The [ScrollController] to use when vertically scrolling the input.
///
/// If null, it will instantiate a new ScrollController.
///
/// See [Scrollable.controller].
/// {@endtemplate} ¿ÚÅ„¿ »Å™/// {@template flutter.widgets.editableText.scrollPhysics}
/// The [ScrollPhysics] to use when vertically scrolling the input.
///
/// If not specified, it will behave according to the current platform.
///
/// See [Scrollable.physics].
/// {@endtemplate}
///
/// If an explicit [ScrollBehavior] is provided to [scrollBehavior], the
/// [ScrollPhysics] provided by that behavior will take precedence after
/// [scrollPhysics]. ¿ ⁄Äı¿!¿ÄÃ/// {@template flutter.widgets.editableText.scribbleEnabled}
/// Whether iOS 14 Scribble features are enabled for this widget.
///
/// Only available on iPads.
///
/// Defaults to true.
/// {@endtemplate} ¿"¯é˘¿1‰éG/// {@template flutter.widgets.editableText.autofillHints}
/// A list of strings that helps the autofill service identify the type of this
/// text input.
///
/// When set to null, this text input will not send its autofill information
/// to the platform, preventing it from participating in autofills triggered
/// by a different [AutofillClient], even if they're in the same
/// [AutofillScope]. Additionally, on Android and web, setting this to null
/// will disable autofill for this text field.
///
/// The minimum platform SDK version that supports Autofill is API level 26
/// for Android, and iOS 10.0 for iOS.
///
/// Defaults to an empty list.
///
/// ### Setting up iOS autofill:
///
/// To provide the best user experience and ensure your app fully supports
/// password autofill on iOS, follow these steps:
///
/// * Set up your iOS app's
///   [associated domains](https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app).
/// * Some autofill hints only work with specific [keyboardType]s. For example,
///   [AutofillHints.name] requires [TextInputType.name] and [AutofillHints.email]
///   works only with [TextInputType.emailAddress]. Make sure the input field has a
///   compatible [keyboardType]. Empirically, [TextInputType.name] works well
///   with many autofill hints that are predefined on iOS.
///
/// ### Troubleshooting Autofill
///
/// Autofill service providers rely heavily on [autofillHints]. Make sure the
/// entries in [autofillHints] are supported by the autofill service currently
/// in use (the name of the service can typically be found in your mobile
/// device's system settings).
///
/// #### Autofill UI refuses to show up when I tap on the text field
///
/// Check the device's system settings and make sure autofill is turned on,
/// and there are available credentials stored in the autofill service.
///
/// * iOS password autofill: Go to Settings -> Password, turn on "Autofill
///   Passwords", and add new passwords for testing by pressing the top right
///   "+" button. Use an arbitrary "website" if you don't have associated
///   domains set up for your app. As long as there's at least one password
///   stored, you should be able to see a key-shaped icon in the quick type
///   bar on the software keyboard, when a password related field is focused.
///
/// * iOS contact information autofill: iOS seems to pull contact info from
///   the Apple ID currently associated with the device. Go to Settings ->
///   Apple ID (usually the first entry, or "Sign in to your iPhone" if you
///   haven't set up one on the device), and fill out the relevant fields. If
///   you wish to test more contact info types, try adding them in Contacts ->
///   My Card.
///
/// * Android autofill: Go to Settings -> System -> Languages & input ->
///   Autofill service. Enable the autofill service of your choice, and make
///   sure there are available credentials associated with your app.
///
/// #### I called `TextInput.finishAutofillContext` but the autofill save
/// prompt isn't showing
///
/// * iOS: iOS may not show a prompt or any other visual indication when it
///   saves user password. Go to Settings -> Password and check if your new
///   password is saved. Neither saving password nor auto-generating strong
///   password works without properly setting up associated domains in your
///   app. To set up associated domains, follow the instructions in
///   <https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app>.
///
/// {@endtemplate}
/// {@macro flutter.services.AutofillConfiguration.autofillHints} ¿1ˆÅ¿2ÏÄ◊/// The [AutofillClient] that controls this input field's autofill behavior.
///
/// When null, this widget's [EditableTextState] will be used as the
/// [AutofillClient]. This property may override [autofillHints]. ¿2ˇv¿3iX/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿3zÇÓ¿6[Ç∞/// Restoration ID to save and restore the scroll offset of the
/// [EditableText].
///
/// If a restoration id is provided, the [EditableText] will persist its
/// current scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// Persisting and restoring the content of the [EditableText] is the
/// responsibility of the owner of the [controller], who may use a
/// [RestorableTextEditingController] for that purpose.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter. ¿6mÇˆ¿9UÇ≥/// {@template flutter.widgets.shadow.scrollBehavior}
/// A [ScrollBehavior] that will be applied to this widget individually.
///
/// Defaults to null, wherein the inherited [ScrollBehavior] is copied and
/// modified to alter the viewport decoration, like [Scrollbar]s.
/// {@endtemplate}
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [scrollPhysics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior].
///
/// The [ScrollBehavior] of the inherited [ScrollConfiguration] will be
/// modified by default to only apply a [Scrollbar] if [maxLines] is greater
/// than 1. ¿9h}¿9»R/// {@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning} ¿9ÍÖÅ¿?NÖ/// {@template flutter.widgets.editableText.contentInsertionConfiguration}
/// Configuration of handler for media content inserted via the system input
/// method.
///
/// Defaults to null in which case media content insertion will be disabled,
/// and the system will display a message informing the user that the text field
/// does not support inserting media content.
///
/// Set [ContentInsertionConfiguration.onContentInserted] to provide a handler.
/// Additionally, set [ContentInsertionConfiguration.allowedMimeTypes]
/// to limit the allowable mime types for inserted content.
///
/// {@tool dartpad}
///
/// This example shows how to access the data for inserted content in your
/// `TextField`.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// If [contentInsertionConfiguration] is not provided, by default
/// an empty list of mime types will be sent to the Flutter Engine.
/// A handler function must be provided in order to customize the allowable
/// mime types for inserted content.
///
/// If rich content is inserted without a handler, the system will display
/// a message informing the user that the current text input does not support
/// inserting rich content.
/// {@endtemplate} ¿?päù¿I˚âˆ/// {@template flutter.widgets.EditableText.contextMenuBuilder}
/// Builds the text selection toolbar when requested by the user.
///
/// The context menu is built when [EditableTextState.showToolbar] is called,
/// typically by one of the callbacks installed by the widget created by
/// [TextSelectionGestureDetectorBuilder.buildGestureDetector]. The widget
/// returned by [contextMenuBuilder] is passed to a [ContextMenuController].
///
/// If no callback is provided, no context menu will be shown.
///
/// The [EditableTextContextMenuBuilder] signature used by the
/// [contextMenuBuilder] callback has two parameters, the [BuildContext] of
/// the [EditableText] and the [EditableTextState] of the [EditableText].
///
/// The [EditableTextState] has two properties that are especially useful when
/// building the widgets for the context menu:
///
/// * [EditableTextState.contextMenuAnchors] specifies the desired anchor
///   position for the context menu.
///
/// * [EditableTextState.contextMenuButtonItems] represents the buttons that
///   should typically be built for this widget (e.g. cut, copy, paste).
///
/// The [TextSelectionToolbarLayoutDelegate] class may be particularly useful
/// in honoring the preferred anchor positions.
///
/// For backwards compatibility, when [selectionControls] is set to an object
/// that does not mix in [TextSelectionHandleControls], [contextMenuBuilder]
/// is ignored and the [TextSelectionControls.buildToolbar] method is used
/// instead.
///
/// {@tool dartpad}
/// This example shows how to customize the menu, in this case by keeping the
/// default buttons for the platform but modifying their appearance.
///
/// ** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows how to show a custom button only when an email address
/// is currently selected.
///
/// ** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.1.dart **
/// {@end-tool}
///
/// See also:
///   * [AdaptiveTextSelectionToolbar], which builds the default text selection
///     toolbar for the current platform, but allows customization of the
///     buttons.
///   * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///     button Widgets for the current platform given
///     [ContextMenuButtonItem]s.
///   * [BrowserContextMenu], which allows the browser's context menu on web
///     to be disabled and Flutter-rendered context menus to appear.
/// {@endtemplate} ¿JÇß¿L¢ÇX/// {@template flutter.widgets.EditableText.spellCheckConfiguration}
/// Configuration that details how spell check should be performed.
///
/// Specifies the [SpellCheckService] used to spell check text input and the
/// [TextStyle] used to style text with misspelled words.
///
/// If the [SpellCheckService] is left null, spell check is disabled by
/// default unless the [DefaultSpellCheckService] is supported, in which case
/// it is used. It is currently supported only on Android and iOS.
///
/// If this configuration is left null, then spell check is disabled by default.
/// {@endtemplate} ¿LæÄ«¿MoÄá/// The configuration for the magnifier to use with selections in this text
/// field.
///
/// {@macro flutter.widgets.magnifier.intro} ¿ ¥åÖÂ¿ π¬Ñˆ/// {@template flutter.widgets.editableText.strutStyle}
/// The strut style used for the vertical layout.
///
/// [StrutStyle] is used to establish a predictable vertical layout.
/// Since fonts may vary depending on user input and due to font
/// fallback, [StrutStyle.forceStrutHeight] is enabled by default
/// to lock all lines to the height of the base [TextStyle], provided by
/// [style]. This ensures the typed text fits within the allotted space.
///
/// If null, the strut used will inherit values from the [style] and will
/// have [StrutStyle.forceStrutHeight] set to true. When no [style] is
/// passed, the theme's [TextStyle] will be used to generate [strutStyle]
/// instead.
///
/// To disable strut-based vertical alignment and allow dynamic vertical
/// layout based on the glyphs typed, use [StrutStyle.disabled].
///
/// Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))
/// and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).
/// {@endtemplate}
///
/// Within editable text and text fields, [StrutStyle] will not use its standalone
/// default values, and will instead inherit omitted/null properties from the
/// [TextStyle] instead. See [StrutStyle.inheritFromTextStyle].   ¿!‘Å ¿"≈Ä€/// {@template flutter.widgets.editableText.selectionEnabled}
/// Same as [enableInteractiveSelection].
///
/// This getter exists primarily for consistency with
/// [RenderEditable.selectionEnabled].
/// {@endtemplate}   ¿Mä\¿Mì    ¿MÍç‹¿QäÉZ/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu for an editable field.
///
/// For example, [EditableText] uses this to generate the default buttons for
/// its context menu.
///
/// See also:
///
/// * [EditableTextState.contextMenuButtonItems], which gives the
///   [ContextMenuButtonItem]s for a specific EditableText.
/// * [SelectableRegion.getSelectableButtonItems], which performs a similar
///   role but for content that is selectable but not editable.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the button
///   Widgets for the current platform given [ContextMenuButtonItem]s. 	¿Qß/¿Q»  ¿Q‹#¿Q˙  ¿R"¿R#  ¿R-$¿RK  ¿RW(¿Ru  ¿RÖ%¿R£  ¿R∞(¿RŒ  ¿Rﬁ$¿R¸  ¿S,¿S&   ¿\ûm¿\(  ¿\A(¿\]  ¿\o¿\~   ¿zÑC¿z¢   ¿zÑ¿zÖ¿zÀå}¿z‹  ¿z&¿{  ¿zÀ¿zÃ ¿áL¿ˆ¿ár/// State for a [EditableText].  6¿àW¿à^  ¿â09¿âE  ¿âm`¿âÉ ¿âü¿â∫¿âª¿âÀ¿âÃ¿â“O¿âÏ ¿ä¿ä¿ä¿ä¿ä¿ä ¿ä¿ä%*¿ä5 ¿äD¿äM¿äN¿äTÅ‡¿ä°,/// Detects whether the clipboard can paste.	¿ãÛ¿å¿ä≥¿ãı¿å¿å¿å¿å2¿å3¿å9Å	¿å¯Äì/// Detects whether the Live Text input is enabled.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.¿ç¿ç#¿ç¿ç¿ç%¿ç@¿çA¿çG)¿ç\  ¿ç¿'¿ç÷  ¿çÎ<¿é  ¿é+O¿é]  ¿é~3¿éÉ ¿é¨¿è,¿è ¿è#¿è,¿è-¿è2+¿èD  ¿è›/¿èÌ ¿ê¿ê
¿ê¿ê3¿ê  ¿ê8¿êA¿êB¿êG1¿êW ¿êm¿êv¿êw¿ê}¿êÇ ¿êí¿êú)¿ê∞  ¿ëk5¿ëà  ¿ë§¿ë≥  ¿î@ÅN¿ï}Å/// The most up-to-date spell check results for text input.
///
/// These results will be updated via calls to spell check through a
/// [SpellCheckService] and used by this widget to build the [TextSpan] tree
/// for text input and menus for replacement suggestions of misspelled words. ¿ñÄ°¿ñéT/// The text processing service used to retrieve the native text processing actions.¿ñ§¿ñΩ¿ñæ¿ñƒÄí¿ó+F/// The list of native text processing actions provided by the engine.¿óT¿óU¿óA¿óS¿óB¿öjL¿öÄ ¿öõ¿ö£¿öµ¿ö∞¿ö§¿ö≤¿öª3¿ö–  ¿öÛ¿õ   ¿Û«¿ÛÃ ¿Ûﬁ¿Ç¿€Å∆/// The last known [TextEditingValue] of the platform text input plugin.
///
/// This value is updated when the platform text input plugin sends a new
/// update via [updateEditingValue], or when [EditableText] calls
/// [TextInputConnection.setEditingState] to overwrite the platform text input
/// plugin's [TextEditingValue].
///
/// Used in [_updateRemoteEditingValueIfNeeded] to determine whether the
/// remote value is outdated and needs updating. ¿)
¿)  ¿)Ü¿)î  ¿)Ù¿)¸  ¿*I¿*Q  ¿Ii¿Im ¿I¿b(¿b ¿b.¿j1'¿j6 ¿jS¿oeÅ¿op ¿oò¿oµ¿o√¿oƒ¿o”¿o·¿o‚¿oÈ¿oÛ¿p¿p¿p¿p¿p ¿p-¿p;¿p<¿pI¿pW¿pX¿pc¿{*¿{ ¿{&¿óÿK¿óÓ ¿ò¿ò¿ò"¿ò¿ò¿ò¿ò'>¿ò: ¿òQ¿òW¿òX¿òj(¿òo ¿òç¿•s ¿•  ¿øπ$¿øΩ ¿ø‹¿ø·¿øÊ  ¿÷H$¿÷[  ¿ÈzÅ&¿ÍMÄ∞/// The renderer for this widget's descendant.
///
/// This property is typically used to notify the renderer of input gestures
/// when [RenderEditable.ignorePointer] is true.¿Íè¿Íç¿Íy¿Í^¿Íj¿Ík¿Íz¿Í{¿Íã¿Íå¿Íí¿`¿d ¿{¿|¿Î¿  ¿A"¿L  ¿%ïÄì¿%¬ 	¿%ﬂ¿%Ì¿&¿%Ó¿&¿&'¿&¿&	¿&¿(ßs¿(Ã 	¿(·¿(Ô¿)¿(¿)¿)¿)¿)¿)¿9∑ÄÉ¿9‡ 	¿9˘¿:¿:¿:¿:¿:9¿:'¿:¿:)¿:?Ä¡¿:è ¿:∂¿:⁄¿:˘¿:€¿:˙¿:ˇ¿:˚¿@ÀéÛ¿@ ÅO¿A¿OΩ¿@˚¿A¿@¸¿A¿A¿A¿A	¿A<¿A¿A>¿AM¿A`¿AY¿AN¿A[¿Ax¿Ag¿Az¿Aß¿Aí¿A©¿A€¿A≈¿A›¿AÛ¿AÙ¿B ¿B¿B¿B¿B¿B%¿B3¿B&¿B4¿BT¿B=¿B5¿B?¿B¿Bj¿BÅ¿Bë¿BÌ¿Bí¿B£¿Bπ¿B§¿B∫¿BÏ¿Bª¿B¡¿B’¿C¿BÙ¿C¿C$¿Cà¿C%¿C6¿CU¿C7¿CV¿Cá¿CW¿C]¿Cp¿C¶¿Cè¿C®¿C∏¿D
¿Cπ¿C ¿C‚¿CÀ¿C„¿D	¿C‰¿CÍ¿Cˆ¿DO¿D/¿DQ¿Da¿Dı¿Db¿D|¿Dù¿D}¿Dû¿DÙ¿Dü¿D•¿Dπ¿DÌ¿D“¿DÔ¿E¿D¸¿E¿E)¿Ew¿E*¿E8¿ET¿E9¿EU¿Ev¿E^¿EV¿E`¿E•¿E~¿Eß¿E∑¿FP¿E∏¿E“¿E˙¿E”¿E˚¿FO¿E¸¿F¿F¿FI¿F.¿FK¿FÑ¿FW¿FÜ¿Fñ¿G5¿Fó¿F±¿Fﬁ¿F≤¿Fﬂ¿G4¿F‡¿FÊ¿F˙¿G.¿G¿G0¿G\¿G<¿G^¿Gn¿Gı¿Go¿Gâ¿G™¿Gä¿G´¿GÙ¿G¨¿G≤¿Gæ¿GÓ¿G”¿G¿H)¿G¸¿H+¿H;¿HZ¿H<¿Hé¿Ha¿Hê¿H†¿Hø¿H°¿I¿H∆¿I¿I¿I¡¿I¿I.¿Ij¿I/¿Ik¿I¿¿Il¿Ir¿IÜ¿I∫¿Iü¿Iº¿IÔ¿I»¿IÒ¿J¿Jö¿J¿J¿JD¿J¿JE¿Jô¿JF¿JL¿J_¿Jì¿Jx¿Jï¿J◊¿J°¿JŸ¿JÈ¿Kë¿JÍ¿K¿K;¿K¿K<¿Kê¿K=¿KC¿KV¿Kä¿Ko¿Kå¿K∂¿Kò¿K∏¿K»¿L¿K…¿K◊¿Kˆ¿Kÿ¿K˜¿L¿L ¿K¯¿L¿L/¿L#¿L1¿L?¿LL¿L@¿LM¿L_¿LV¿LN¿LX¿Lü¿L¿L°¿L±¿MH¿L≤¿LÃ¿LÌ¿LÕ¿LÓ¿MG¿LÔ¿Lı¿M¿M1¿M¿M3¿MA¿M9¿MC¿Mv¿MO¿Mx¿Mà¿NB¿Mâ¿M£¿MÀ¿M§¿MÃ¿NA¿MÕ¿M”¿MÊ¿N¿M˚¿N¿N&¿N¿N(¿N;¿N.¿N=¿No¿N\¿Nq¿NÅ¿Nò¿NÇ¿Ní¿Nó¿Nì¿N∂¿Nü¿N∏¿N»¿N„¿N…¿N›¿N‚¿Nﬁ¿N˘¿NÍ¿N˚¿O¿Oj¿O¿O¿O*¿O¿O+¿Oi¿O4¿O,¿O6¿Oh¿Oã¿Or¿Oç¿Où¿O∏¿Oû)¿ànÄø¿àÜ    ¿çtH¿ç}    ¿é∂H¿éø    ¿èax¿èv    ¿ê…M¿êË   ¿ê…¿ê ¿ëM¿ë-    ¿ëæÅó¿ì!Å#/// Configuration that determines how spell check will be performed.
///
/// If possible, this configuration will contain a default for the
/// [SpellCheckService] if it is not otherwise specified.
///
/// See also:
///  * [DefaultSpellCheckService], the spell check service used by default.  ¿í¿íÒ¿ìYÄ„¿ì¸Äë/// Whether or not spell check is enabled.
///
/// Spell check is enabled when a [SpellCheckConfiguration] has been specified
/// for the widget.   ¿ïìÄá¿ïú    ¿ó[ÇÉ¿ô£Ç$/// Whether to create an input connection with the platform for text editing
/// or not.
///
/// Read-only input fields do not need a connection with the platform since
/// there's no need for text editing capabilities (e.g. virtual keyboard).
///
/// On the web, we always need a connection because we want some browser
/// functionalities to continue to work on read-only input fields like:
///
/// - Relevant context menu.
/// - cmd/ctrl+c shortcut to copy.
/// - cmd/ctrl+a to select all.
/// - Changing the selection using a physical keyboard.   ¿õ@¿õ*   ¿õ¿õ¿õYÄŒ¿õc    ¿ú+Å1¿ú@   ¿ú+¿ú,¿ù`Å¿ùu   ¿ù`¿ùa¿ûgÅ¿û|   ¿ûg¿ûh¿üwÉ©¿üå   ¿üw¿üx¿£$Å!¿£9   ¿£$¿£%¿§IÅ%¿§^   ¿§I¿§J¿•rÅÊ¿•á   ¿•r¿•s¿ß\Ä„¿ßq   ¿ß\¿ß]¿©gÅ¿©|    ¿≤x]¿≤Å    ¿ﬂúÑ¿‡„Å/// {@template flutter.widgets.EditableText.getAnchors}
/// Returns the anchor points for the default context menu.
/// {@endtemplate}
///
/// See also:
///
///  * [contextMenuButtonItems], which provides the [ContextMenuButtonItem]s
///    for the default context menu buttons.   ¿„ßà¿ÁOÉg/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu for [EditableText].
///
/// See also:
///
/// * [EditableText.getEditableButtonItems], which performs a similar role,
///   but for any editable field, not just specifically EditableText.
/// * [SelectableRegionState.contextMenuButtonItems], which performs a similar
///   role but for content that is selectable but not editable.
/// * [contextMenuAnchors], which provides the anchor points for the default
///   context menu.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///   button Widgets for the current platform given [ContextMenuButtonItem]s.   ¿Î¨Ñà¿ÎÃ    ¿ C¿!   ¿ ¿¿+OV¿+Z    ¿NP7¿Ne    ¿NäM¿Né  ¿Nï¿Nß   ¿N€0¿N‰    ¿O.¿O    ¿X°Ä»¿Y	Z/// Whether to send the autofill information to the autofill service. True by
/// default.   ¿ºóÄñ¿º†    ¿Ω1Ä·¿Ω–|/// Whether the blinking cursor is actually visible at this precise moment
/// (it's hidden half the time, since it blinks).  ¿Ω≤¿Ω≥¿æÅ¿æıÄ∂/// The cursor blink interval (the amount of time the cursor is in the "on"
/// state or the "off" state). A complete cursor blink period is twice this
/// value (half on, half off).  ¿æ”¿æ‘¿ø(Äç¿øè5/// The current status of the text selection handles.  ¿ø`¿øa¿ÈW¿È1    ¿Í•<¿Í∆   ¿Í•¿Í¶¿ÍÂG¿Í    ¿©>¿¿   ¿©¿™¿¸Ö¬¿#   ¿¸¿˝i¿®CÄä¿®H    ¿®—Äí¿®÷    ¿™wÑÖ¿™µ*/// Copy current selection to [Clipboard]. ¿™√¿™⁄  ¿™§¿™•¿Ø Ét¿Ø=)/// Cut current selection to [Clipboard]. ¿ØJ¿Øa  ¿Ø,¿Ø-¿≤ŸÅ£¿≥ /// Paste text from [Clipboard]. ¿≥¿≥6  ¿≤¸¿≤˝¿¥ÄÉÊ¿¥Ö  ¿¥ê¿¥ß  ¿¥≠¿¥µ   ¿∏jÑ|¿∏ü!/// Select the entire text value. ¿∏©¿∏¿  ¿∏é¿∏è¿ºÍÇ-¿ΩÀÄ«/// Look up the current selection,
/// as in the "Look Up" edit menu button on iOS.
///
/// Currently this is only implemented for iOS.
///
/// Throws an error if the selection is empty or collapsed. ¿Ω€¿ΩÚ   ¿øÇà¿¿5Ä˛/// Launch a web search on the current selection,
/// as in the "Search Web" edit menu button on iOS.
///
/// Currently this is only implemented for iOS.
///
/// When 'obscureText' is true or the selection is empty,
/// this function will not do anything ¿¿K¿¿b   ¿¡ßÇè¿¬”Å/// Launch the share interface for the current selection,
/// as in the "Share..." edit menu button on iOS.
///
/// Currently this is only implemented for iOS and Android.
///
/// When 'obscureText' is true or the selection is empty,
/// this function will not do anything ¿¬‚¿¬˘   ¿ƒ:Å¿ƒ?  ¿ƒS¿ƒj   ¿≈EÖh¿∆üÅ9/// Finds specified [SuggestionSpan] that matches the provided index using
/// binary search.
///
/// See also:
///
///  * [SpellCheckSuggestionsToolbar], the Material style spell check
///    suggestions toolbar that uses this method to render the correct
///    suggestions in the toolbar for a misspelled word. ¿∆ø¿∆ƒ   ¿ ±áb¿ÀïÄº/// Infers the [SpellCheckConfiguration] used to perform spell check.
///
/// If spell check is enabled, this will try to infer a value for
/// the [SpellCheckService] if left unspecified. ¿À≥&¿ÀÕ   ¿“ÖÜ¿”H/// Returns the [ContextMenuButtonItem]s for the given [ToolbarOptions]. ¿”&¿”7  ¿“b¿“c¿“m¿“Á¿“s¿“∞¿◊°á˜¿ÿæÄ€/// Gets the line heights at the start and end of the selection for the given
/// [EditableTextState].
///
/// See also:
///
/// * [TextSelectionToolbarAnchors.getSelectionRect], which depends on this
///   information.   ¿OÅÁ¿`   ¿O¿P¿Ú:Å¿ÚΩq/// Query the engine to initialize the list of text processing actions to show
/// in the text selection toolbar.   ¿ÛÁäØ¿Û¯   ¿ÛÁ¿ÛË¿˛öé§¿˛´  ¿˛ª¿˛…  ¿˛ö¿˛õ¿BÅ¿G    ¿]Ñi¿n   ¿]¿^¿GåH¿X  ¿k¿}  ¿G¿H¿!ìÅj¿!ò  ¿!≤¿!ƒ   ¿#Ñ1¿#  ¿# ¿#1  ¿#¿#¿'6Ää¿'G  ¿']¿'e  ¿'l¿'Ç  ¿'6¿'7¿'ƒÄ¯¿'’  ¿'„¿'¸  ¿'ƒ¿'≈¿+©äû¿+∫  ¿+œ¿+Á  ¿+©¿+™¿6KàÄ¿6P    ¿>œäñ¿?  ¿?¿?#  ¿?+¿?:  ¿>œ¿>–¿>÷¿>¯¿>◊¿IÖÅà¿J›ÅF/// Begins a new batch edit, within which new updates made to the text editing
/// value will not be sent to the platform text input plugin.
///
/// Batch edits nest. When the outermost batch edit finishes, [endBatchEdit]
/// will attempt to send [currentTextEditingValue] to the text input plugin if
/// it detected a change.   ¿KÅ÷¿LÄÒ/// Ends the current batch edit started by the last call to [beginBatchEdit],
/// and send [currentTextEditingValue] to the text input plugin if needed.
///
/// Throws an error in debug mode if this [EditableText] is not in a batch
/// edit.   ¿LÎÅa¿L    ¿Q@á]¿QO  ¿Qg	¿Qm   ¿Y…Ü/¿YŒ    ¿_¸Å¿`    ¿aÅ¿a
    ¿b7ÄΩ¿b<    ¿dÉ®¿d    ¿gΩÄŒ¿gŒ  ¿g‰¿g˜  ¿h¿h  ¿gΩ¿gæ¿hèÄ˙¿h†   ¿hè¿hê¿jøÄÉ¿jƒ    ¿kFÄâ¿kK    ¿k”Çâ¿moÅà/// Express interest in interacting with the keyboard.
///
/// If this control is already attached to the keyboard, this function will
/// request that the keyboard become visible. Otherwise, this function will
/// ask the focus system that it become focused. If successful in acquiring
/// focus, the control will then attach to the keyboard and request that the
/// keyboard become visible.   ¿n`Å¿ne    ¿prÅ¿pw  ¿pô!¿p®   ¿qyÉÖ¿q~  ¿qß!¿q∂   ¿uÉm¿u  ¿u(¿u<   ¿xsÇä¿xx    ¿{/å0¿{4  ¿{O¿{c   ¿ácÇÄ¿áh  ¿á}¿áÉ   ¿âÁÑ¿â¸    ¿çÚâù¿é$  ¿é<¿éK  ¿éU¿ém  ¿çÚ¿çÛ¿ç˘¿é¿ç˙¿òóåÿ¿òú  ¿ò∏¿ò«   ¿•òÇƒ¿•©   ¿•ò¿•ô¿®`É˝¿®m  ¿®Ä¿®é   ¿¨aãc¿¨ì  ¿¨¶¿¨∏  ¿¨æ¿¨÷  ¿¨›¿¨„  ¿¨a¿¨b¿¨h¿¨ä¿¨i¿¨Ù¿∑»ÉQ¿∑Õ  ¿∑Ï¿∑˚  ¿∏¿∏  ¿∏$¿∏<   ¿ªÅv¿ª"    ¿¿ÇÜ¿¿    ¿¬åÉô¿¬ë    ¿∆)Åû¿∆.  ¿∆A¿∆G  ¿∆W¿«ÀÄÆ¿«–    ¿»}ÉŒ¿»Ç    ¿ÃOÉ"¿ÃT    ¿œuÇí¿œÑ    ¿“Åâ¿“  ¿“#¿“*   ¿”ÙÄ⁄¿”˘    ¿‘“Ås¿‘◊  ¿‘¸¿’   ¿÷qãP¿÷v  ¿÷ç¿÷ì  ¿÷ö¿„Ç¿„    ¿ÁîÅá¿Áô    ¿Î0É◊¿ÎA  ¿Î\¿În  ¿Ît¿Îå  ¿Î0¿Î1¿ÔÅ?¿Ô  ¿Ô*¿Ô8  ¿Ô¿Ô¿NÖY¿ÒAÄŸ/// Shows the selection toolbar at the location of the current cursor.
///
/// Returns `false` if a toolbar couldn't be shown, such as when the toolbar
/// is already shown, or when no text selection currently exists.  ¿Ò0¿Ò1¿ı´Å±¿ıº  ¿ı…¿ıœ  ¿ı´¿ı¨¿ı‹¿˜`Å8¿˜í*/// Toggles the visibility of the toolbar. ¿˜°¿˜ß  ¿˜¥¿¯úÖl¿˘p/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace.   ¿˛Ç~¿ˇpÅN/// Shows the magnifier at the position given by `positionToShow`,
/// if there is no magnifier visible.
///
/// Updates the magnifier to the position given by `positionToShow`,
/// if there is a magnifier visible.
///
/// Does nothing if a magnifier couldn't be shown, such as when the selection
/// overlay does not currently exist. ¿ˇ~¿ˇÜ   ¿ éÄ·¿ ø)/// Hides the magnifier if it is visible.   ¿ÇÅ!¿ì  ¿©	¿Ø  ¿Ç¿É¿ßÄø¿∏   ¿ß¿®¿jÅ;¿{  ¿ã¿ì  ¿j¿k¿¬O¿”  ¿‹¿Ó  ¿¬¿√¿hÄ§¿y  ¿ñ	¿õ  ¿°¿¶  ¿h¿i¿Å©¿  ¿/¿G   ¿ΩÅ£¿À  ¿€¿Û   ¿dÅÍ¿r  ¿Ñ¿ú   ¿Çd¿  ¿2¿@  ¿G¿M  ¿U¿c   ¿/ÜH¿<  ¿P¿^  ¿e¿k  ¿s¿Å   ¿Œ{¿€    ¿LÄÄ¿Y    ¿œe¿‹    ¿7D¿D    ¿~B¿ã    ¿ƒÄù¿Œ ¿ﬂ¿ﬂ¿Ò¿¸   ¿ eÖ-¿!ÑÅ/// Transpose the characters immediately before and after the current
/// collapsed selection.
///
/// When the cursor is at the end of the text, transposes the last two
/// characters, if they exist.
///
/// When the cursor is at the start of the text, does nothing. ¿!ô ¿!¥   ¿&-Çw¿&2  ¿&?¿&R   ¿)èÄÎ¿)î  ¿)Æ%¿)Œ   ¿*~Ñ¿*ﬁV/// Handles [ScrollIntent] by scrolling the [Scrollable] inside of
/// [EditableText]. ¿*Ê¿*Ù   ¿.ôàH¿/	f/// Extend the selection down by page if the `forward` parameter is true, or
/// up by page otherwise. ¿/ "¿/=   ¿6ÂÇœ¿6Í  ¿6˚¿7   ¿;Ä–¿;  ¿;#¿;2   ¿;⁄ÑÌ¿<sÄç/// The default behavior used if [onTapOutside] is null.
///
/// The `event` argument is the [PointerDownEvent] that caused the notification. ¿<à¿<ö   ¿O√°Å¿O÷  ¿O‹¿OÍ  ¿O√¿Oƒ¿qHå¿rÄ¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined.
/// Descendants can override this method to customize appearance of text.    ¿}gñí¿}m  ¿}†Ö ¿}†¿}© '¿}∞	¿}∑  ¿}ø¿}Œ  ¿}›¿}Ï  ¿}ˆ"¿~  ¿~ ¿~-  ¿~D¿~J  ¿~Z¿~`  ¿~z¿~â  ¿~ò¿~ß  ¿~µ¿~ƒ  ¿~—¿~◊  ¿~Ó¿~˝  ¿¿  ¿,¿;  ¿H¿N  ¿[¿j  ¿v¿|  ¿ã¿ë  ¿§¿≥  ¿¬¿—  ¿ﬂ¿Ó  ¿Ä ¿Ä  ¿Ä ¿Ä   ¿Ä7¿ÄF  ¿ÄV¿Äe  ¿Äp#¿Äv  ¿Äô¿Ä®  ¿Ä∏¿Äæ  ¿Äœ¿Ä’  ¿ÄÊ¿Äı  ¿Å"¿Å  ¿Å.3¿Å4  ¿Åg1¿Åm  ¿Åû&¿Å§  ¿Å #¿ÅŸ  ¿ÅÛ¿Ç  ¿Ç¿Ç  ¿Ç1¿Ç7  ¿ÇK¿ÇZ  ¿Äé¿ÅJ¿ÅL¿ÅM¿Å[¿Å\¿ÅÇ¿ÅÑ¿ÅÖ¿Åí¿Åì¿Å¿¿Çn¿Çs¿Ç∂¿Ç|¿Çt¿Ç~¿Çà¿Çâ¿Çû¿Çµ¿Çü¿Ç´&¿Çº¿ÇÕ  ¿Ç€¿ÇÚ  ¿Ç˚¿É  ¿É$¿É'  ¿É?"¿ÉO  ¿Ée"¿Ér  ¿Éã$¿É•  ¿É≥¿Éæ  ¿ÉÀ¿É÷  ¿É‚¿ÉÌ  ¿É˘¿Ñ  ¿Ñ¿Ñ  ¿Ñ'¿Ñ2  ¿Ñ=¿ÑO  ¿Ñ]¿Ñj  ¿Ñ|¿Ñç  ¿Ñõ¿Ñ´  ¿Ñ∏!¿ÑÃ  ¿Ñ›¿ÑÎ  ¿Ñı¿Ö  ¿Ö¿Ö#  ¿Ö2,¿ÖL  ¿Öb#¿Öw  ¿Öâ¿Öû  ¿Ö®!¿Ö≥  ¿ÖÕ¿Ö⁄  ¿ÖÈ¿Ö˜  ¿Ü¿Ü  ¿Ü%¿Ü2  ¿ÜB¿ÜM  ¿Üe,¿Ü}  ¿Üï*¿Ü¨  ¿Ü√%¿ÜŒ  ¿ÜÏ1¿á  ¿á!¿á.  ¿áB ¿áS  ¿áf¿ás  ¿áÜ¿áë   ¿á¢Ü ¿áΩ  ¿á–¿áﬁ  ¿á¢¿á£¿ç¶ÜQ¿ç∑  ¿ç ¿çÿ  ¿ç‡¿ç  ¿ç¶¿çß ¿ì˚Öz¿î  ¿î#Å/ ¿î)¿î: 	¿îA¿îP  ¿î_¿în  ¿î|¿îã  ¿îù¿î¨  ¿îª ¿î   ¿î·¿î  ¿î˚¿ï
  ¿ï¿ï)  ¿ï9¿ïH   	¿ïV¿ïf  ¿ïs!¿ïá  ¿ïò¿ï©  ¿ï∑,¿ï—  ¿ïÁ¿ïı  ¿ïˇ¿ñ  ¿ñ¿ñ)  ¿ñ8¿ñC  ¿ñK¿ñ\   ¿ñkÉ¿ñ|  ¿ñÑ¿ñó   ¿ì˚¿ì¸¿ôwÅ’¿ô}  ¿ô´Ä∏ ¿ô±¿ô√ ¿ô ¿ôŸ  ¿ô„¿ôÚ  ¿ö ¿ö  ¿ö"¿ö.  ¿öG¿öV   ¿ög¿öt  ¿ö}¿öç  ¿öö¿ö™  ¿öπ'¿öÃ  ¿ö‰¿öÔ   ¿ö˚O¿õ   ¿ö˚¿ö¸ ¿õNâ¿õT  ¿õ¨V ¿õ¨¿õ√  
¿õ⁄¿õ«¿õ‹¿õı¿õÛ¿õ›¿õˆ¿õ˜¿õˇ¿ú ¿ûË%¿ûÛ ¿ü¿ü¿ü  ¿ûuo¿ûâ    ¿ü5?¿üL   ¿ü5¿ü6¿¢´ÅW¿¢¿   ¿¢´¿¢¨¿úÄõ¿ú   ¿ú¿ú¿ú•ÅW¿ú∂  ¿ú∆¿ú⁄  ¿ú•¿ú¶¿û q¿û   ¿û ¿û¿üxÄÿ¿üâ  ¿üô¿ü°  ¿üx¿üy¿†TÇS¿†e  ¿†v	¿†|  ¿†T¿†U¿§M¿§  ¿§¿§-  ¿§¿§ ¿§WÇ∂¿§]  ¿§âT ¿§è¿§£ ¿§™¿§∫  ¿§ƒ¿§”   ¿§·l¿•IZ/// The size of the span, used in place of adding a placeholder size to the [TextPainter].  ¿•RÅπ¿•c  ¿•i¿•~  ¿•å,¿•ò  ¿•æ'¿•‹  ¿•R¿•S¿•§¿•Æ¿•Ø ¿ßàç¿™∑É´/// A text boundary that uses code points as logical boundaries.
///
/// A code point represents a single character. This may be smaller than what is
/// represented by a user-perceived character, or grapheme. For example, a
/// single grapheme (in this case a Unicode extended grapheme cluster) like
/// "üë®‚Äçüë©‚Äçüë¶" consists of five code points: the man emoji, a zero
/// width joiner, the woman emoji, another zero width joiner, and the boy emoji.
/// The [String] has a length of eight because each emoji consists of two code
/// units.
///
/// Code units are the units by which Dart's String class is measured, which is
/// encoded in UTF-16.
///
/// See also:
///
///  * [String.runes], which deals with code points like this class.
///  * [String.characters], which deals with graphemes.
///  * [CharacterBoundary], which is a [TextBoundary] like this class, but whose
///    boundaries are graphemes instead of code points. ¿™„% ¿™È¿™˚ ¿™¸
¿´   ¿´¿´   ¿´tÅ ¿´y  ¿´é¿´ì   ¿¨xÅÉ¿¨â  ¿¨¢¿¨ß  ¿¨x¿¨y¿≠ˇÅõ¿Æ  ¿Æ*¿Æ/  ¿≠ˇ¿Æ  ¿ØÔäz¿Øı ¿∞&¿∞¿∞LM ¿∞L¿∞] ¿∞^
¿∞d  ¿∞j¿∞p  ¿∞Ä¿∞Ü   ¿∞ù¿∞µ  ¿∞æ-¿∞‹  ¿∞Ô+¿±  ¿∫a¿∫   ¿∫¿∫¿±Çã¿±$  ¿±>¿±Q   ¿≥ÆÜT¿≥¬  ¿≥…¿≥Ã  ¿≥‘¿≥„  ¿≥Æ¿≥Ø ¿∫ké\¿∫q ¿∫å(¿∫å¿∫”Ä” ¿∫”¿∫Ì ¿∫Û
¿∫˘  ¿ª¿ª	  ¿ª¿ª#  ¿ª;)¿ªJ  ¿ªj¿ªp  ¿ªÖ¿ªã  ¿ªz¿ªö¿ª™¿ª¬  ¿ªÀ&¿ª÷  ¿ªı¿º   ¿º¿º  ¿º(-¿ºF  ¿ºY*¿ºr  ¿ºà'¿ºô ¿º≠¿»~G¿»ì   ¿»~¿»¿ΩÅz¿Ω  ¿Ω1¿Ω?   ¿æÙÅ@¿æ˘  ¿ø¿ø   ¿¿8àB¿¿L  ¿¿S¿¿V  ¿¿^¿¿m  ¿¿8¿¿9 ¿»…âÓ¿»œ ¿»Ù(¿»Ù¿…;1 ¿…;¿…_ ¿…`
¿…f   ¿…p¿…à  ¿…í.¿…¨  ¿…ƒ¿…”  ¿“nG¿“É   ¿“n¿“o¿…ÂÇ»¿…Í    ¿Ã±Öπ¿Ã¬  ¿Ã…¿ÃÃ  ¿Ã‘¿Ã„  ¿Ã±¿Ã≤ ¿“πÅ¸¿“ø  ¿“ˇ ¿“ˇ¿” ¿”
¿”   ¿” ¿”8  ¿‘mF¿‘Ç   ¿‘m¿‘n¿”BÅ'¿”V  ¿”]¿”r  ¿”z¿”â  ¿”B¿”C ¿‘∑ÅÁ¿‘Ω  ¿’! ¿’¿’ ¿’
¿’    ¿’*¿’B  ¿÷.n¿÷C   ¿÷.¿÷/¿’LÄﬁ¿’]  ¿’d¿’}  ¿’Ö¿’î  ¿’L¿’M ¿÷†Å¶¿◊zÄ”/// A [ClipboardStatusNotifier] whose [value] is hardcoded to
/// [ClipboardStatus.pasteable].
///
/// Useful to avoid showing a permission dialog on web, which happens when
/// [Clipboard.hasStrings] is called.  ¿◊∫=¿◊÷ ¿◊∫¿◊ª¿◊ﬁ¿◊Ì¿◊Ó ¿◊¸H¿ÿ   ¿◊¸¿◊˝        áæÄ›à;t/// Signature for the callback that reports when the user changes the selection
/// (including the cursor location).  àdàs  à}àï   àùÄ©àÚL/// Signature for the callback that reports the app private command results.  ââ$  â+âA   âHÅ_ä4Ä„/// Signature for a widget builder that builds a context menu for the given
/// [EditableTextState].
///
/// See also:
///
///  * [SelectableRegionContextMenuBuilder], which performs the same role for
///    [SelectableRegion].  ähäv  äÄ#äì   ã1Uã9   ãd   ãr   ãx     åIDåX åråzåååáå{åâç0ç ç1ç5ÅGç‚Äô/// The default mime types to be used when allowedMimeTypes is not provided.
///
/// The default value supports inserting images of any supported format.éé{ééééé!é0é?éOé^én  óµ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇıÉ
É1É_É|ÉóÉ∂ÉœÉÏÑÑ ÑEÑiÑäÑ≠ÑŸÑ˜ÖÖ0ÖRÖkÖóÖ≤ÖÃÖ‡ÜÜ"ÜPÜoÜãÜüÜ∫ÜªáiájáÇá†áΩáæàà3àúàùàÍâGâHâîâ≠â±âøâ√ää,äfä~ä•ä®ä©äˆã1ãáãàãœååIåèåêå€çç4ç5çÇçÜçœééé.é=éMé\élé{é~éé¬è)èXènèoè{èµè¯è¸êêcêòê—ëë6ë:ë<ë=ëwëºëΩëÏííí.íGífííîí≥í—í˚ììììì*ìdìwìƒì ìÏììÚìÛî î$îcî≤ïïOï\ï`ï¨ïÌïÒñBñèñ”ñ◊ó%ónóæòòUò°òÏô+ôpôtô¬öö%ö)öwö¡ö≈öŸõ%õpõîõòõÙúúúúúkúíú‹ùùºûûTûZûßûµûªüüQü¢üÒ†>†V†\†™†»†Œ†‰°2°°†°¶¢¢¢@¢ì¢î¢Ó¢Ù£8£X£ì£°£Û§C§î§æ§«§ı§ˆ•$•E•ñ•‰¶1¶o¶u¶≤ß ßMßìßﬂ®
®'®C®X®î®∂®Ω®¡®¬®Œ®˜©©H©ô©Î™™™6™:™;™o™u™∆´´r´…¨¨j¨∂≠≠≠7≠h≠n≠o≠ÿÆÆ/ÆCÆ_ÆüÆ±Æ“Ø
ØØTØ]ØdØhØiØõØ°ØÒ∞∞A∞í∞‡±-±k±q±Æ±ı≤B≤i≤o≤¡≤–≤˛≥L≥è≥ï¥¥Z¥^¥_¥¥Ö¥–µµµYµßµ¯∂6∂G∂ö∂û∂ü∂—∂◊∑%∑p∑~∑Ñ∑’∏#∏t∏≤∏Ãπππ	πLπèπÏππÚπÛ∫!∫%∫s∫¿∫‘∫ÿª,ªªãªòªøªˆª¯ººHºNºëº†º…ΩΩΩΩ6ΩLΩdΩÄΩÜΩáΩ∆Ω˛Ωˇæ-æ3æLæ_æ`æçæìæÂæÎøøøøFøLø†ø¶øøø”ø‘¿ @¿ @¿ @'¿ @?¿ @A¿ @B¿ @ê¿ @î¿ @„¿ A0¿ AS¿ AW¿ Ae¿ Ai¿ Aú¿ A¬¿ B¿ B¿ Bc¿ Bv¿ B|¿ B∏¿ C¿ C#¿ CH¿ Cá¿ C≥¿ C¥¿ D¿ D-¿ D3¿ DÖ¿ Dã¿ D°¿ Dß¿ DÙ¿ E¿ E¿ Eu¿ Eá¿ Eç¿ Eù¿ E£¿ EÌ¿ F.¿ F/¿ FÄ¿ F–¿ Fˆ¿ F¸¿ GL¿ Gw¿ G}¿ GÃ¿ H¿ H.¿ H4¿ H^¿ Hd¿ Hz¿ H»¿ HŒ¿ I6¿ IH¿ IN¿ I^¿ Id¿ IÆ¿ I√¿ IÍ¿ IÏ¿ IÌ¿ J/¿ JA¿ Jk¿ Jñ¿ Jﬁ¿ K¿ K&¿ KJ¿ Kn¿ Kí¿ K∂¿ K⁄¿ K˛¿ L"¿ LF¿ Lk¿ Lp¿ Lq¿ L≤¿ L«¿ L›¿ Lﬂ¿ L‡¿ M¿ Mz¿ MΩ¿ M‚¿ N¿ N'¿ Nc¿ N†¿ N∫¿ N∆¿ N–¿ NÂ¿ O#¿ O$¿ O@¿ OA¿ Oe¿ Of¿ Or¿ Oë¿ Oí¿ Oû¿ O—¿ O“¿ P¿ P<¿ P=¿ PI¿ Pc¿ Pç¿ Pé¿ P›¿ Q'¿ QK¿ Q`¿ Qx¿ QÆ¿ Q¯¿ R¿ R1¿ RV¿ Rc¿ Rã¿ R§¿ R™¿ R´¿ RÙ¿ SB¿ Sk¿ Sü¿ SŸ¿ S˜¿ T¿ T¿ T&¿ T,¿ T-¿ TS¿ TÑ¿ Tà¿ Tä¿ Tã¿ T©¿ T≠¿ T˝¿ UE¿ US¿ UW¿ U°¿ UÏ¿ V&¿ V*¿ VE¿ VI¿ Vô¿ VÍ¿ W4¿ W8¿ W}¿ WÅ¿ W—¿ X¿ X ¿ Xc¿ Xg¿ X|¿ XÄ¿ XÀ¿ Y¿ Y9¿ Y=¿ Yã¿ Y“¿ Z¿ Zk¿ Z∏¿ [¿ [Q¿ [†¿ [∆¿ [ ¿ \¿ \¿ \¿ \g¿ \É¿ \á¿ \”¿ ] ¿ ]K¿ ]O¿ ]ê¿ ]î¿ ]·¿ ^#¿ ^'¿ ^p¿ ^ø¿ ^ˇ¿ _¿ _¿ _d¿ _¥¿ _ÿ¿ _‹¿ `¿ `¿ `f¿ `≥¿ `˜¿ aH¿ aê¿ a‹¿ aÍ¿ aÓ¿ b>¿ bÖ¿ b‘¿ c ¿ c¿ cA¿ cE¿ d2¿ d›¿ eà¿ fc¿ gY¿ g]¿ g¥¿ g∏¿ h¢¿ iå¿ jç¿ kå¿ l—¿ m–¿ n˚¿ p&¿ pÚ¿ pˆ¿ q#¿ q'¿ r¿ r˚¿ sπ¿ th¿ uØ¿ vX¿ w¿ wÊ¿ xì¿ x–¿ x‘¿ xÍ¿ xÓ¿ yU¿ yº¿ zW¿ {"¿ {–¿ |6¿ |Ì¿ |Ò¿ }¿ }¿ }e¿ }≤¿ ~¿ ~P¿ ~†¿ ~¥¿ ~∏¿ ~˚¿ 3¿ 7¿ á¿ ’¿ Ä"¿ Äm¿ ÄΩ¿ ÄÂ¿ ÄÈ¿ Å6¿ Å¿ Å≈¿ Ç¿ Çb¿ Ç≤¿ Ç¿ ÇÙ¿ ÉD¿ Éî¿ É‚¿ Ñ1¿ ÑU¿ Ñh¿ Ñl¿ Ñã¿ Ñè¿ Ñﬁ¿ Ö+¿ ÖV¿ ÖZ¿ Ö™¿ Ö˘¿ ÜG¿ Ür¿ Üv¿ Üµ¿ Ü‡¿ Ü‰¿ á3¿ á~¿ áÇ¿ á…¿ à¿ àI¿ às¿ àÜ¿ àä¿ à™¿ àÆ¿ à˝¿ âC¿ âì¿ â‚¿ ä¿ ä¿ äQ¿ äÑ¿ äà¿ ä√¿ ä«¿ ã¿ ãR¿ ãr¿ ãv¿ ãº¿ å	¿ åT¿ åû¿ åÈ¿ ç1¿ ç5¿ çA¿ çc¿ çÉ¿ ç–¿ çÿ¿ çﬁ¿ çÊ¿ çÍ¿ ç˝¿ é¿ é¿ é¿ éb¿ é†¿ éÃ¿ éˆ¿ é¸¿ èJ¿ èö¿ è⁄¿ è‡¿ ê/¿ êÄ¿ êΩ¿ ë¿ ë¿ ë]¿ ëë¿ ë¢¿ ë±¿ ëœ¿ ëÏ¿ í¿ í*¿ íH¿ íe¿ íã¿ í±¿ í‘¿ íÌ¿ ì	¿ ì(¿ ìQ¿ ìw¿ ìè¿ ì†¿ ì±¿ ì“¿ îA¿ î}¿ îÉ¿ îù¿ î≤¿ î…¿ î‹¿ îˆ¿ ï¿ ï.¿ ï_¿ ï{¿ ïë¿ ï∏¿ ï—¿ ïÌ¿ ñ¿ ñ(¿ ñ_¿ ñs¿ ñè¿ ñ•¿ ñ√¿ ñ‡¿ ó¿ ó#¿ ó:¿ ói¿ ó¿ ó®¿ óƒ¿ ó€¿ óÚ¿ ò¿ ò1¿ òX¿ òë¿ ò»¿ ò˝¿ ô-¿ ôc¿ ôâ¿ ô§¿ ôº¿ ô‚¿ ôÛ¿ ö¿ öY¿ ö_¿ öÉ¿ öÆ¿ ö«¿ öÓ¿ õ¿ õ¿ õ@¿ õo¿ õó¿ õ¥¿ õ÷¿ ú¿ ú6¿ úe¿ ú’¿ ùE¿ ùv¿ ùÖ¿ ù“¿ û¿ û¿ û¿ û\¿ û°¿ û´¿ ü¿ ü`¿ üÓ¿ †¿ †!¿ †v¿ †ì¿ †Ω¿ †Î¿ °¿ °>¿ °b¿ °z¿ °ï¿ °ƒ¿ °Ô¿ ¢¿ ¢:¿ ¢Q¿ ¢¿ ¢™¿ ¢Õ¿ ¢Ô¿ £¿ £;¿ £U¿ £d¿ £ë¿ £‚¿ §!¿ §å¿ §ñ¿ §∑¿ •#¿ •J¿ •m¿ •≠¿ •˛¿ ¶¿ ¶+¿ ¶X¿ ¶Y¿ ¶¿ ¶©¿ ¶™¿ ¶·¿ ¶˛¿ ¶ˇ¿ ßA¿ ßÉ¿ ßâ¿ ß∞¿ ß∂¿ ßÈ¿ ß˛¿ ®!¿ ®"¿ ®]¿ ®†¿ ®¶¿ ®Ô¿ ©;¿ ©ã¿ ©û¿ ©§¿ ©Ω¿ ©“¿ ©Ï¿ ©Ì¿ ™¿ ™G¿ ™H¿ ™É¿ ™™¿ ™´¿ ™„¿ ´
¿ ´¿ ´L¿ ´ó¿ ´ù¿ ´∂¿ ´À¿ ´‚¿ ´„¿ ¨1¿ ¨7¿ ¨Ö¿ ¨∂¿ ¨º¿ ¨‘¿ ¨⁄¿ ¨Í¿ ¨¿ ≠9¿ ≠Q¿ ≠R¿ ≠z¿ ≠Ä¿ ≠–¿ Æ¿ Æl¿ Æî¿ Æª¿ Æº¿ ÆÂ¿ ÆÎ¿ Ø7¿ Øá¿ ØÆ¿ Ø¥¿ Øƒ¿ Ø ¿ ∞¿ ∞1¿ ∞2¿ ∞l¿ ∞ä¿ ∞ê¿ ∞‚¿ ∞˜¿ ∞˝¿ ±¿ ±¿ ±l¿ ±Ö¿ ±Ü¿ ±¡¿ ±È¿ ±Ô¿ ≤¿ ≤¿ ≤6¿ ≤7¿ ≤~¿ ≤ß¿ ≤®¿ ≤Ô¿ ≥¿ ≥¿ ≥b¿ ≥Ç¿ ≥É¿ ≥∂¿ ≥œ¿ ≥–¿ ¥¿ ¥¿ ¥Z¿ ¥â¿ ¥ä¿ ¥ƒ¿ ¥¯¿ ¥˛¿ µE¿ µà¿ µÃ¿ ∂¿ ∂b¿ ∂h¿ ∂¥¿ ∂˝¿ ∑I¿ ∑X¿ ∑^¿ ∑©¿ ∑Ï¿ ∑Ú¿ ∏[¿ ∏Ø¿ ∏ƒ¿ ∏ ¿ π¿ πo¿ π±¿ πœ¿ πÓ¿ ∫4¿ ∫:¿ ∫n¿ ∫r¿ ∫ì¿ ∫î¿ ∫Õ¿ ª ¿ ª¿ ª+¿ ª@¿ ª]¿ ª^¿ ªõ¿ ª¡¿ ª«¿ º¿ º3¿ º9¿ ºá¿ º‘¿ Ω"¿ Ωk¿ Ωª¿ ΩÀ¿ Ω—¿ æ	¿ æ¿ æD¿ æE¿ æá¿ æŒ¿ æË¿ æÓ¿ ø8¿ øm¿ øs¿ ø†¿ ø¶¿ ø∂¿ øº¿ ¿¿ ¿¿ ¿)¿ ¿X¿ ¿Y¿ ¿ô¿ ¿—¿ ¿◊¿ ¡¿ ¡p¿ ¡v¿ ¡Æ¿ ¡∆¿ ¡«¿ ¬¿ ¬L¿ ¬h¿ ¬n¿ ¬¶¿ ¬¨¿ ¬˝¿ √¿ √"¿ √s¿ √¥¿ √…¿ √ÿ¿ √˜¿ ƒd¿ ƒû¿ ƒ¢¿ ƒ√¿ ƒƒ¿ ƒ˚¿ ≈¿ ≈¿ ≈M¿ ≈h¿ ≈i¿ ≈ß¿ ≈≠¿ ≈Ó¿ ∆>¿ ∆ó¿ ∆•¿ ∆´¿ ∆Ë¿ ∆Ó¿ «3¿ «_¿ «`¿ «±¿ «‹¿ «‚¿ »'¿ »-¿ »=¿ »C¿ »í¿ »¶¿ »À¿ »Ã¿ …¿ …R¿ …X¿ …®¿ …€¿ …·¿  +¿  G¿  M¿  õ¿  ‚¿ À3¿ À[¿ Àa¿ À≤¿ Ã¿ ÃT¿ Ãê¿ Ãñ¿ ÃÂ¿ Õ2¿ Õb¿ Õh¿ Õ¥¿ Õ¬¿ Õ⁄¿ Õ‰¿ ÕÍ¿ Œ9¿ Œâ¿ Œ ¿ Œÿ¿ Œ˛¿ œ¿ œ¿ œY¿ œö¿ œ®¿ œÀ¿ œ’¿ œ€¿ –*¿ –W¿ –e¿ –ï¿ –ü¿ –•¿ –µ¿ –ª¿ — ¿ —¿ —f¿ —{¿ —í¿ —ì¿ —À¿ “¿ “!¿ “q¿ “§¿ “™¿ “¸¿ ”N¿ ”T¿ ”™¿ ”∞¿ ‘¿ ‘L¿ ‘^¿ ‘d¿ ‘µ¿ ’¿ ’$¿ ’*¿ ’Ñ¿ ’’¿ ’Ô¿ ’ı¿ ÷@¿ ÷d¿ ÷r¿ ÷è¿ ÷ô¿ ÷ü¿ ÷Ì¿ ◊>¿ ◊W¿ ◊e¿ ◊î¿ ◊û¿ ◊§¿ ◊º¿ ◊¬¿ ◊“¿ ◊ÿ¿ ÿ%¿ ÿp¿ ÿå¿ ÿ°¿ ÿÚ¿ Ÿ¿ Ÿ¿ Ÿ¿ ŸV¿ Ÿõ¿ Ÿ°¿ ŸË¿ ⁄$¿ ⁄*¿ ⁄v¿ ⁄ö¿ ⁄†¿ ⁄π¿ ⁄ø¿ €¿ €W¿ €]¿ €ê¿ €û¿ €¥¿ €Ì¿ €ı¿ €ˇ¿ ‹¿ ‹*¿ ‹+¿ ‹d¿ ‹±¿ ‹¿¿ ‹∆¿ ›¿ ›f¿ ›l¿ ›Ö¿ ›ö¿ ›Ì¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁR¿ ﬁX¿ ﬁ¶¿ ﬁ≈¿ ﬁÀ¿ ﬂ¿ ﬂ\¿ ﬂß¿ ﬂ∆¿ ﬂ«¿ ‡¿ ‡I¿ ‡O¿ ‡ü¿ ‡Ò¿ ·4¿ ·Å¿ ·ƒ¿ ·Ÿ¿ ·ﬂ¿ ·Ô¿ ·ı¿ ‚F¿ ‚í¿ ‚•¿ ‚ı¿ „D¿ „z¿ „¨¿ „≠¿ „È¿ ‰!¿ ‰'¿ ‰g¿ ‰í¿ ‰ß¿ ‰À¿ ‰Ã¿ Â¿ Â5¿ Â6¿ Âo¿ Â∞¿ ÂÊ¿ ÂÏ¿ Ê1¿ Êx¿ Êº¿ Êﬂ¿ ÊÂ¿ Á*¿ Áo¿ Áö¿ Á†¿ Á¿ Ë@¿ Ëè¿ Ëï¿ Ë´¿ Ë˘¿ È@¿ ÈF¿ È•¿ È∑¿ ÈÃ¿ È“¿ Í¿ ÍA¿ Íd¿ Í≥¿ Íˇ¿ ÎJ¿ Îx¿ Î~¿ Î¡¿ Ï¿ ÏN¿ Ïû¿ ÏÌ¿ Ì¿ Ì)¿ Ì/¿ Ì?¿ ÌE¿ ÌÖ¿ ÌÀ¿ Ó¿ ÓN¿ Óú¿ Óﬂ¿ Ô¿ Ô	¿ ÔJ¿ Ôù¿ Ôº¿ Ô¬¿ ¿ 7¿ =¿ å¿ ‹¿ ¯¿ ˛¿ ÒN¿ Òù¿ ÒË¿ Ú¿ Ú"¿ Út¿ Úâ¿ Ú≤¿ Ú≥¿ ÚÓ¿ Û>¿ ÛK¿ ÛQ¿ Ûõ¿ ÛÈ¿ Ù/¿ Ù5¿ ÙF¿ Ùï¿ Ùõ¿ Ù©¿ ÙÔ¿ Ù˘¿ Ùˇ¿ ıM¿ ıó¿ ıË¿ ˆ¿ ˆ"¿ ˆM¿ ˆN¿ ˆë¿ ˆÿ¿ ˆﬁ¿ ˜)¿ ˜9¿ ˜?¿ ˜é¿ ˜≈¿ ˜À¿ ˜€¿ ¯è¿ ¯ﬂ¿ ˘¿ ˘ù¿ ˘Ì¿ ˙¿ ˙0¿ ˙h¿ ˙i¿ ˙´¿ ˙˙¿ ˚¿ ˚ ¿ ˚V¿ ˚W¿ ˚ü¿ ˚Œ¿ ˚œ¿ ¸¿ ¸R¿ ¸X¿ ¸§¿ ¸“¿ ¸ÿ¿ ¸Ë¿ ¸Ó¿ ˝;¿ ˝Ü¿ ˝õ¿ ˝≥¿ ˝¥¿ ˝¿ ˛?¿ ˛e¿ ˛k¿ ˛º¿ ˇ¿ ˇX¿ ˇ¶¿ ˇˆ¿ (¿ .¿ ¿  ¿¿d¿¥¿–¿÷¿'¿r¿æ¿˛¿¿¿/¿{¿À¿¿¿^¿â¿è¿Ë¿˙¿ ¿¿¿S¿|¿}¿º¿ˆ¿¸¿J¿õ¿Ê¿7¿h¿n¿~¿Ñ¿“¿¿*¿]¿^¿™¿∏¿æ¿	¿	¿	]¿	≠¿	¸¿
¿
:¿
;¿
Ñ¿
«¿
Õ¿¿d¿™¿∞¿ˇ¿P¿†¿»¿Œ¿¿R¿X¿Å¿á¿ó¿ù¿Â¿8¿Y¿~¿¿∫¿ﬁ¿‰¿˚¿¿I¿ñ¿‚¿2¿R¿g¿É¿Ñ¿¿¿„¿È¿<¿Q¿o¿p¿¨¿„¿È¿¿*¿H¿I¿é¿€¿˚¿¿Q¿u¿ä¿Æ¿Ø¿Î¿	¿
¿N¿q¿r¿º¿¬¿¿1¿2¿|¿Ç¿¿¿Ó¿Ô¿¿¿N¿T¿z¿°¿¢¿ﬂ¿B¿H¿¨¿‡¿N¿ƒ¿ ¿Ú¿¿)¿*¿t¿∏¿Œ¿‘¿¿W¿ñ¿ú¿ﬂ¿%¿N¿T¿l¿Å¿™¿´¿¯¿G¿_¿e¿µ¿Ÿ¿ﬂ¿ ¿P¿Q¿ç¿∫¿ª¿˚¿D¿J¿Ö¿ã¿Æ¿√¿Ô¿¿-¿s¿y¿√¿…¿È¿˛¿ ¿ O¿ ö¿ ±¿ ◊¿ ÿ¿!¿![¿!a¿!Ä¿!Ü¿!û¿!≥¿!—¿!“¿"¿">¿"D¿"|¿"•¿"∫¿"ı¿"ˆ¿#3¿#Ö¿#ó¿#ù¿#Ï¿$;¿$~¿$Ã¿$˝¿%¿%Q¿%z¿%Ä¿%°¿%ß¿% ¿%–¿&¿&Q¿&W¿&u¿&˜¿'I¿'û¿'Ù¿(D¿(Å¿(á¿(™¿(∞¿) ¿)Q¿)ù¿)æ¿)ƒ¿*¿*¿*_¿*©¿*Ø¿*¸¿+L¿+ò¿+Ê¿,4¿,Ñ¿,ä¿,ÿ¿-%¿-s¿-√¿.¿.%¿.+¿.v¿.≈¿/¿/¿/^¿/y¿/¿/Õ¿0¿0i¿0∑¿0˝¿1k¿1q¿1Ü¿1 ¿1Û¿1Ù¿2C¿2I¿2ê¿2‘¿2¸¿2˝¿33¿39¿3\¿3w¿3x¿3∫¿3–¿3÷¿4!¿4f¿4l¿4∑¿5¿5	¿5Q¿5ñ¿5–¿5÷¿5Ê¿5Ï¿69¿6K¿6j¿6k¿6£¿6Ó¿6Ù¿7A¿7Ö¿7ö¿7†¿7Â¿84¿8x¿8ê¿8ñ¿8‡¿9/¿9=¿9e¿9f¿9ª¿9Á¿9Ë¿:5¿:Ñ¿:í¿:ò¿:Á¿;:¿;j¿;p¿;¬¿<¿<I¿<O¿<e¿<k¿<∏¿<À¿<—¿=9¿=K¿=Q¿=ñ¿=‹¿>*¿>Q¿>W¿>§¿>Ù¿?¿?'¿?m¿?n¿?∞¿?Ù¿?˙¿@J¿@ï¿@‚¿A1¿A7¿Ax¿A~¿Aø¿B¿BY¿B_¿B∞¿B·¿BÁ¿C3¿CZ¿C`¿CØ¿C˙¿D ¿DP¿DÇ¿Dà¿Dÿ¿E'¿Et¿EÉ¿Eâ¿Eü¿EÔ¿F6¿F<¿F†¿F≤¿F∏¿FŒ¿G¿G;¿GA¿G•¿G∑¿GΩ¿GÕ¿H¿Hk¿H~¿HÃ¿I¿I(¿Iw¿Iæ¿I”¿J¿J¿JW¿Jù¿J£¿JÚ¿K.¿K4¿K~¿KŒ¿L¿L¿Ll¿LÅ¿Lª¿Lº¿M
¿M¿M¿ML¿Má¿Mà¿MÁ¿MË¿N4¿Ns¿Ny¿N…¿N·¿NÁ¿N˜¿N˝¿OA¿O¿OÕ¿P¿P`¿Pï¿P…¿Q¿Qe¿Q£¿Qÿ¿R¿R)¿RS¿RÅ¿R¨¿R⁄¿S¿S6¿S=¿Së¿Sí¿S¿¿T	¿TX¿T•¿Tµ¿T∂¿T˝¿UZ¿U[¿Uí¿U≠¿UŒ¿UÏ¿V¿V&¿VB¿Vc¿VÇ¿V∞¿VΩ¿V⁄¿V˚¿W¿WJ¿WW¿Wê¿W±¿W—¿X ¿X¿X.¿XO¿Xs¿X¶¿X≥¿X—¿XÚ¿Y¿YC¿YP¿Yq¿Yí¿Y∂¿YÈ¿Yˆ¿Z0¿ZQ¿Zq¿Z†¿Z≠¿Z∑¿ZΩ¿Zæ¿ZÈ¿[¿[>¿[b¿[ï¿[ü¿[•¿[¶¿[√¿[«¿[»¿\¿\=¿\k¿\á¿\é¿\»¿]¿]¿]¿]P¿]Q¿]¢¿]ı¿^G¿^õ¿^¢¿^Û¿_D¿_{¿_é¿_µ¿_÷¿_˘¿`P¿`å¿`È¿a&¿ab¿a∏¿aˆ¿b1¿bs¿b≠¿c
¿cg¿cƒ¿c˘¿dV¿d≥¿dÔ¿e+¿eà¿e∆¿f#¿f\¿fó¿f⁄¿g7¿gî¿g‘¿h1¿hj¿hw¿hx¿h∆¿hÏ¿i¿i¿i>¿ic¿iÜ¿i´¿iº¿iƒ¿i ¿iÀ¿i‰¿j
¿j¿j¿jd¿j£¿jÍ¿k*¿ka¿kõ¿k◊¿l¿lJ¿lÄ¿l«¿m¿mU¿mú¿m€¿n¿nX¿në¿nŒ¿o¿oJ¿oÇ¿o∑¿o¸¿p-¿pa¿pè¿p¬¿pı¿q1¿qi¿qû¿qÕ¿r¿r7¿rm¿r£¿r÷¿s¿sG¿sz¿s™¿sÎ¿t4¿tÄ¿t∑¿t˛¿uE¿uå¿u”¿v¿v_¿v•¿v‰¿w¿wb¿w®¿wÈ¿x-¿xm¿x≥¿x˘¿y<¿yî¿y“¿yˇ¿z2¿z9¿z:¿z}¿zÅ¿zÇ¿zé¿z»¿z…¿z’¿{¿{E¿{ü¿{Î¿|K¿|•¿}¿}´¿~R¿~Ω¿~Ë¿A¿¶¿˝¿Ä`¿Ä®¿ÄÛ¿ÅK¿Åß¿Ç¿ÇÜ¿ÇÚ¿Éa¿É‹¿ÑC¿Ñ∆¿ÖC¿Öπ¿ÜC¿áE¿áI¿áK¿áL¿ál¿àU¿àl¿à¶¿àÔ¿â¿â*¿â.¿âk¿âœ¿â–¿ä#¿äQ¿äR¿äÅ¿ä∫¿ã¿ã\¿ã©¿ãÌ¿å¿å6¿å7¿åm¿ås¿åÉ¿å”¿ç¿çD¿çE¿çr¿çΩ¿çæ¿çÈ¿é)¿é|¿é≥¿é¥¿éˇ¿è ¿è0¿è_¿è⁄¿è€¿ê¿êE¿êz¿ê{¿êô¿êö¿ê«¿ê”¿ë¿ë¿ëh¿ëi¿ë¢¿ëª¿ëº¿í¿í	¿íN¿íä¿íê¿í†¿íÓ¿ì¿ìV¿ìW¿ìÑ¿ìä¿ì€¿ìÒ¿î=¿î>¿î|¿îÇ¿î…¿ï¿ïh¿ïê¿ïë¿ñ¿ñ¿ñs¿ñ¡¿ñ¬¿ó¿óX¿óY¿ó®¿ó∂¿óº¿ò
¿òW¿ò]¿ò®¿òÚ¿ò¯¿ô¿ô<¿ô^¿ôò¿ôﬂ¿ô‡¿ö+¿öh¿ö∏¿öπ¿ö¿öÒ¿õ¿õ¿õ¿õV¿õW¿õr¿õÁ¿ú$¿ú(¿ú)¿ú5¿úM¿úë¿ú‰¿úÍ¿ù¿ù%¿ùY¿ù]¿ù^¿ùj¿ùÉ¿ù«¿û¿û¿û,¿û`¿ûd¿ûe¿ûq¿ûã¿ûœ¿ü¿ü¿ü/¿üp¿üt¿üu¿üÅ¿üü¿ü„¿†c¿†i¿†j¿†ï¿†±¿†◊¿†Î¿†Ò¿†Ú¿°¿°8¿°N¿°m¿°ù¿°‘¿°˜¿¢¿¢;¿¢^¿¢é¿¢ƒ¿£¿£¿£!¿£"¿£.¿£I¿£Ä¿£î¿£ö¿£π¿£Ï¿§B¿§F¿§G¿§S¿§q¿§®¿§º¿§¬¿§√¿§‚¿•¿•k¿•o¿•p¿•|¿•ñ¿•ª¿•ﬁ¿•˝¿¶ ¿¶W¿¶±¿¶“¿¶ı¿ß¿ß9¿ßO¿ßU¿ßY¿ßZ¿ßf¿ßà¿ß—¿ß¿®¿®<¿®@¿®A¿®f¿®x¿®¬¿® ¿®Œ¿®œ¿®¯¿©
¿©X¿©`¿©d¿©e¿©§¿©Î¿™¿™I¿™O¿™p¿™t¿™u¿™¢¿™Æ¿™‚¿´"¿´Y¿´g¿´m¿´ú¿´‰¿¨¿¨N¿¨h¿¨i¿¨ê¿¨±¿¨‘¿¨˜¿≠¿≠-¿≠R¿≠w¿≠Ω¿≠„¿Æ¿Æ,¿ÆÜ¿Æï¿Æ¿¿ÆÕ¿Æ’¿Æ€¿Æ˘¿Æ˝¿Æ˛¿Ø*¿Ø6¿Øi¿Øö¿Ø®¿ØÆ¿ØÓ¿∞¿∞>¿∞L¿∞R¿∞ö¿∞Á¿±¿±c¿±û¿±µ¿±Ò¿±˚¿≤8¿≤M¿≤S¿≤q¿≤u¿≤v¿≤è¿≤“¿≤÷¿≤◊¿≤˙¿≥¿≥D¿≥\¿≥j¿≥p¿≥†¿≥€¿¥*¿¥B¿¥P¿¥V¿¥y¿¥}¿¥~¿¥º¿¥‘¿¥‚¿¥Ë¿¥È¿µ6¿µM¿µç¿µË¿∂:¿∂Ä¿∂á¿∂à¿∂®¿∂„¿∂¿∂˜¿∑)¿∑s¿∑Æ¿∑≈¿∏¿∏¿∏H¿∏]¿∏c¿∏g¿∏h¿∏å¿∏ò¿∏»¿∏˘¿πC¿πZ¿πh¿πn¿πé¿πØ¿∫¿∫¿∫"¿∫)¿∫*¿∫\¿∫É¿∫®¿∫…¿∫Ó¿∫ˇ¿ª"¿ªE¿ªj¿ªÉ¿ªã¿ª≤¿ª◊¿ª¸¿º¿ºD¿ºÄ¿º£¿ºƒ¿º’¿º›¿º„¿ºÁ¿ºË¿Ω¿Ω@¿ΩF¿Ωx¿Ω~¿Ωº¿æ ¿æ!¿æ"¿æx¿æ¶¿æ¥¿æ∫¿æÍ¿ø¿ø¿ø¿ø¿ø¿øM¿øÉ¿øâ¿øª¿ø¡¿ø˝¿¿&¿¿p¿¿ë¿¿Ø¿¿Ω¿¿√¿¿ƒ¿¡¿¡5¿¡g¿¡É¿¡ë¿¡ö¿¡†¿¡§¿¡•¿¡·¿¬¿¬¿¬Y¿¬_¿¬õ¿¬ƒ¿√¿√(¿√F¿√T¿√Z¿√[¿√±¿√Ã¿√˛¿ƒ¿ƒ$¿ƒ-¿ƒ3¿ƒ7¿ƒ8¿ƒr¿ƒì¿ƒ°¿ƒß¿ƒ∆¿ƒÎ¿ƒÒ¿≈#¿≈8¿≈>¿≈B¿≈C¿≈ê¿≈•¿≈´¿≈ª¿≈¡¿∆	¿∆R¿∆ç¿∆“¿∆ˆ¿«D¿«í¿«¡¿«‘¿«⁄¿«€¿»0¿»G¿»x¿»é¿»è¿»µ¿»Ó¿…8¿…~¿…¿…Õ¿…˜¿…ˇ¿ 1¿ T¿ \¿ i¿ ã¿ ì¿ ô¿ ™¿ Æ¿ Ø¿ ˜¿ ˝¿ÀA¿Àt¿À›¿Ã0¿Ãµ¿Õi¿Õ∂¿Œ¿ŒN¿ŒÅ¿Œì¿ŒÂ¿œ	¿œ*¿œQ¿œ¢¿œÏ¿–8¿–à¿–¡¿–“¿–˚¿—$¿—3¿—@¿—J¿—_¿—k¿—¢¿—®¿—©¿“¿“¿“¿“`¿“o¿“¨¿“Â¿“È¿”I¿”ä¿”º¿”œ¿”’¿”˘¿‘%¿‘D¿‘^¿‘ó¿‘§¿‘œ¿‘⁄¿’¿’'¿’A¿’{¿’à¿’¥¿’ø¿’Ô¿÷¿÷(¿÷^¿÷k¿÷ò¿÷£¿÷€¿÷˙¿◊¿◊J¿◊W¿◊à¿◊ì¿◊ö¿◊û¿◊ü¿◊Ô¿ÿ
¿ÿ¿ÿ ¿ÿ&¿ÿt¿ÿâ¿ÿ“¿Ÿ¿Ÿ¿ŸX¿Ÿ¢¿ŸÚ¿⁄:¿⁄â¿⁄—¿⁄˙¿€,¿€\¿€è¿€ﬁ¿€Ì¿‹+¿‹g¿‹p¿‹v¿‹w¿‹º¿›¿›k¿›â¿›√¿›À¿ﬁ ¿ﬁv¿ﬁØ¿ﬁ…¿ﬁ—¿ﬁﬁ¿ﬂ8¿ﬂé¿ﬂï¿ﬂô¿ﬂö¿ﬂ‘¿‡¿‡'¿‡-¿‡=¿‡C¿‡í¿‡¡¿‡¯¿·7¿·a¿·¶¿·Ø¿·µ¿·∂¿‚(¿‚h¿‚î¿‚–¿„¿„'¿„Q¿„w¿„ô¿„†¿„§¿„•¿„Ò¿‰-¿‰3¿‰C¿‰I¿‰ó¿‰ﬂ¿Â0¿Âr¿Â¡¿Â◊¿Ê(¿Ê]¿Êë¿Ê›¿Á-¿Áh¿Á∫¿ÁË¿Ë¿ËA¿ËS¿Ëk¿Ë©¿Ëª¿Ë◊¿È¿È$¿ÈH¿ÈÉ¿Èï¿È≥¿ÈÙ¿Í¿Í*¿Íq¿ÍÉ¿Íü¿Íﬂ¿ÍÒ¿Î¿Îb¿Ît¿Î•¿Î©¿Î™¿ÎÔ¿Ï>¿Ï~¿ÏÀ¿ÏÂ¿ÏÎ¿ÏÏ¿Ì.¿Ì[¿Ìx¿Ìñ¿ÌÈ¿Ó¿Óì¿ÓÏ¿Ô2¿Ôj¿Ô≤¿Ô«¿Ô‰¿ÔÚ¿Ô˛¿	¿¿¿1¿5¿6¿L¿M¿Y¿n¿Ö¿À¿Ò¿ÒF¿Ò}¿Ò∂¿Ú¿Ú3¿Ú7¿Ú8¿Úâ¿ÚÆ¿Úﬂ¿Û ¿ÛN¿ÛR¿ÛS¿Û£¿Û≈¿Û‰¿ÛÂ¿ÛÒ¿Ù¿Ù5¿Ù6¿Ùb¿Ù≠¿Ù≈¿Ù∆¿ı¿ıK¿ıÄ¿ı∞¿ıÒ¿ı˜¿ı¯¿ˆ&¿ˆB¿ˆ}¿ˆÆ¿ˆŒ¿˜¿˜¿˜F¿˜L¿˜M¿˜ë¿˜À¿˜˙¿¯$¿¯E¿¯b¿¯ü¿¯ª¿¯√¿¯…¿¯ ¿¯Ó¿˘¿˘B¿˘d¿˘¡¿˘…¿˘œ¿˘–¿˙:¿˙H¿˙N¿˙O¿˙ö¿˙·¿˚¿˚+¿˚9¿˚?¿˚j¿˚ê¿˚…¿˚Â¿˚Ì¿¸*¿¸A¿¸I¿¸O¿¸P¿¸Ç¿¸Œ¿˝¿˝e¿˝ï¿˝Í¿˛;¿˛ç¿˛ì¿˛ó¿˛ò¿˛§¿˛’¿˛˚¿ˇ0¿ˇw¿ˇ∏¿ˇ„¿ˇÈ¿ˇÍ¿ ¿ U¿ ú¿ Ô¿6¿à¿“¿¿>¿s¿ß¿Ì¿¿>¿J¿m¿õ¿ß¿≥¿ª¿¿4¿:¿¿Ä¿Ω¿¿[¿a¿b¿ï¿‘¿¿&¿,¿-¿V¿}¿Ø¿¿A¿Ö¿•¿ﬂ¿Â¿Ê¿¿B¿ü¿ß¿≠¿Æ¿Õ¿	¿	c¿	k¿	q¿	r¿	ù¿	Ó¿
¿
;¿
à¿
¢¿
√¿
Î¿¿9¿b¿ã¿≤¿Ω¿≈¿À¿Ã¿¿*¿0¿Ç¿ô¿÷¿¿5¿;¿?¿@¿n¿¢¿—¿&¿P¿V¿Z¿[¿g¿z¿§¿◊¿¿H¿s¿ò¿∫¿÷¿Ô¿$¿U¿w¿ï¿œ¿¿J¿o¿Æ¿Õ¿ˆ¿6¿`¿u¿√¿«¿»¿Ì¿Ó¿9¿?¿ã¿œ¿ ¿C¿I¿î¿«¿˝¿˛¿
¿D¿E¿Q¿Ö¿“¿"¿k¿l¿∫¿€¿¿¿¿¿E¿≠¿≥¿¥¿œ¿ ¿:¿u¿{¿©¿™¿≈¿¿K¿ç¿õ¿°¿¢¿Ó¿¿:¿y¿©¿ÿ¿$¿V¿e¿ï¿ù¿‘¿·¿¿W¿ù¿˜¿¿¿A¿B¿}¿∑¿¿q¿r¿’¿/¿p¿v¿w¿Æ¿˛¿ -¿ H¿ N¿ O¿ û¿ Ï¿!9¿!W¿!å¿!ê¿!ë¿!Ã¿"¿"?¿"Ñ¿"Ω¿"˙¿"˛¿"ˇ¿#¿#:¿#P¿#t¿#ø¿$¿$¿$8¿$q¿${¿$ú¿$ª¿$‹¿%¿%$¿%E¿%|¿%ß¿%—¿%Ú¿&¿&5¿&]¿&®¿&Ò¿')¿'/¿'3¿'4¿'@¿'â¿'Ω¿'¡¿'¬¿'Œ¿(¿(n¿(π¿(Ω¿(æ¿)¿)%¿)&¿)w¿)Ñ¿)ß¿)®¿)Ú¿*¿*¿*G¿*e¿*f¿*∑¿+¿+M¿+¶¿+ß¿+≥¿+Ô¿,+¿,>¿,n¿,â¿,≥¿,Ó¿- ¿-H¿-R¿-â¿-∫¿-Ì¿.>¿.`¿.ã¿.å¿.≥¿.„¿/	¿/R¿/}¿/¢¿/Ï¿/˝¿0!¿0´¿1	¿1¿1¿1B¿1Ê¿2¿2w¿2¢¿2Ï¿3O¿3P¿3≥¿4>¿4û¿4∆¿4È¿5¿5>¿5Ö¿5º¿64¿6>¿6D¿6H¿6I¿6o¿6Ï¿7#¿7ã¿7‘¿8¿8i¿8≥¿8”¿8‘¿9$¿9s¿9¬¿:¿:U¿:V¿:¢¿:Ë¿;0¿;r¿;•¿<$¿<ó¿<ü¿<ø¿<ﬂ¿= ¿=!¿=.¿=t¿=‘¿>4¿>5¿>¬¿>»¿>Ã¿>Õ¿>˙¿?K¿?ñ¿?¬¿?Œ¿?Û¿@¿@L¿@l¿@Ñ¿@¢¿@ˆ¿A¿A
¿A¿AU¿A•¿AÊ¿B¿B+¿BE¿Bj¿Bñ¿Bª¿Bﬁ¿C¿C*¿CY¿C~¿C§¿C“¿C˙¿D"¿DG¿Dq¿Dö¿D»¿D“¿D⁄¿D‡¿D·¿E#¿EB¿EP¿EV¿EW¿Eö¿E§¿Eƒ¿EÂ¿F¿F7¿FM¿Fi¿Fµ¿Fø¿F≈¿F∆¿G¿Ge¿G≤¿Gﬂ¿H¿H"¿Hs¿H√¿I¿I¿I8¿I\¿Ib¿If¿Ig¿IÇ¿IÉ¿I‘¿J¿J¿Ji¿J∫¿J÷¿J¿K
¿K¿K¿K_¿K¨¿K≤¿Kˇ¿L¿L#¿L=¿LI¿Le¿L¥¿Lª¿L‰¿LË¿LÈ¿M¿MM¿M[¿Ma¿Më¿MÀ¿MŸ¿Mﬂ¿N¿NI¿NM¿NN¿Nà¿NØ¿N‘¿Nÿ¿NŸ¿O¿O=¿O>¿Oã¿O⁄¿P)¿P=¿PB¿Pé¿Pﬂ¿Q-¿Q>¿Qt¿Q≤¿Q˝¿R¿R¿R7¿RZ¿Rw¿Rx¿Rë¿RÀ¿R˜¿S)¿Sr¿S≥¿S˚¿T"¿T/¿T}¿TŒ¿U¿U5¿UR¿Um¿U∏¿U¡¿U¬¿V¿VA¿Vö¿V¡¿V«¿V»¿W¿W)¿WV¿Wâ¿Wª¿WÌ¿WÙ¿Wı¿X=¿Xö¿Xû¿Xü¿XÔ¿X˛¿Yj¿Yk¿Yç¿Y«¿YÁ¿Z¿Z¿Z$¿ZD¿Zv¿Zw¿Z∆¿[¿[!¿[*¿[w¿[ƒ¿\¿\6¿\Ç¿\‡¿]3¿]T¿]Å¿]ù¿]±¿]⁄¿]ˇ¿^(¿^Q¿^x¿^Ç¿^®¿^∫¿^÷¿_%¿_P¿_Å¿_â¿_æ¿_À¿_Ô¿_ı¿_˘¿_˙¿`#¿`B¿`g¿`ä¿`π¿`Ÿ¿`¯¿`˛¿a¿a¿a2¿ar¿aê¿a≠¿a‘¿a˛¿b¿b¿b	¿b5¿b[¿bÇ¿bê¿bñ¿bæ¿bÒ¿bı¿c@¿cE¿cí¿cﬂ¿d¿d4¿d]¿dû¿d¨¿d≤¿d’¿dˆ¿e#¿e$¿eá¿e¿fB¿fl¿fm¿f¿fé¿f†¿f«¿fÍ¿g¿g8¿g]¿ge¿gÜ¿gµ¿gπ¿g∫¿gª¿g«¿h"¿hN¿hh¿hÇ¿hà¿hå¿hç¿hô¿hµ¿h‘¿i¿i/¿i^¿iÄ¿iÜ¿iä¿iã¿iœ¿j¿j/¿jZ¿j[¿j®¿jΩ¿j€¿k¿k?¿kC¿kD¿kd¿kå¿kÃ¿k–¿k—¿l
¿l¿l^¿l¨¿l˙¿mI¿mh¿mÉ¿mò¿m∂¿m√¿mﬂ¿nS¿nY¿n]¿n^¿ní¿n∑¿nŒ¿n˘¿o¿o.¿oP¿oX¿o^¿ob¿oc¿o±¿oœ¿oÔ¿p¿p)¿pE¿pj¿po¿pp¿pæ¿q,¿qr¿qv¿qw¿qÃ¿qÛ¿r¿r¿r9¿rí¿rÈ¿s¿sÅ¿s∞¿sƒ¿s ¿sÔ¿tY¿tï¿t™¿t≤¿t„¿tÈ¿t˚¿tˇ¿u ¿uK¿uì¿uƒ¿u¯¿v¿v¿v(¿vy¿v»¿v◊¿w/¿w]¿wã¿w«¿x4¿xf¿xl¿xp¿xq¿xë¿x…¿x˚¿yz¿y‚¿zX¿z˙¿z˛¿zˇ¿{-¿{r¿{î¿{¢¿{®¿{“¿{˛¿|¿|¿|T¿|q¿|x¿|∆¿}¿}b¿}ñ¿}…¿}¸¿~¿~¿~R¿~õ¿~¿¿¿'¿â¿„¿ÄH¿Ä¿ÄÕ¿Å:¿Åì¿Åª¿ÅÛ¿Ç&¿Ç6¿Ç>¿Çz¿Ç«¿Çı¿É#¿É3¿É;¿É<¿Ég¿Éw¿É¿É´¿ÉÔ¿Ñ¿Ñ6¿ÑH¿ÑR¿Ñä¿Ö¿Ö≠¿Ü#¿Ü$¿ÜK¿Üx¿ÜÕ¿ÜÊ¿á¿á ¿áV¿á\¿á`¿áa¿áï¿áÛ¿à¿àß¿à◊¿â¿â[¿âq¿ây¿â…¿âœ¿â‡¿â‰¿âÂ¿ä¿är¿ä∫¿ä‚¿ä˙¿ã¿ã/¿ãZ¿ãç¿ãº¿ã‡¿å¿å2¿åe¿å§¿åÛ¿ç¿ç%¿çJ¿ç_¿çq¿ç~¿çâ¿ç∆¿çÕ¿çŒ¿çÎ¿çÔ¿ç¿é¿éu¿éƒ¿è¿è5¿èk¿è≥¿è¡¿è«¿è»¿èı¿èˆ¿ê:¿ê~¿ê¬¿ë ¿ë.¿ëC¿ëT¿ëÄ¿ëß¿ë‘¿í ¿í+¿íQ¿í{¿íñ¿í¡¿í⁄¿í˜¿ì¿ì¿ìX¿ì|¿ìú¿ì©¿ì–¿î¿î¿îA¿îI¿îê¿î∏¿îæ¿ï¿ï2¿ïj¿ït¿ï≠¿ïŒ¿ñ¿ñ ¿ñ6¿ñR¿ñ§¿ñÆ¿ñ¥¿ñµ¿ó¿ó<¿ók¿óÜ¿óå¿óê¿óë¿ó÷¿ò%¿òg¿òh¿òî¿òï¿òÿ¿òˇ¿ô¿ô¿ô;¿ô}¿ô®¿ôı¿ö@¿öm¿öª¿ö‹¿õ¿õE¿õU¿õ]¿õ^¿õ¢¿õ£¿õÒ¿ú+¿úe¿úü¿úÈ¿ù¿ùO¿ùg¿ùã¿ùñ¿ù⁄¿ùˆ¿û%¿û=¿ûJ¿ûå¿ûÆ¿û‰¿û˝¿ü¿ü¿ü¿üL¿üv¿üw¿ü€¿†)¿†*¿†I¿†ã¿†Æ¿†ÿ¿†Á¿°D¿°ì¿°ﬂ¿¢¿¢+¿¢W¿¢h¿¢±¿¢˚¿£¿£¿£¿£)¿£N¿£m¿£ö¿£¡¿£Ã¿£Ò¿§)¿§V¿§}¿§à¿§ó¿§Œ¿§Û¿•+¿•6¿•>¿•l¿•p¿•q¿•ï¿•ñ¿•¢¿•æ¿•“¿•‡¿•Ê¿¶¿¶R¿¶ñ¿¶ƒ¿¶˙¿ß5¿ßâ¿ßﬁ¿®¿® ¿®&¿®Y¿®]¿®^¿®õ¿®•¿©	¿©
¿©¿©@¿©ñ¿©ü¿©†¿©÷¿©˜¿™¿™]¿™^¿™¿™‹¿™Ï¿™Ù¿™ı¿´5¿´b¿´É¿´∑¿´’¿´Î¿¨¿¨J¿¨T¿¨Z¿¨^¿¨_¿¨å¿¨˛¿≠,¿≠f¿≠≈¿Æ¿Æ¿Æ7¿Æã¿Æ‹¿ÆÎ¿Ø:¿Øä¿ØŸ¿∞)¿∞c¿∞o¿∞Ø¿∞¿¿±5¿±I¿±J¿±°¿±À¿±’¿±¯¿≤.¿≤N¿≤f¿≤Ñ¿≤Ã¿≤ÿ¿≤‡¿≤Ê¿≤Á¿≥.¿≥/¿≥|¿≥Ω¿≥”¿≥Á¿¥8¿¥É¿¥÷¿¥Ê¿µ¿µ¿µS¿µâ¿µ¡¿∂¿∂¿∂C¿∂k¿∂w¿∂§¿∂«¿∂˝¿∑¿∑5¿∑S¿∑ì¿∑ü¿∑ß¿∑≠¿∑¡¿∑≈¿∑∆¿∏D¿∏i¿∏à¿∏©¿∏·¿π¿πB¿πL¿πm¿πê¿π≥¿π÷¿∫	¿∫M¿∫{¿∫ ¿∫˙¿ª¿ª¿ª¿ª¿ª¿ª9¿ªÆ¿º¿ºê¿ºî¿ºï¿Ω.¿Ω/¿Ω|¿Ω∞¿Ω≈¿æ¿æ¿æb¿æ∞¿æ—¿æÊ¿ø%¿ø&¿ø^¿øs¿ø∂¿ø∑¿øﬂ¿øˇ¿¿ ¿¿¿¿é¿¿¨¿¿∫¿¿¿¿¿‹¿¿Í¿¿¿¡¿¡;¿¡l¿¡z¿¡Ä¿¡®¿¬¿¬¿¬¿¬Ö¿¬â¿¬ä¿¬£¿¬œ¿√3¿√^¿√k¿√ö¿√¥¿√º¿√¬¿√√¿√Î¿ƒ	¿ƒX¿ƒo¿≈¿≈¿≈R¿≈∂¿≈æ¿∆¿∆"¿∆&¿∆'¿∆a¿∆¶¿∆¿«G¿«c¿«|¿«ñ¿«æ¿«ƒ¿«»¿«…¿«Ù¿»¿».¿»U¿»p¿»v¿»z¿»{¿»°¿»”¿…'¿…y¿…û¿…¿ 4¿ z¿ ª¿ ¡¿ Í¿À¿ÀA¿Àë¿À≤¿À˘¿ÃH¿ÃL¿ÃM¿Ãl¿Ãó¿Ãæ¿ÃÓ¿Õ¿ÕQ¿ÕÇ¿Õ√¿Õ·¿Œ¿Œ"¿Œq¿Œó¿Œ–¿Œÿ¿ŒÂ¿œ¿œQ¿œW¿œn¿œr¿œs¿œ¶¿œƒ¿–¿–@¿–[¿–¶¿–∂¿–◊¿–Ó¿—¿—!¿—M¿—°¿—Ë¿—Ó¿“¿“¿“	¿“2¿“q¿“æ¿“›¿”¿”'¿”-¿”B¿”r¿”ë¿”ï¿”ñ¿”∏¿”Ú¿‘¿‘@¿‘É¿‘À¿‘œ¿‘–¿’¿’3¿’A¿’G¿’d¿’à¿’®¿’‹¿÷¿÷;¿÷B¿÷F¿÷n¿÷o¿÷§¿÷ˆ¿◊¿◊
¿◊¿◊g¿◊ö¿◊®¿◊Æ¿◊Ø¿◊Á¿ÿI¿ÿÉ¿ÿ’¿Ÿ%¿Ÿ,¿Ÿ-¿Ÿj¿Ÿà¿Ÿ´¿Ÿ–¿Ÿ˜¿⁄Z¿⁄w¿⁄ù¿⁄∆¿⁄Á¿⁄Ó¿⁄Ô¿€¿€=¿€â¿€≈¿€”¿€Ÿ¿€˛¿€ˇ¿‹8¿‹S¿‹†¿‹Ø¿›¿›H¿›p¿›Ω¿ﬁ¿ﬁQ¿ﬁZ¿ﬁ[¿ﬁö¿ﬁ≥¿ﬁ¿ﬂ?¿ﬂz¿ﬂß¿ﬂ∏¿ﬂ¬¿‡¿‡8¿‡e¿‡í¿‡‚¿·O¿·Y¿·a¿·Ñ¿·ä¿·æ¿·¬¿·√¿‚¿‚¿‚b¿‚±¿‚⁄¿‚ﬂ¿„¿„,¿„c¿„x¿„À¿‰¿‰2¿‰~¿‰◊¿‰›¿Â¿Â¿Â¿Âd¿Âi¿Â∂¿Ê¿ÊB¿ÊG¿Êì¿Ê‚¿Á2¿Ád¿Ái¿Áí¿Á∂¿Áı¿Ë(¿Ë6¿Ë<¿Ëê¿ËÂ¿È¿È¿È¿Èw¿Èx¿È©¿ÈØ¿È˛¿Í1¿Í¢¿Í£¿ÍØ¿Í‚¿Í„¿Î-¿Î.¿Î:¿Îî¿Îÿ¿Ï&¿ÏW¿ÏÉ¿Ïú¿Ï∑¿ÏÓ¿ÏÙ¿Ïı¿ÌE¿Ìî¿Ì›¿Ó¿Ó*¿ÓH¿Óq¿Ó™¿Ó≤¿Ó¿¿Ó∆¿Ó«¿Ô¿Ô¿Ô	¿Ô¿ÔC¿Ôç¿ÔŸ¿Ô⁄¿¿G¿K¿L¿ï¿õ¿Í¿Ò.¿Ò:¿ÒQ¿Ò¢¿ÒÚ¿ÚB¿Úç¿ÚŒ¿Ú¿Û¿Û
¿Û¿Û0¿ÛD¿ÛJ¿Ûn¿Ûå¿Û≤¿Ù¿Ù7¿Ù`¿Ùï¿ÙÍ¿ı;¿ıç¿ıì¿ı§¿ı®¿ı©¿ıµ¿ıÂ¿ˆ+¿ˆU¿ˆl¿ˆó¿ˆ∏¿ˆ˜¿˜+¿˜S¿˜Y¿˜]¿˜^¿˜ã¿˜Ω¿¯ ¿¯M¿¯m¿¯z¿¯è¿¯ï¿¯ô¿¯ö¿¯Ë¿˘¿˘;¿˘á¿˘’¿˙¿˙;¿˙V¿˙x¿˙ì¿˙∏¿˙ﬂ¿˚>¿˚â¿˚ÿ¿˚Ï¿˚Ú¿˚Û¿˚ˇ¿¸K¿¸ã¿¸œ¿¸‰¿¸Î¿¸Ï¿˝¿˝,¿˝M¿˝w¿˝™¿˝¡¿˝’¿˝‚¿˝Ì¿˝Ù¿˛¿˛	¿˛
¿˛O¿˛w¿˛}¿˛ƒ¿˛Î¿˛Ò¿ˇA¿ˇi¿ˇó¿ˇº¿ˇ ¿ˇ–¿ˇ—¿ ¿ <¿ I¿ Å¿ á¿ ã¿ å¿ ∏¿ —¿ ˆ¿¿
¿¿<¿f¿l¿p¿q¿Ω¿»¿Õ¿¿^¿¿Ä¿å¿∂¿Ÿ¿Á¿Ì¿Ó¿¿,¿2¿3¿E¿ò¿†¿§¿•¿±¿“¿¿!¿'¿(¿:¿[¿c¿g¿h¿t¿¢¿„¿‰¿˛¿@¿d¿î¿ú¿¢¿¶¿ß¿≥¿Ë¿È¿˘¿˙¿¿<¿ì¿·¿ ¿(¿P¿à¿í¿∫¿ª¿‚¿¿¿B¿c¿ä¿±¿‡¿	¿	B¿	Ç¿	ﬂ¿
¿
 ¿
)¿
^¿
ì¿
«¿¿W¿r¿¥¿ª¿ø¿¿¿Ã¿¿¿?¿e¿f¿r¿¨¿æ¿¿	¿¿¿R¿u¿ä¿Œ¿Ë¿9¿F¿j¿†¿®¿∂¿∫¿ª¿˛¿!¿6¿z¿ì¿‚¿Ô¿¿G¿O¿]¿a¿b¿ß¿ ¿ﬂ¿#¿>¿ë¿—¿ﬁ¿¿5¿=¿K¿O¿P¿¢¿Ó¿¿r¿í¿¥¿¿[¿≠¿˚¿B¿n¿r¿s¿æ¿Ù¿˘¿F¿ï¿„¿-¿ê¿∞¿À¿Í¿¿9¿`¿ê¿ö¿Í¿'¿u¿ü¿¿;¿_¿Ñ¿ä¿“¿
¿V¿ß¿Ó¿8¿Å¿î¿¿t¿x¿y¿À¿Ã¿J¿Õ¿5¿|¿¡¿¬¿ ¿ ^¿ b¿ c¿ ´¿ ∆¿ Ã¿!¿!6¿!<¿!}¿!Ω¿!Ë¿"¿"@¿"N¿"T¿"U¿"z¿"∞¿"Ï¿#B¿#S¿#r¿#¿#¨¿#≤¿#È¿#Í¿$
¿$"¿$I¿$z¿$¨¿$”¿$ˇ¿%N¿%Y¿%b¿%à¿%è¿%ì¿&*¿&+¿&[¿&â¿&ÿ¿&˜¿'¿'¿'T¿'U¿'†¿'Ì¿(<¿(W¿(w¿(õ¿(°¿(•¿)¿)¿)j¿)ç¿)◊¿)Ò¿*0¿*=¿*q¿*w¿*{¿*|¿*¡¿*◊¿*˝¿+0¿+>¿+D¿+E¿+Ö¿+•¿+ﬂ¿+Ì¿+Û¿+Ù¿,E¿,â¿,◊¿,Â¿,Î¿,Ï¿-@¿-ì¿-ø¿-‚¿.¿."¿.)¿.S¿.a¿.g¿.í¿.ñ¿.ó¿.Ê¿/¿/F¿/f¿/t¿/z¿/{¿/¢¿/„¿0¿0	¿0]¿0†¿0Æ¿0¬¿1¿15¿1>¿1E¿1Ö¿1ü¿1‡¿1¿1¯¿2¿2]¿2∞¿3¿3;¿3k¿3©¿3∏¿3È¿4¿4¿4(¿4X¿4h¿4p¿4ñ¿4’¿5&¿5P¿5Ä¿5æ¿5Õ¿5˛¿6'¿60¿66¿67¿6`¿6Ä¿6±¿6◊¿6ﬁ¿6‚¿6„¿7¿7'¿7v¿8¿8
¿8¿8c¿8¿8˜¿8¯¿9'¿9G¿9ñ¿9™¿9±¿9µ¿:<¿:=¿:∞¿;¿;¿;;¿;s¿;ç¿;†¿;¶¿;“¿;÷¿;◊¿;ÿ¿<¿<¿<l¿<¢¿<Î¿=¿=-¿=P¿=o¿=í¿=‡¿>.¿>L¿>w¿>ë¿>ª¿>…¿>Ù¿? ¿?T¿?Å¿?©¿?◊¿@+¿@5¿@V¿@w¿@ö¿@æ¿@ƒ¿@»¿@…¿A¿Ac¿Aé¿A¡¿B¿BW¿BX¿Bf¿B¿Cã¿D¿D¿D+¿D¯¿Ez¿FS¿G8¿G¯¿H]¿H¬¿Iƒ¿Jù¿Kî¿L¿Lb¿Lc¿L{¿MK¿NE¿NF¿NX¿Nõ¿NÊ¿Om¿On¿Oª¿O¿¿O¡¿OÕ¿OÙ¿P"¿Pb¿Pc¿P©¿Q¿QE¿Qó¿QÁ¿QÓ¿QÔ¿R¿R=¿Ra¿RÇ¿R£¿R˘¿S3¿SO¿Sê¿S™¿S…¿S˚¿T#¿TY¿T¨¿TΩ¿U¿UO¿Uo¿UÅ¿UÇ¿U™¿U…¿U€¿U‹¿V¿V8¿Ve¿Vî¿V¡¿V¿W<¿WÜ¿W™¿W¿¿WÔ¿XJ¿X¶¿X√¿Xﬁ¿X¿XÒ¿YT¿Ye¿Y°¿YÛ¿ZG¿Zö¿Z—¿[N¿[_¿[ä¿[ª¿[◊¿\¿\-¿\o¿\∞¿\ˆ¿]4¿]b¿]Ñ¿]ô¿]æ¿]Á¿^¿^s¿^¶¿^Ÿ¿_¿_S¿_™¿_˛¿`9¿`†¿`–¿`˘¿a¿ae¿aù¿aŒ¿a¯¿b6¿br¿b≤¿bÁ¿c ¿cW¿cî¿cÀ¿d¿dC¿db¿d†¿d–¿e¿eP¿eô¿e÷¿f¿f@¿fï¿f‹¿g¿gT¿gâ¿gƒ¿gˇ¿h8¿hw¿hﬁ¿iO¿iå¿iÕ¿j
¿jI¿jÄ¿j˝¿kD¿kì¿k‘¿l¿l[¿lú¿lﬂ¿m"¿mt¿m«¿n¿nk¿n≈¿o¿oG¿oë¿oÊ¿p)¿pJ¿pi¿pÜ¿p°¿p∫¿p—¿pÊ¿p˘¿q
¿q¿q&¿q1¿q:¿qA¿qE¿qF¿qz¿qÄ¿q≈¿r¿r.¿r/¿rM¿rn¿r§¿rÓ¿s:¿sV¿sõ¿s”¿s‹¿tB¿tö¿tª¿u¿uK¿uö¿u§¿u¨¿uﬁ¿u‰¿v7¿vá¿vÿ¿vÚ¿w[¿wº¿x8¿xG¿xØ¿x∑¿xÙ¿y=¿yX¿yû¿y©¿y≤¿y∏¿yˆ¿z¿zo¿z¡¿{¿{j¿{k¿{…¿{ ¿{ˇ¿|¿|2¿|B¿|y¿|ï¿|û¿|§¿|•¿|‹¿}¿} ¿}5¿}Y¿}`¿}d¿}f¿}g¿}û¿}¨¿}ª¿}Ÿ¿}Ú¿~¿~@¿~V¿~v¿~î¿~±¿~Õ¿~Í¿¿(¿D¿W¿r¿á¿†¿æ¿€¿¸¿Ä¿Ä3¿ÄR¿Äl¿Äï¿Ä¥¿ÄÀ¿Ä‚¿Å¿Å*¿Åc¿Åö¿Å∆¿ÅÔ¿Ç¿Ç-¿ÇG¿Çg¿Çπ¿Ç∫¿ÇŸ¿Ç˘¿É¿É=¿Éc¿Éâ¿É±¿É…¿É‡¿É˜¿Ñ¿Ñ%¿Ñ;¿Ñ[¿Ñz¿Ñô¿Ñ∂¿Ñ€¿ÑÛ¿Ö¿Ö0¿Ö`¿Öá¿Ö¶¿ÖÀ¿ÖÁ¿Ü¿Ü#¿Ü@¿Üc¿Üì¿Ü¡¿ÜÍ¿á¿á@¿ád¿áÑ¿áü¿á†¿á¨¿áË¿à¿à¿à;¿àm¿àõ¿àœ¿àÌ¿â	¿â#¿â=¿âW¿âq¿ââ¿âß¿âÕ¿âÎ¿ä¿ä+¿äi¿äã¿ä°¿äŒ¿ä¸¿ã¿ãJ¿ãp¿ãê¿ã≤¿ã‘¿ãˆ¿å(¿åZ¿åä¿å»¿å¸¿ç&¿çN¿çv¿çò¿çü¿ç£¿ç§¿ç∞¿çˇ¿é¿é*¿éL¿éÄ¿é∞¿éÊ¿è¿è$¿è@¿è\¿èx¿èî¿èÆ¿èŒ¿èˆ¿ê¿ê4¿êZ¿êö¿êæ¿ê÷¿ë¿ë5¿ë]¿ëç¿ëØ¿ë—¿ëı¿í¿í=¿íq¿í£¿í„¿ì¿ìE¿ìy¿ì£¿ì«¿ìÙ¿ì¯¿ì˙¿ì˚¿î¿î!¿î=¿î[¿îx¿îô¿î∑¿î›¿î˜¿ï¿ï5¿ïM¿ïS¿ïT¿ïq¿ïñ¿ïµ¿ïÂ¿ï˝¿ñ¿ñ6¿ñI¿ñh¿ñi¿ñü¿ñ¡¿ñÍ¿ñ¿ó*¿ól¿ó®¿ò4¿òh¿ò¶¿ò‰¿ô¿ôp¿ôt¿ôv¿ôw¿ô©¿ô∆¿ôﬂ¿ô¸¿ö¿öC¿ö^¿öd¿öe¿ö{¿öò¿ö∑¿ö‚¿ö¯¿ö˘¿õ¿õK¿õM¿õN¿õ™¿ú¿ú¿ú¿ú%¿ú<¿úV¿úò¿úû¿ú¢¿ú£¿úØ¿úÊ¿ù¿ù<¿ù~¿ùÑ¿ùÖ¿ùµ¿ùÛ¿ù˘¿ù˝¿ù˛¿û
¿û¿ûY¿ûn¿ûr¿ûs¿ûÂ¿ûÊ¿ü¿ü2¿ü3¿ü?¿üu¿üv¿üÇ¿ü™¿üœ¿†*¿†M¿†Q¿†R¿†^¿†É¿†≠¿†⁄¿†Ó¿†Ù¿°¿°1¿°7¿°c¿°w¿°}¿°Ω¿°Ô¿¢P¿¢§¿¢®¿¢©¿¢µ¿¢…¿£¿£B¿£Z¿£`¿£ò¿£ˇ¿§¿§¿§¿§7¿§P¿§T¿§V¿§W¿§á¿§¶¿§¿¿§ÿ¿§ﬁ¿§ﬂ¿•<¿•O¿•P¿•\¿•à¿•∫¿•Á¿•Ó¿¶¿¶9¿¶M¿¶ì¿¶ô¿¶Ÿ¿¶Ì¿ß¿ß¿ß¿ß¿ß¿ßP¿ßT¿ß•¿ß¿®<¿®¿®–¿©¿©*¿©.¿©~¿©ï¿©ô¿©ß¿©´¿©¿™(¿™y¿™±¿™·¿´	¿´
¿´ ¿´!¿´r¿´û¿´Á¿¨.¿¨q¿¨u¿¨v¿¨Ç¿¨≤¿¨€¿¨Ó¿¨Ù¿≠¿≠¿≠#¿≠G¿≠b¿≠h¿≠Ö¿≠ú¿≠¢¿≠£¿≠Õ¿≠‰¿≠¯¿≠¸¿≠˝¿Æ	¿Æ:¿Æo¿ÆÇ¿Æà¿Æ†¿Æ∞¿Æ∂¿Æﬁ¿Æ˘¿Æˇ¿Ø¿Ø3¿Ø9¿Ø:¿Øh¿Ø¿Øó¿Øõ¿Øù¿Øû¿ØÔ¿∞J¿∞ö¿∞õ¿∞º¿∞Ì¿±¿±¿±Z¿±≤¿±¿¿±∆¿≤¿≤[¿≤z¿≤ò¿≤ü¿≤…¿≥¿≥Z¿≥Å¿≥°¿≥ß¿≥´¿≥¨¿≥∏¿≥Ó¿¥*¿¥H¿¥[¿¥a¿¥Ä¿¥»¿µ¿µ.¿µx¿µ°¿∂¿∂U¿∂^¿∂‹¿∑¿∑-¿∑?¿∑Z¿∑c¿∑i¿∑j¿∑œ¿∑–¿∏¿∏$¿∏à¿∏€¿∏˜¿∏˛¿πÇ¿π¥¿πœ¿πﬂ¿π¯¿πˇ¿∫¿∫¿∫¿∫h¿∫j¿∫k¿∫—¿∫Ô¿∫ˇ¿ª¿ª7¿ªf¿ªÅ¿ª°¿ªß¿ª®¿ª…¿ªÛ¿º
¿º&¿ºW¿ºÖ¿ºÜ¿º±¿º≤¿º¸¿Ω¿ΩJ¿Ωu¿Ω∑¿Ωﬁ¿ΩÂ¿æ4¿æç¿æë¿æí¿æÿ¿æÚ¿ø*¿øW¿øõ¿ø¢¿ø‘¿¿1¿¿5¿¿6¿¿B¿¿x¿¿¥¿¿”¿¿‘¿¡3¿¡ä¿¡«¿¡›¿¬8¿¬`¿¬j¿¬p¿¬q¿¬ù¿¬Ï¿√#¿√E¿√Ç¿√°¿√¬¿√Õ¿ƒ¿ƒ3¿ƒT¿ƒ¿ƒä¿ƒí¿ƒò¿ƒô¿≈9¿≈æ¿∆2¿∆`¿∆⁄¿∆€¿«¿«é¿»¿»w¿»{¿»|¿»à¿»∆¿»»¿»…¿…9¿…m¿…n¿…è¿…ê¿…¬¿…‚¿…„¿ ¿ N¿ n¿ ö¿ ®¿ Æ¿ ⁄¿À(¿ÀÖ¿À„¿ÃF¿Ãe¿Ãà¿Ã§¿Ã™¿ÃÆ¿ÃØ¿Ãª¿ÃÓ¿Õ¿Õ¿Õz¿Õ ¿ÕÓ¿Õ¸¿Œ¿Œ¿Œ5¿ŒX¿Œt¿Œz¿Œ{¿Œ¿¿œ"¿œ#¿œw¿œŸ¿–%¿–S¿–n¿––¿—	¿—7¿—d¿—e¿—y¿—â¿—€¿—‚¿“¿“=¿“a¿“g¿“k¿“l¿“x¿“∂¿“∏¿“π¿“˝¿”¿”¿”?¿”@¿”L¿”î¿”Ø¿”ø¿”‹¿”Ú¿‘@¿‘V¿‘_¿‘f¿‘j¿‘k¿‘w¿‘¥¿‘∂¿‘∑¿’¿’'¿’(¿’I¿’J¿’V¿’ü¿’√¿’Î¿’¯¿÷!¿÷'¿÷+¿÷,¿÷8¿÷ù¿÷ü¿÷†¿÷ﬁ¿÷ˇ¿◊¿◊N¿◊t¿◊∏¿◊ƒ¿◊˘¿◊˙¿ÿ¿ÿ ¿ÿA¿ÿE¿ÿG    _kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks!kDefaultContentInsertionMimeTypes_CompositionCallback_RenderCompositionCallbackTextEditingControllerToolbarOptionsContentInsertionConfiguration	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleCacheKey_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_CodePointBoundary_DeleteTextAction_UpdateTextSelectionAction$_UpdateTextSelectionVerticallyAction_SelectAllAction_CopySelectionAction_WebClipboardStatusNotifier MÃ