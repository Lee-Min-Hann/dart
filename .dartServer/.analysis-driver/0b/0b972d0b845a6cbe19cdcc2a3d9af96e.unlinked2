|typeadaptcopyWithlerppadded
shrinkWrapgetAdaptation_createAdaptationMap
brightnessapplyElevationOverlayColorcupertinoOverrideTheme
extensions	extensionadaptationMapinputDecorationThemematerialTapTargetSizepageTransitionsThemeplatformscrollbarThemesplashFactoryuseMaterial3visualDensitycanvasColor	cardColorcolorSchemedialogBackgroundColordisabledColordividerColor
focusColorhighlightColor	hintColor
hoverColorindicatorColorprimaryColorprimaryColorDarkprimaryColorLightscaffoldBackgroundColorsecondaryHeaderColorshadowColorsplashColorunselectedWidgetColor	iconThemeprimaryIconThemeprimaryTextTheme	textTheme
typographyactionIconThemeappBarTheme
badgeThemebannerThemebottomAppBarThemebottomNavigationBarThemebottomSheetThemebuttonTheme	cardThemecheckboxTheme	chipThemedataTableThemedatePickerThemedialogThemedividerThemedrawerThemedropdownMenuThemeelevatedButtonThemeexpansionTileThemefilledButtonThemefloatingActionButtonThemeiconButtonThemelistTileThememenuBarThememenuButtonTheme	menuThemenavigationBarThemenavigationDrawerThemenavigationRailThemeoutlinedButtonThemepopupMenuThemeprogressIndicatorTheme
radioThemesearchBarThemesearchViewThemesegmentedButtonThemesliderThemesnackBarThemeswitchThemetabBarThemetextButtonThemetextSelectionThemetimePickerThemetoggleButtonsThemetooltipThemebuttonBarTheme_buttonBarTheme_localizedThemeDataCacheSize_localizedThemeDataCachelocalizeestimateBrightnessForColor_lerpThemeExtensions_themeExtensionIterableToMap==hashCodedebugFillProperties_materialTheme_cupertinoOverrideThemeprimaryContrastingColorresolveFrommaterialTheme	baseThemelocalTextGeometry_cache_maximumSizeputIfAbsentminimumDensitymaximumDensitystandardcomfortablecompactadaptivePlatformDensitydefaultDensityForPlatform
horizontalverticalbaseSizeAdjustmenteffectiveConstraintstoStringShort
AdaptationThemeExtensionMaterialTapTargetSize	ThemeDataMaterialBasedCupertinoThemeDataCupertinoBasedMaterialThemeData_IdentityThemeDataCacheKey
_FifoCacheVisualDensity_colorSchemeLightM3_colorSchemeDarkM3ÅºColor
lerpDoubleInteractiveInkFeatureFactory
BrightnessSwitchadaptiveTypeSwitchThemeDataadaptationMapObjectdoublematerialTapTargetSizeFloatingActionButtonMaterialButtonOutlinedButton
TextButtonElevatedButton
IconButtonshowTimePickerSnackBarChipRawChip	InputChip
ChoiceChip
FilterChip
ActionChipRadioCheckboxThemeMaterialAppofBuildContextBuilderColorScheme	immutableDiagnosticablecolorSchemeSeedfromSeedcopyWithprimarySwatch	TextStylelightdarkfromIterableboolNoDefaultCupertinoThemeDatadynamicInputDecorationThemePageTransitionsThemeTargetPlatformScrollbarThemeDataMaterialColorStringListIconThemeData	TextTheme
TypographyActionIconThemeDataAppBarThemeBadgeThemeDataMaterialBannerThemeDataBottomAppBarThemeBottomNavigationBarThemeDataBottomSheetThemeDataButtonThemeData	CardThemeCheckboxThemeDataChipThemeDataDataTableThemeDataDatePickerThemeDataDialogThemeDividerThemeDataDrawerThemeDataDropdownMenuThemeDataElevatedButtonThemeDataExpansionTileThemeDataFilledButtonThemeDataFloatingActionButtonThemeDataIconButtonThemeDataListTileThemeDataMenuBarThemeDataMenuButtonThemeDataMenuThemeDataNavigationBarThemeDataNavigationDrawerThemeDataNavigationRailThemeDataOutlinedButtonThemeDataPopupMenuThemeDataProgressIndicatorThemeDataRadioThemeDataSearchBarThemeDataSearchViewThemeDataSegmentedButtonThemeDataSliderThemeDataSnackBarThemeDataTabBarThemeTextButtonThemeDataTextSelectionThemeDataTimePickerThemeDataToggleButtonsThemeDataTooltipThemeData
DeprecatedButtonBarThemeData	noDefaultadaptationsdefaultTargetPlatformandroidfuchsiaiOSpaddedlinuxmacOSwindows
shrinkWrapdefaultDensityForPlatformkIsWeb
InkSparklesplashFactory	InkRipple	InkSplash
brightness	seedColorsurfaceprimary	onSurface	onPrimaryoutlineColorsbluegreyblackwhitewithOpacity
fromSwatchaccentColor
tealAccent	cardColorbackgroundColor
errorColorredwhite70black54	secondarywhite60colorSchemebuttonColordisabledColor
focusColor
hoverColorhighlightColorsplashColorwhite38black38material2021platformmaterial2014
fontFamilyapplyfontFamilyFallbackpackagemergecolorkDefaultIconLightColorkDefaultIconDarkColorrawapplyElevationOverlayColorcupertinoOverrideTheme
extensionsinputDecorationThemepageTransitionsThemescrollbarThemeuseMaterial3visualDensitycanvasColordialogBackgroundColordividerColor	hintColorindicatorColorprimaryColorprimaryColorDarkprimaryColorLightscaffoldBackgroundColorsecondaryHeaderColorshadowColorunselectedWidgetColor	iconThemeprimaryTextTheme	textTheme
typographyprimaryIconThemeactionIconThemeappBarTheme
badgeThemebannerThemebottomAppBarThemebottomNavigationBarThemebottomSheetThemebuttonTheme	cardThemecheckboxTheme	chipThemedataTableThemedatePickerThemedialogThemedividerThemedrawerThemedropdownMenuThemeelevatedButtonThemeexpansionTileThemefilledButtonThemefloatingActionButtonThemeiconButtonThemelistTileThememenuBarThememenuButtonTheme	menuThemenavigationBarThemenavigationDrawerThemenavigationRailThemeoutlinedButtonThemepopupMenuThemeprogressIndicatorTheme
radioThemesearchBarThemesearchViewThemesegmentedButtonThemesliderThemesnackBarThemeswitchThemetabBarThemetextButtonThemetextSelectionThemetimePickerThemetoggleButtonsThemetooltipThemebuttonBarThemelocalizeMap
adaptationtypeMaterialsurfaceTintColor	elevationElevationOverlayapplyOverlayCupertinoThemeDataCupertinoThemenewInputDecorationInputDecorator	TextFieldTextFormFieldapplyDefaultsMaterialPageRoutebuildTransitionsPageTransitionsBuilder"debugDefaultTargetPlatformOverride	ScrollbarInkWellInkResponseBadgeBottomAppBarBottomSheetFilledButtontonalextendedfilledfilledTonaloutlinedSegmentedButtonToggleButtonsCardCheckboxListTileshowDatePickershowDateRangePickerDatePickerDialogDateRangePickerDialogInputDatePickerFormFieldAlertDialogDialog
fullscreenDividerVerticalDividerListTile
MenuAnchorDropdownMenuMenuBarNavigationBarBottomNavigationBarNavigationDrawerDrawerNavigationRailCircularProgressIndicatorLinearProgressIndicatorRadioListTile	SearchBarSearchAnchorSliderRangeSliderSwitchListTileTabBarTimePickerDialogAppBarSliverAppBarmediumlargeMaterialScrollBehaviorminimumDensitymaximumDensitystandardPopupMenuDivider	DataTable
BorderSidecreateBorderSideScaffoldPaginatedDataTableBackButtonIconCloseButtonIconDrawerButtonIconEndDrawerButtonIconMaterialBannerDropdownButton	ButtonBar	ChipThemeExpansionTile	MenuStyleSubmenuButtonMenuItemButtonProgressIndicatorSliderThemeTooltipTooltipThemeintinheritputIfAbsentcomputeLuminancemapidMapEntry
extensionAlerp
addEntriesentrieswherecontainsKeyentrykeyunmodifiable	identicaloverrideruntimeType	mapEqualskeysvalueshashAllvoidDiagnosticPropertiesBuilderdebugFillPropertiesfallbackaddIterablePropertydefaultValuelevelDiagnosticLeveldebugDiagnosticsPropertyEnumPropertyColorProperty_materialThemeprimaryContrastingColorbarBackgroundColorapplyThemeToAllCupertinoTextThemeDataresolveFromCupertinoApp	themeDataidentityHashCode	baseThemelocalTextGeometrylengthremovefirstRawMaterialButton
horizontalverticalOffsetBoxConstraintsdebugAssertIsValidminWidthclampDoubledxmaxWidth	minHeightdy	maxHeighthashDoublePropertytoStringShortdebugFormatDoubleprimaryContaineronPrimaryContainerprimaryFixedprimaryFixedDimonPrimaryFixedonPrimaryFixedVariantonSecondarysecondaryContaineronSecondaryContainersecondaryFixedsecondaryFixedDimonSecondaryFixedonSecondaryFixedVarianttertiary
onTertiarytertiaryContaineronTertiaryContainertertiaryFixedtertiaryFixedDimonTertiaryFixedonTertiaryFixedVarianterroronErrorerrorContaineronErrorContainer
backgroundonBackgroundsurfaceBrightsurfaceContainerLowestsurfaceContainerLowsurfaceContainersurfaceContainerHighsurfaceContainerHighest
surfaceDimsurfaceVariantonSurfaceVariantoutlineVariantshadowscriminverseSurfaceonInverseSurfaceinversePrimarysurfaceTintDiagnosticableCupertinoThemeDataÇ-Œà“J3ˇP¡üc à«à÷
Brightness à†package:flutter/services.dart@Ä∂ÄÃColor
lerpDouble Ä¶  dart:ui  Ä–  package:flutter/cupertino.dart  Ä˘  package:flutter/foundation.dart  Å$  action_buttons.dart  ÅB  action_icons_theme.dart  Åd  app_bar_theme.dart  ÅÅ  badge_theme.dart  Åú  banner_theme.dart  Å∏  bottom_app_bar_theme.dart  Å‹   bottom_navigation_bar_theme.dart  Ç  bottom_sheet_theme.dart  Ç)  button_bar_theme.dart  ÇI  button_theme.dart  Çe  card_theme.dart  Ç  checkbox_theme.dart  Çù  chip_theme.dart  Ç∑  color_scheme.dart  Ç”  colors.dart  ÇÈ  constants.dart  É  data_table_theme.dart  É"  date_picker_theme.dart  ÉC  dialog_theme.dart  É_  divider_theme.dart  É|  drawer_theme.dart  Éò  dropdown_menu_theme.dart  Éª  elevated_button_theme.dart  É‡  expansion_tile_theme.dart  Ñ  filled_button_theme.dart  Ñ'  !floating_action_button_theme.dart  ÑS  icon_button_theme.dart  Ñt  ink_ripple.dart  Ñé  ink_sparkle.dart  Ñ©  ink_splash.dartÑŸÑ˙InteractiveInkFeatureFactory Ñ√  ink_well.dart  Ñ˝  input_decorator.dart  Ö  list_tile.dart  Ö5  list_tile_theme.dart  ÖT  menu_bar_theme.dart  Ör  menu_button_theme.dart  Öì  menu_theme.dart  Ö≠  navigation_bar_theme.dart  Ö—  navigation_drawer_theme.dart  Ö¯  navigation_rail_theme.dart  Ü  outlined_button_theme.dart  ÜB  page_transitions_theme.dart  Üh  popup_menu_theme.dart  Üà  progress_indicator_theme.dart  Ü∞  radio_theme.dart  ÜÀ  scrollbar_theme.dart  ÜÍ  search_bar_theme.dart  á
  search_view_theme.dart  á+  segmented_button_theme.dart  áQ  slider_theme.dart  ám  snack_bar_theme.dart  áå  switch_theme.dart  á®  tab_bar_theme.dart  á≈  text_button_theme.dart  áÊ  text_selection_theme.dart  à
  text_theme.dart  à$  time_picker_theme.dart  àE  toggle_buttons_theme.dart  ài  tooltip_theme.dart  àÜ  typography.dart    	dart:core¿ ﬁﬁ ¿ﬂOäL <ÄÜÄ§Ä•ÄŒÄœÄ¯Å"Å#ÅAÅcÅÄÅõÅ∑Å€ÇÇ(ÇHÇdÇ~ÇúÇ∂Ç“ÇËÉÉ!ÉBÉ^É{ÉóÉ∫ÉﬂÑÑ&ÑRÑsÑçÑ®Ñ¬Ñ¸ÖÖ4ÖSÖqÖíÖ¨Ö–Ö˜ÜÜAÜgÜáÜØÜ ÜÈá	á*áPáláãáßáƒáÂà	à#àDàhàÖàüà†àÿàŸàÒâââfâjâ•âªâ⁄ââÒää$ä%äuä¡ä«ããMãûãÓå;ååå∑åΩå”ç!çqç¡çÓçÙé;éMéâéãéåé‘éÿèèèhè∏ê	êê#ê7êáêüê£êë ë=ëlëÜëáë£ëªëºëˇí0íPíQíííòíªììììQìUì°ìøì√ìÌìÒî=îVîoîÑîùî≤î‰î˜ïïï,ïAïVïkï{ïåïüïºï˜ï˝ñJñçñ§ñÆñØñ˘óóóóóoóóóõóËò4òwò{òÀôôjôñôöôÈö6öö õõfõõõüõ≥õ˜ú>úÑúÀùùBùFùìù£ùßù◊ûûûû>û}ûÉû“ü ülürüΩ††R†††°%°+°t°¡¢¢C¢I¢è¢ﬂ£-£_£e£≥£€£·§*§s§y§∫••+•1•A•G•í•’¶¶r¶à¶ÿß&ßtßòßôß∂ßÂ®®D®w®ß®Ÿ©	©'©O©Ä©ò©∫©«©Â™™™s™ƒ™¸´´*´L´f´´ñ´±´«´ﬁ´˘¨¨/¨M¨o¨ì¨¥¨Ã¨‰≠≠&≠>≠d≠y≠ó≠º≠›≠˜ÆÆ+ÆUÆsÆìÆΩÆÁØ#ØOØqØãØ±ØœØ˜∞!∞?∞c∞Ö∞≥∞Â±±C±Å±´±—±ı≤≤=≤m≤£≤’≥≥/≥g≥á≥Ø≥Ÿ¥¥/¥U¥w¥ï¥ø¥ÔµµIµmµ£µ¥µ÷∂∂∂A∂H∂e∂ß∂◊∑∑>∑f∑~∑°∑ƒ∑„∏#∏D∏e∏à∏Õ∏”ππAπäπ•πÛ∫∫a∫Ç∫É∫ê∫úªªGªíª´ª≤ªÓº,ºiºœΩΩBΩgΩ–Ωÿæ!æ"æyæ’ø7ø8øÑø∞ø€¿ @¿ @;¿ @g¿ @ú¿ @Ã¿ A¿ A¿ A@¿ Ac¿ A§¿ B¿ BQ¿ Bó¿ BÍ¿ CG¿ C§¿ C∆¿ D	¿ D6¿ Ds¿ Dƒ¿ E	¿ EB¿ En¿ Eí¿ E›¿ E˘¿ FB¿ Fe¿ Få¿ Fì¿ F€¿ G+¿ Gy¿ G¬¿ H'¿ Hr¿ H√¿ I ¿ I%¿ IE¿ Iä¿ IÆ¿ IÃ¿ IÍ¿ J¿ J0¿ Jd¿ Jk¿ J´¿ J˛¿ KN¿ KO¿ Ko¿ Kè¿ K›¿ L¿ La¿ Læ¿ L‹¿ M%¿ M|¿ MÇ¿ M®¿ N¿ Nh¿ Nn¿ Nâ¿ NÃ¿ O¿ O#¿ OV¿ Oû¿ P¿ Pì¿ Pî¿ P¨¿ P’¿ Q ¿ Q5¿ Qj¿ Q±¿ QË¿ R¿ R>¿ Rg¿ Rö¿ Rœ¿ R¯¿ S'¿ ST¿ Sç¿ S ¿ T¿ T>¿ Tá¿ Tº¿ TÌ¿ U¿ UQ¿ Uz¿ Uµ¿ Uˆ¿ V3¿ Vp¿ V£¿ VÊ¿ W¿ WD¿ Wy¿ W∏¿ WÂ¿ X¿ XC¿ Xl¿ X°¿ X‹¿ Y¿ YL¿ Y{¿ Y±¿ Y‰¿ Y˛¿ ZP¿ Z†¿ Z¿ [¿ [¿ [6¿ [n¿ [¨¿ [‚¿ \¿ \P¿ \Ñ¿ \∂¿ \–¿ \ˆ¿ ]¿ ]<¿ ]`¿ ]o¿ ]è¿ ]´¿ ]À¿ ]ˇ¿ ^#¿ ^E¿ ^c¿ ^â¿ ^•¿ ^√¿ ^È¿ _¿ _5¿ _a¿ _ô¿ _À¿ _Î¿ `¿ `?¿ `a¿ `}¿ `ß¿ `√¿ `·¿ a¿ a%¿ aM¿ am¿ aã¿ a´¿ a◊¿ b¿ b;¿ b[¿ bw¿ bõ¿ b∑¿ b›¿ c¿ c%¿ cG¿ cg¿ cì¿ c√¿ cÒ¿ d¿ dY¿ dÅ¿ d•¿ d«¿ dÔ¿ e¿ e9¿ em¿ eù¿ eÕ¿ eÛ¿ f)¿ fG¿ fm¿ fï¿ f«¿ fÁ¿ g¿ g+¿ gK¿ gs¿ g°¿ g…¿ g˜¿ h¿ hQ¿ hw¿ h~¿ hÇ¿ hÉ¿ hœ¿ i
¿ iB¿ iH¿ iâ¿ iœ¿ iÓ¿ j¿ jV¿ j§¿ jÚ¿ k¿ k¿ k4¿ kU¿ kÉ¿ k≠¿ kÀ¿ kÛ¿ l¿ lD¿ l`¿ lÇ¿ l£¿ l√¿ l‰¿ lÒ¿ m¿ mf¿ m∑¿ mÔ¿ n¿ n+¿ nT¿ nu¿ nï¿ n≥¿ n’¿ nÚ¿ o¿ o2¿ oR¿ ov¿ oõ¿ o∆¿ oÓ¿ p¿ p,¿ pU¿ pu¿ pí¿ p∂¿ p⁄¿ p˜¿ q¿ q-¿ qP¿ qo¿ qç¿ q¨¿ q—¿ q˝¿ r!¿ r@¿ r]¿ r~¿ rõ¿ rΩ¿ r‡¿ rˇ¿ s¿ s>¿ sc¿ sä¿ s∞¿ s’¿ t¿ t%¿ tF¿ tf¿ tâ¿ t¶¿ tÃ¿ tı¿ u¿ uC¿ ue¿ uè¿ u≠¿ uœ¿ uÚ¿ v¿ v9¿ vZ¿ vy¿ vò¿ vª¿ v·¿ w¿ w*¿ wJ¿ wÄ¿ wë¿ w≥¿ w¿ wˆ¿ x¿ xW¿ x¢¿ xÀ¿ xÚ¿ xÛ¿ yA¿ yp¿ yv¿ y≤¿ y˛¿ zH¿ zé¿ zî¿ zﬂ¿ {.¿ {j¿ {p¿ {Ü¿ {—¿ {ı¿ {˚¿ |	¿ |¿ |c¿ |≠¿ |µ¿ |ø¿ |—¿ |◊¿ }	¿ }@¿ }[¿ }Å¿ }õ¿ }≥¿ }∫¿ }˝¿ }˛¿ ~S¿ ~≠¿ ¿ ¿ $¿ D¿ n¿ ó¿ ø¿ Û¿ Ä¿ ÄV¿ Äà¿ Äµ¿ Ä—¿ Ä˚¿ Å¿ Å$¿ Å(¿ Å)¿ ÅF¿ ÅL¿ Åö¿ ÅË¿ Ç&¿ ÇH¿ Çh¿ Çm¿ Çn¿ Çä¿ Çê¿ Çﬁ¿ É,¿ Éi¿ Éä¿ É™¿ ÉØ¿ É∞¿ ÉÍ¿ É¿ Ñ3¿ Ñ9¿ Ñá¿ Ñ’¿ Ñ€¿ Ö*¿ Ö?¿ Ö¢¿ Ö£¿ ÖË¿ ÖÓ¿ ÜA¿ Üå¿ Üç¿ Üı¿ áI¿ áà¿ á¨¿ á≥¿ áÕ¿ á—¿ á“¿ áˆ¿ á¸¿ àD¿ àà¿ àª¿ àÚ¿ àÛ¿ âA¿ âç¿ âŸ¿ â˚¿ â¸¿ ä¿ ä¿ äf¿ äá¿ äç¿ ä⁄¿ ã&¿ ãr¿ ãÄ¿ ãÜ¿ ã“¿ å!¿ åg¿ å≤¿ åÔ¿ åı¿ ç,¿ çn¿ çª¿ é¿ é7¿ é=¿ éw¿ é}¿ é«¿ è¿ èT¿ èÉ¿ èâ¿ èô¿ èü¿ èÌ¿ ê¿ êT¿ êÖ¿ ê÷¿ ê˛¿ ë'¿ ë(¿ ës¿ ëë¿ ëó¿ ë‡¿ í+¿ íy¿ íø¿ í≈¿ ì¿ ìb¿ ìü¿ ì†¿ ì…¿ ìœ¿ î&¿ îY¿ î_¿ îé¿ îî¿ î™¿ î¸¿ ï¿ ï¿ ïk¿ ï}¿ ïÉ¿ ïì¿ ïô¿ ïÈ¿ ñ"¿ ñ#¿ ñi¿ ño¿ ñ¥¿ ñ∫¿ ñÌ¿ ó¿ ó¿ ók¿ ó≠¿ ó≥¿ óÁ¿ ò¿ ò¿ òk¿ òû¿ ò§¿ òœ¿ ô¿ ô¿ ôC¿ ôI¿ ôô¿ ô‚¿ ôÛ¿ ö(¿ ö)¿ öm¿ ös¿ ö¡¿ õ¿ õ5¿ õh¿ õi¿ õ©¿ õØ¿ õ˛¿ úL¿ ú_¿ úe¿ úµ¿ ú˛¿ ùM¿ ùó¿ ù‹¿ û¿ ûk¿ ûº¿ ûı¿ û˚¿ üJ¿ üó¿ ü‚¿ †2¿ †É¿ †∑¿ †„¿ †È¿ °5¿ °V¿ °W¿ °ß¿ °“¿ °”¿ ¢¿ ¢/¿ ¢5¿ ¢E¿ ¢K¿ ¢ë¿ ¢›¿ £
¿ £[¿ £Å¿ £µ¿ £∂¿ §¿ §¿ §L¿ §è¿ §°¿ §ß¿ §È¿ •1¿ •¿ •±¿ •∑¿ •…¿ •œ¿ ¶¿ ¶[¿ ¶®¿ ¶Î¿ ¶Ò¿ ß[¿ ßa¿ ßΩ¿ ®¿ ®u¿ ®—¿ ©-¿ ©3¿ ©q¿ ©∂¿ ©º¿ ™
¿ ™Z¿ ™Ñ¿ ™ä¿ ™§¿ ™™¿ ™Ÿ¿ ™ﬂ¿ ™¿ ´-¿ ´U¿ ´ä¿ ´ê¿ ´•¿ ´ø¿ ´Ë¿ ¨¿ ¨!¿ ¨î¿ ¨›¿ ≠R¿ ≠ü¿ ≠∑¿ ≠Í¿ ≠˚¿ Æ<¿ Æç¿ Æ•¿ Ø.¿ Ød¿ Øî¿ Ø∞¿ ØÈ¿ ∞5¿ ∞z¿ ∞¶¿ ∞¸¿ ±-¿ ±\¿ ±|¿ ±¶¿ ±”¿ ≤ ¿ ≤F¿ ≤É¿ ≤‡¿ ≤Ê¿ ≥.¿ ≥e¿ ≥ô¿ ≥ü¿ ≥Ø¿ ≥µ¿ ≥Ù¿ ¥¿ ¥¿ ¥a¿ ¥g¿ ¥¢¿ ¥Ë¿ µ6¿ µÉ¿ µ‘¿ ∂¿ ∂¿ ∂_¿ ∂∞¿ ∂ˇ¿ ∑N¿ ∑ù¿ ∑‚¿ ∑Ë¿ ∏8¿ ∏á¿ ∏≥¿ ∏π¿ π¿ πJ¿ πó¿ πù¿ πÁ¿ ∫*¿ ∫0¿ ∫¿ ∫À¿ ª!¿ ªP¿ ªe¿ ªä¿ ªã¿ ªñ¿ ªó¿ ª‘¿ ªÔ¿ ª¿ º+¿ ºD¿ ºE¿ º~¿ ºÑ¿ º’¿ Ω&¿ Ωv¿ Ωæ¿ Ω‰¿ æ¿ æ¿ æ7¿ æ\¿ æ]¿ æ¢¿ æ‰¿ ø¿ ø¿ ø¿ ø`¿ øß¿ ø≠¿ ø¯¿ ¿¿ ¿6¿ ¿7¿ ¿Å¿ ¿õ¿ ¿ú¿ ¿ﬁ¿ ¡¿ ¡*¿ ¡+¿ ¡m¿ ¡á¿ ¡†¿ ¡°¿ ¡Í¿ ¡˚¿ ¬¿ ¬¿ ¬R¿ ¬p¿ ¬q¿ ¬¡¿ ¬«¿ √¿ √[¿ √©¿ √ﬁ¿ √˙¿ √˚¿ ƒ)¿ ƒI¿ ƒJ¿ ƒy¿ ƒö¿ ƒõ¿ ƒË¿ ≈4¿ ≈[¿ ≈\¿ ≈≤¿ ≈ﬁ¿ ∆F¿ ∆Ñ¿ ∆®¿ ∆©¿ ∆Ù¿ ∆˙¿ « ¿ «&¿ «s¿ «¡¿ »¿ »Z¿ »É¿ »û¿ »ü¿ »¿¿ »∆¿ »÷¿ …¿ …7¿ …8¿ …y¿ …ƒ¿ …È¿ …Í¿  ¿  	¿  M¿  n¿  o¿  ™¿  “¿  ”¿ À¿ À1¿ À2¿ Àz¿ Àó¿ Àò¿ ÀÁ¿ ÀÌ¿ Ã$¿ ÃC¿ ÃD¿ ÃZ¿ Ã[¿ Ãß¿ Ã€¿ Õ	¿ Õ
¿ ÕX¿ Õv¿ Õó¿ Õò¿ ÕÕ¿ Õ¿ ÕÒ¿ Œ?¿ Œl¿ Œm¿ Œ¿¿ ŒÌ¿ ŒÓ¿ œ?¿ œN¿ œç¿ œé¿ œﬂ¿ –¿ –¿ –`¿ –w¿ –ú¿ –ù¿ ––¿ –÷¿ —¿ —)¿ —*¿ —y¿ —¢¿ —£¿ —◊¿ —›¿ “¿ “4¿ “5¿ “|¿ “ã¿ “∂¿ “∑¿ ”¿ ”¿ ”A¿ ”B¿ ”w¿ ”ò¿ ”ô¿ ”Ë¿ ‘¿ ‘.¿ ‘/¿ ‘|¿ ‘°¿ ‘¢¿ ‘ı¿ ’&¿ ’'¿ ’k¿ ’Ñ¿ ’π¿ ’∫¿ ÷¿ ÷6¿ ÷7¿ ÷{¿ ÷í¿ ÷√¿ ÷ƒ¿ ◊¿ ◊%¿ ◊f¿ ◊g¿ ◊´¿ ◊¿¿ ◊Ì¿ ◊Ó¿ ÿ2¿ ÿ[¿ ÿ\¿ ÿ≠¿ ÿÏ¿ Ÿ¿ Ÿ¿ Ÿa¿ ŸÆ¿ Ÿ€¿ Ÿ‹¿ ⁄-¿ ⁄n¿ ⁄è¿ ⁄ê¿ ⁄‡¿ ⁄¸¿ €/¿ €0¿ €Ä¿ €ü¿ €ÿ¿ €Ÿ¿ ‹(¿ ‹Q¿ ‹Ü¿ ‹á¿ ‹À¿ ‹‰¿ ›¿ ›¿ ›g¿ ›z¿ ›•¿ ›¶¿ ›˛¿ ﬁ9¿ ﬁ:¿ ﬁÜ¿ ﬁ©¿ ﬁ™¿ ﬁ˙¿ ﬂ%¿ ﬂ&¿ ﬂë¿ ﬂæ¿ ﬂø¿ ‡¿ ‡L¿ ‡M¿ ‡Ç¿ ‡à¿ ‡¿¿ ‡Â¿ ‡Ê¿ ·<¿ ·e¿ ·f¿ ·≥¿ ·ÿ¿ ·Ÿ¿ ‚,¿ ‚M¿ ‚N¿ ‚í¿ ‚ß¿ ‚‘¿ ‚’¿ „%¿ „X¿ „Y¿ „©¿ „÷¿ „◊¿ ‰¿ ‰N¿ ‰O¿ ‰í¿ ‰ò¿ ‰—¿ ‰¯¿ ‰˘¿ ÂI¿ ÂX¿ Âx¿ Â≥¿ Â∑¿ ÂÙ¿ Ê!¿ Ê"¿ Ê}¿ ÊÉ¿ Ê¡¿ Êÿ¿ Á(¿ Áv¿ Áƒ¿ ÁË¿ ÁÈ¿ Ë¿ Ë5¿ Ë[¿ Ëî¿ Ë«¿ Ë˜¿ È)¿ ÈY¿ Èw¿ Èü¿ È–¿ ÈÚ¿ Èˇ¿ Í¿ Í9¿ Íè¿ Í‡¿ Î¿ Î0¿ ÎF¿ Îh¿ ÎÇ¿ Îõ¿ Î≤¿ ÎÕ¿ Î„¿ Î˙¿ Ï¿ Ï.¿ ÏK¿ Ïi¿ Ïç¿ ÏÆ¿ Ï∆¿ Ïﬁ¿ Ì ¿ Ì ¿ Ì>¿ Ìc¿ ÌÑ¿ Ìû¿ Ì∫¿ Ì“¿ Ì¸¿ Ó¿ Ó:¿ Ód¿ Óé¿ Ó ¿ Óˆ¿ Ô¿ Ô2¿ ÔX¿ Ôv¿ Ôû¿ Ô»¿ ÔÊ¿ 
¿ ,¿ Z¿ å¿ º¿ Í¿ Ò(¿ ÒR¿ Òx¿ Òú¿ Ò∆¿ Ò‰¿ Ú¿ ÚJ¿ Ú|¿ ÚÆ¿ Ú÷¿ Û¿ Û.¿ ÛV¿ ÛÄ¿ Û¥¿ Û÷¿ Û¸¿ Ù¿ Ù<¿ Ùf¿ Ùñ¿ Ù¿¿ Ù¿ ı¿ ıJ¿ ı[¿ ı£¿ ı·¿ ˆ&¿ ˆh¿ ˆ§¿ ˆ™¿ ˆ¬¿ ˆ”¿ ˆı¿ ˜2¿ ˜8¿ ˜`¿ ˜g¿ ˜©¿ ˜√¿ ¯¿ ¯e¿ ¯µ¿ ¯€¿ ¯‹¿ ¯˚¿ ˘Y¿ ˘∫¿ ˙¿ ˙t¿ ˙√¿ ˚¿ ˚d¿ ˚è¿ ˚Ã¿ ¸¿ ¸W¿ ¸s¿ ¸™¿ ¸‰¿ ¸Û¿ ˝'¿ ˝U¿ ˝¨¿ ˝˛¿ ˛8¿ ˛o¿ ˛†¿ ˛›¿ ˇ¿ ˇ<¿ ˇy¿ ˇ∞¿ ˇÛ¿ 9¿ ë¿ ‡¿¿H¿ö¿º¿Í¿-¿p¿û¿œ¿È¿)¿]¿é¿¬¿¿c¿¶¿⁄¿¿B¿p¿≠¿Ì¿!¿X¿å¿“¿¿g¿≠¿¿K¿Ö¿º¿¸¿	*¿	s¿	≈¿
¿
]¿
ö¿
Ô¿ ¿]¿ù¿Ï¿ ¿Z¿é¿¬¿¿K¿ã¿‘¿¿D¿K¿O¿P¿†¿Ó¿;¿v¿´¿¨¿Ì¿I¿†¿°¿Ó¿$¿*¿z¿À¿¿O¿ü¿Á¿3¿Ñ¿“¿!¿r¿y¿«¿ÿ¿ﬂ¿-¿W¿X¿â¿…¿‘¿˜¿H¿ã¿ñ¿ü¿¶¿™¿´¿Ô¿¿¿^¿è¿Õ¿¿¿J¿ù¿Ô¿@¿r¿∂¿⁄¿*¿I¿O¿k¿o¿p¿•¿´¿ﬂ¿Â¿¿q¿Ç¿¿J¿®¿≤¿“¿¿F¿x¿y¿ì¿ó¿ò¿Á¿F¿…¿)¿e¿ı¿˝¿ ¿ ¿ 1¿ 7¿ Z¿ ò¿ ≥¿ √¿ …¿ „¿!5¿!Ö¿!’¿!˚¿!¸¿"¿"]¿"≈¿#!¿#R¿#®¿$¿$W¿$ä¿$‡¿%"¿%a¿%Ø¿%æ¿%ˇ¿&:¿&Ä¿&ﬂ¿'&¿'j¿'®¿'Ú¿(-¿(k¿(µ¿(˘¿)I¿)ú¿*¿*]¿*û¿*ﬂ¿+>¿+`¿+¢¿+˘¿,L¿,ä¿,Ã¿,Ê¿-@¿-Ü¿-Ã¿.¿.|¿.˙¿/Y¿/ï¿/”¿0%¿0h¿0æ¿1¿1^¿1¨¿1˜¿2Y¿2ƒ¿3+¿3é¿4¿4l¿4ø¿5¿5i¿5¨¿6¿6Ü¿6Ò¿7\¿7≥¿8*¿8p¿8«¿9"¿9ê¿9⁄¿:,¿:v¿:º¿;¿;~¿;ÿ¿<?¿<é¿<‰¿<Î¿<Ô¿<¿<¸¿=¿=K¿=_¿=e¿=Ü¿=⁄¿>,¿>~¿>¶¿>ß¿>»¿?¿?K¿?ç¿?¿¿?˛¿@>¿@|¿@¢¿@‘¿A¿A2¿Ab¿As¿Aü¿A«¿AÛ¿B3¿Bc¿Bë¿Bª¿BÌ¿C¿C?¿Cq¿Cü¿C’¿D¿DQ¿Dè¿Dª¿DÁ¿E'¿EK¿Es¿E©¿Eﬂ¿F¿F1¿FM¿FÅ¿F≠¿F◊¿G¿G;¿GÅ¿G∑¿G„¿H¿H;¿Hc¿Hï¿H…¿Hı¿I#¿IO¿Iá¿I√¿I˝¿J5¿J}¿J±¿J·¿K¿KC¿Kk¿K•¿KÂ¿L!¿L]¿Lè¿L—¿L˚¿M-¿Ma¿Mü¿MÀ¿M˚¿N'¿NS¿Ná¿N¡¿Nı¿O/¿O]¿Oç¿Oë¿Oí¿Oû¿O≥¿Oﬂ¿P1¿PÅ¿P—¿P˜¿P¯¿Q¿Q4¿QS¿Qu¿Qì¿Q≠¿Q…¿QÂ¿R¿R¿R.¿RD¿RY¿Rm¿RÇ¿Rë¿R§¿Rµ¿R»¿RÂ¿R˙¿S¿S ¿S6¿SG¿SY¿So¿SÉ¿Sõ¿S¥¿S”¿SÔ¿T¿T¿T2¿TT¿Te¿T}¿Tï¿T¶¿T∏¿T“¿TÈ¿T¸¿U¿U!¿U:¿UZ¿Ur¿UÖ¿Uñ¿U´¿Uº¿U“¿UÈ¿U¸¿V¿V#¿V<¿VW¿Vq¿Vä¿V´¿V¬¿V◊¿VÎ¿W¿W¿W-¿WJ¿We¿WÄ¿Wñ¿W¥¿W∆¿W‹¿WÛ¿X¿X"¿X7¿XJ¿X]¿Xt¿Xé¿X•¿Xø¿X”¿Y¿Y!¿Y(¿YK¿YO¿YP¿Y\¿Y°¿YÃ¿Z¿ZT¿Z¢¿Z¿[¿[¿[2¿[‡¿\g¿]/¿]⁄¿^e¿^Û¿_~¿`	¿`∞¿a^¿aÒ¿bê¿bû¿c"¿c†¿d7¿dŸ¿ec¿eÍ¿fk¿f¯¿gv¿g˜¿hÑ¿i¿i≠¿j4¿j‹¿k{¿kˇ¿lÉ¿m%¿mE¿m≥¿n/¿nß¿o¿o§¿oº¿p<¿p”¿qj¿r¿rº¿sã¿t:¿tÆ¿u¿uª¿v)¿v–¿w{¿x¿x±¿yL¿yˇ¿z∫¿{C¿{ˆ¿|…¿}t¿~¿~∂¿a¿Ù¿Ä´¿Ån¿Ç)¿Ç‰¿Éã¿ÑR¿ÑÈ¿Öê¿Ü;¿Ü˙¿án¿à¿à¨¿â¿â«¿ä~¿ã)¿ã≤¿å)¿å_¿ç¿ç
¿ç¿ç¿çW¿çz¿ç~¿ç«¿é¿é ¿é$¿és¿é¡¿é≈¿è¿èU¿èY¿è™¿èı¿êD¿êf¿êj¿êx¿ê|¿ê∆¿ë¿ë#¿ëe¿ëè¿ëﬂ¿í0¿í}¿í±¿íÙ¿ìE¿ìm¿ìë¿ì∑¿ì∆¿ìŸ¿î/¿î4¿î5¿îZ¿îs¿îï¿î‡¿ï ¿ï=¿ïN¿ïz¿ï®¿ï·¿ñ¿ñ@¿ñy¿ñ™¿ñ≥¿ñ¥¿ñ÷¿ó¿ó¿ó ¿óÄ¿óÅ¿óç¿óı¿óˆ¿ò¿òÇ¿òÉ¿òè¿ô¿ô¿ôK¿ôQ¿ôì¿ô‡¿ö0¿öj¿öp¿ö¡¿õ¿õH¿õT¿õÅ¿õù¿õ∂¿õ⁄¿ú¿ú ¿úD¿ú_¿úf¿úî¿ú™¿ú“¿úÚ¿ù¿ùP¿ùn¿ùû¿ùÿ¿û¿û¿û¿û¿û¿û#¿û\¿ûú¿û·¿ü¿ü%¿üY¿ü`¿üd¿üf¿üg¿ü∂¿†¿†V¿†£¿†€¿†ﬂ¿°,¿°{¿°∞¿°ÿ¿¢(¿¢F¿¢j¿¢ï¿¢∑¿¢‡¿£¿£I¿£r¿£®¿£∞¿£∑¿£∏¿§¿§.¿§0¿§1¿§<¿§_¿§´¿§¨¿§…¿§Ó¿§Ô¿•=¿•V¿•b¿•ª¿•º¿•»¿•Î¿¶6¿¶^¿¶ç¿¶æ¿ß ¿ß¿ß¿ß¿ßV¿ßÑ¿ßà¿ß◊¿ß¯¿®¿®M¿®N¿®û¿®Ë¿®¯¿©¿©¿©U¿©[¿©¨¿©÷¿©¿©Ò¿™<¿™w¿™•¿™æ¿™·¿™˚¿´¿´¿´?¿´g¿´m¿´ê¿´î¿´ñ¿´ó¿´‘¿´ÿ¿¨¿¨j¿¨õ¿¨ü¿¨Ì¿≠=¿≠à¿≠¶¿≠™¿≠˜¿ÆF¿Æï¿Æü¿Æ£¿ÆÍ¿ÆÓ¿Ø ¿Ø¿Ø&¿Ø:¿ØÖ¿Øó¿ØØ¿Ø«¿Ø÷¿ØÒ¿∞¿∞	¿∞¿∞¿∞m¿∞ü¿±¿±¿±;¿±j¿±p¿±¿¿±¯¿≤¿≤+¿≤D¿≤o¿≤ö¿≤«¿≤Ù¿≤ı¿≥¿≥E¿≥F¿≥i¿≥ï¿≥ñ¿≥‘¿≥⁄¿¥'¿¥u¿¥é¿¥«¿¥»¿µ¿µ¿µc¿µ≥¿∂¿∂E¿∂K¿∂á¿∂„¿∂‰¿∑)¿∑/¿∑{¿∑Ã¿∏¿∏Q¿∏W¿∏ì¿∏Î¿∏Ï¿π;¿πÑ¿πä¿π—¿∫¿∫3¿∫9¿∫I¿∫O¿∫õ¿∫œ¿ª¿ªA¿ª©¿ª™¿ª˙¿º ¿ºQ¿ºÜ¿ºå¿ºú¿º¢¿ºÏ¿Ω¿Ωk¿Ωä¿Ω‰¿æ=¿æD¿æH¿æI¿æî¿æ™¿æ≈¿æ›¿æÛ¿æ˙¿ø¿øE¿øp¿øw¿ø{¿ø|¿ø≤¿ø∏¿¿¿¿T¿¿ü¿¿„¿¡%¿¡H¿¡N¿¡^¿¡d¿¡∏¿¡Ï¿¬U¿¬p¿¬q¿¬•¿¬´¿¬Ù¿√E¿√ê¿√‘¿ƒ¿ƒ9¿ƒ?¿ƒO¿ƒU¿ƒ©¿ƒ€¿≈D¿≈]¿≈^¿≈≤¿≈∏¿∆¿∆D¿∆J¿∆ë¿∆Ω¿∆ﬂ¿«-¿«~¿«Æ¿«œ¿«–¿»¿»¿»	¿»;¿»Ö¿»†¿»∞¿»∂¿»–¿…¿…F¿…M¿…Q¿…R¿…†¿…Õ¿…”¿ #¿ V¿ ö¿ »¿ È¿ÀO¿À∏¿Àø¿À√¿Àƒ¿À–¿ÀÛ¿Ã¿Ã3¿Ã9¿Ã[¿ÃÖ¿Ã¨¿Ã∞¿Ã±¿ÃΩ¿Ãˆ¿Ã˜¿Õ¿ÕH¿Õs¿Õƒ¿Œ¿Œ¿Œ¿Œ"¿Œ=¿Œ¨¿Œ∞¿Œ≤¿Œ≥¿ŒÂ¿ŒÊ¿œ)¿œm¿œï¿œ»¿œ…¿œ˛¿–¿–<¿–\¿–É¿–¨¿–œ¿–ı¿—¿—F¿—f¿—à¿—±¿—‹¿“¿“)¿“P¿“~¿“ù¿“æ¿“Ê¿”¿”4¿”[¿”Å¿”Æ¿” ¿”Ë¿‘¿‘4¿‘U¿‘x¿‘ñ¿‘∫¿‘Á¿’¿’8¿’c¿’ë¿’≤¿’“¿’˜¿÷¿÷<¿÷a¿÷~¿÷ö¿÷ø¿÷Ê¿◊¿◊O¿◊q¿◊t¿◊u¿◊©¿◊»¿◊Ê¿ÿ¿ÿ-¿ÿV¿ÿy¿ÿü¿ÿƒ¿ÿ¿Ÿ¿Ÿ2¿Ÿ[¿ŸÜ¿Ÿ´¿Ÿ”¿Ÿ˙¿⁄(¿⁄G¿⁄h¿⁄ê¿⁄∫¿⁄ﬁ¿€¿€+¿€X¿€t¿€í¿€∑¿€ﬁ¿€ˇ¿‹"¿‹@¿‹d¿‹ë¿‹ª¿‹‚¿›¿›;¿›\¿›|¿›°¿›»¿›Ê¿ﬁ¿ﬁ(¿ﬁD¿ﬁi¿ﬁê¿ﬁµ¿ﬁ˘¿ﬂ¿ﬂ¿ﬂ¿ﬂO    ?Ä• Ä∂ÄÃÄœ  Ä¯  Å#  ÅA  Åc  ÅÄ  Åõ  Å∑  Å€  Ç  Ç(  ÇH  Çd  Ç~  Çú  Ç∂  Ç“  ÇË  É  É!  ÉB  É^  É{  Éó  É∫  Éﬂ  Ñ  Ñ&  ÑR  Ñs  Ñç  Ñ®  Ñ¬ ÑŸÑ˙Ñ¸  Ö  Ö4  ÖS  Öq  Öí  Ö¨  Ö–  Ö˜  Ü  ÜA  Üg  Üá  ÜØ  Ü   ÜÈ  á	  á*  áP  ál  áã  áß  áƒ  áÂ  à	  à#  àD  àh  àÖ  à†à«à÷ âÖzâ´Äî/// Defines a customized theme for components with an `adaptive` factory constructor.
///
/// Currently, only [Switch.adaptive] supports this class.â∂â∂âΩ2 â‚âÏ/// Creates an [Adaptation].   âÛ0ä/// The adaptation's type.   ä'ÑaéQÑ/// Typically, this is overridden to return an instance of a custom component
/// ThemeData class, like [SwitchThemeData], instead of the defaultValue.
///
/// Factory constructors that support adaptations - currently only
/// [Switch.adaptive] - look for a type-specific adaptation in
/// [ThemeData.adaptationMap] when computing their effective default component
/// theme. If a matching adaptation is not found, the component may choose to
/// use a default adaptation. For example, the [Switch.adaptive] component
/// uses an empty [SwitchThemeData] if a matching adaptation is not found, for
/// the sake of backwards compatibility.
///
/// {@tool dartpad}
/// This sample shows how to create and use subclasses of [Adaptation] that
/// define adaptive [SwitchThemeData]s. The [adapt] method in this example is
/// overridden to only customize cupertino-style switches, but it can also be
/// used to customize any other platforms.
///
/// ** See code in examples/api/lib/material/switch/switch.4.dart **
/// {@end-tool} éWéb  éhék    éåÑxëÇs/// An interface that defines custom additions to a [ThemeData] object.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=8-szcYzFVao}
///
/// Typically used for custom colors. To use, subclass [ThemeExtension],
/// define a number of fields (e.g. [Color]s), and implement the [copyWith] and
/// [lerp] methods. The latter will ensure smooth transitions of properties when
/// switching themes.
///
/// {@tool dartpad}
/// This sample shows how to create and use a subclass of [ThemeExtension] that
/// defines two colors.
///
/// ** See code in examples/api/lib/material/theme/theme_extension.1.dart **
/// {@end-tool}ëëë?F ëtëÇ,/// Enable const constructor for subclasses.   ëâ1ë∞/// The extension's type.   ëæÄëíDo/// Creates a copy of this theme extension with the given fields
/// replaced by the non-null parameter values.   íSÄØíœc/// Linearly interpolate with another [ThemeExtension] object.
///
/// {@macro dart.ui.shadow.lerp} í‘"íÚ  í¯ì     ó¿uÏûÜÏ/// Defines the configuration of the overall visual [Theme] for a [MaterialApp]
/// or a widget subtree within the app.
///
/// The [MaterialApp] theme property can be used to configure the appearance
/// of the entire app. Widget subtrees within an app can override the app's
/// theme by including a [Theme] widget at the top of the subtree.
///
/// Widgets whose appearance should align with the overall theme can obtain the
/// current theme's configuration with [Theme.of]. Material components typically
/// depend exclusively on the [colorScheme] and [textTheme]. These properties
/// are guaranteed to have non-null values.
///
/// The static [Theme.of] method finds the [ThemeData] value specified for the
/// nearest [BuildContext] ancestor. This lookup is inexpensive, essentially
/// just a single HashMap access. It can sometimes be a little confusing
/// because [Theme.of] can not see a [Theme] widget that is defined in the
/// current build method's context. To overcome that, create a new custom widget
/// for the subtree that appears below the new [Theme], or insert a widget
/// that creates a new BuildContext, like [Builder].
///
/// {@tool dartpad}
/// This example demonstrates how a typical [MaterialApp] specifies
/// and uses a custom [Theme]. The theme's [ColorScheme] is based on a
/// single "seed" color and configures itself to match the platform's
/// current light or dark color configuration. The theme overrides the
/// default configuration of [FloatingActionButton] to show how to
/// customize the appearance a class of components.
///
/// ** See code in examples/api/lib/material/theme_data/theme_data.0.dart **
/// {@end-tool}
///
/// See <https://material.io/design/color/> for
/// more discussion on how to pick the right colors. û@¿ JA ¶|¶ÖáÂ/// Create a [ThemeData] that's used to configure a [Theme].
///
/// The [colorScheme] and [textTheme] are used by the Material components to
/// compute default values for visual properties. The API documentation for
/// each component widget explains exactly how the defaults are computed.
///
/// When providing a [ColorScheme], apps can either provide one directly
/// with the [colorScheme] parameter, or have one generated for them by
/// using the [colorSchemeSeed] and [brightness] parameters. A generated
/// color scheme will be based on the tones of [colorSchemeSeed] and all of
/// its contrasting color will meet accessibility guidelines for readability.
/// (See [ColorScheme.fromSeed] for more details.)
///
/// If the app wants to customize a generated color scheme, it can use
/// [ColorScheme.fromSeed] directly and then [ColorScheme.copyWith] on the
/// result to override any colors that need to be replaced. The result of
/// this can be used as the [colorScheme] directly.
///
/// For historical reasons, instead of using a [colorSchemeSeed] or
/// [colorScheme], you can provide either a [primaryColor] or [primarySwatch]
/// to construct the [colorScheme], but the results will not be as complete
/// as when using generation from a seed color.
///
/// If [colorSchemeSeed] is non-null then [colorScheme], [primaryColor] and
/// [primarySwatch] must all be null.
///
/// The [textTheme] [TextStyle] colors are black if the color scheme's
/// brightness is [Brightness.light], and white for [Brightness.dark].
///
/// To override the appearance of specific components, provide
/// a component theme parameter like [sliderTheme], [toggleButtonsTheme],
/// or [bottomNavigationBarTheme].
///
/// See also:
///
///  * [ThemeData.from], which creates a ThemeData from a [ColorScheme].
///  * [ThemeData.light], which creates the default light theme.
///  * [ThemeData.dark], which creates the deafult dark theme.
///  * [ColorScheme.fromSeed], which is used to create a [ColorScheme] from a seed color.Xß∫)ßŸ  ßÈ ß  ®3®-  ®H-®l  ®{*®í  ®´,®√  ®›*®Ù  ©©  ©+"©@  ©S+©r  ©Ñ©ã  ©ú©¨  ©À©Ÿ  ©È©ˆ  ™™  ´ ´  ´´   ´.´6  ´P´X  ´j´r  ´É´ã  ´ö´¢  ´µ´Ω  ´À´”  ´‚´Í  ´˝¨  ¨¨  ¨3¨;  ¨Q¨a  ¨s¨{  ¨ó¨ü  ¨∏¨¿  ¨–¨ÿ  ¨Ë¨  ≠*≠3  ≠B ≠Q  ≠h≠q  ≠}≠ç  ≠õ≠´  ≠¿≠Ã  ≠·≠Ì  ≠˚Æ  Æ/$ÆE  ÆYÆg  ÆwÆà  Æó$Æ±  Æ¡$Æ’  ÆÎ6Ø
  Ø'&Ø>  ØSØe  ØuØÅ  Øè Ø£  ØµØ≈  Ø”"ØË  Ø˚$∞  ∞%∞3  ∞C∞V  ∞g∞y  ∞â(∞°  ∞∑,∞—  ∞È*±  ±(±1  ±G8±g  ±Ö$±õ  ±Ø ±√  ±’±Ë  ±˘$≤  ≤#≤3  ≤A*≤Z  ≤q0≤ç  ≤ß,≤¡  ≤Ÿ,≤Û  ≥"≥   ≥32≥P  ≥k≥|  ≥ã"≥†  ≥≥$≥…  ≥›.≥¯  ¥¥#  ¥3 ¥G  ¥Y¥k  ¥{¥â  ¥ô$¥Ø  ¥√*¥‹  ¥Û$µ	  µ*µ6  µMµ`  µßÄò∂2  µßµ®µ≤∂µ∫µ‹¿ hÖêl¿ iˇ¿ j ¿ jÅ\/// Create a [ThemeData] given a set of exact values. Most values must be
/// specified. They all must also be non-null except for
/// [cupertinoOverrideTheme], and deprecated members.
///
/// This will rarely be used directly. It is used by [lerp] to
/// create intermediate themes based on two themes created with the
/// [ThemeData] constructor.R¿ k8¿ kG  ¿ kY(¿ kh  ¿ ká$¿ kñ  ¿ k±¿ k¿  ¿ kœ"¿ kﬁ  ¿ k˜#¿ l  ¿ l "¿ l/  ¿ lH¿ lW  ¿ ld¿ ls  ¿ lÜ¿ lï  ¿ lß¿ l∂  ¿ l«¿ l÷  ¿ lı¿ m  ¿ mÛ¿ n  ¿ n¿ n!  ¿ n/#¿ n>  ¿ nX¿ ng  ¿ ny¿ nà  ¿ nô¿ n®  ¿ n∑¿ n∆  ¿ nŸ¿ nË  ¿ nˆ¿ o  ¿ o¿ o#  ¿ o6¿ oE  ¿ oV¿ oe  ¿ oz¿ oâ  ¿ oü%¿ oÆ  ¿ o "¿ oŸ  ¿ oÚ¿ p  ¿ p¿ p   ¿ p0#¿ p?  ¿ py¿ pà  ¿ pñ¿ p•  ¿ p∫¿ p…  ¿ pﬁ¿ pÌ  ¿ p˚¿ q
  ¿ q1¿ q@  ¿ qT¿ qc  ¿ qs¿ qÇ  ¿ që¿ q†  ¿ q∞¿ qø  ¿ q’&¿ q‰  ¿ r¿ r  ¿ r%¿ r4  ¿ rD¿ rS  ¿ ra¿ rp  ¿ rÇ¿ rë  ¿ rü¿ rÆ  ¿ r¡¿ r–  ¿ r‰¿ rÛ  ¿ s¿ s  ¿ s#¿ s2  ¿ sB¿ sQ  ¿ sg!¿ sv  ¿ sé ¿ sù  ¿ s¥¿ s√  ¿ sŸ'¿ sË  ¿ t¿ t  ¿ t)¿ t8  ¿ tJ¿ tY  ¿ tj¿ ty  ¿ tç¿ tú  ¿ t™ ¿ tπ  ¿ t–#¿ tﬂ  ¿ t˘!¿ u  ¿ u !¿ u/  ¿ uG¿ uV  ¿ ui$¿ ux  ¿ uì¿ u¢  ¿ u±¿ u¿  ¿ u”¿ u‚  ¿ uˆ"¿ v  ¿ v¿ v-  ¿ v=¿ vL  ¿ v^¿ vm  ¿ v}¿ vå  ¿ vú¿ v´  ¿ vø ¿ vŒ  ¿ vÂ¿ vÙ  ¿ w ¿ w  ¿ w.¿ w=  ¿ wÑÄò¿ x  ¿ wÑ¿ wÖ¿ wè¿ wÙ¿ wó¿ wπ¿ xπ¿ x©¿ xª¿ x“¿ xÿ¿ xÔ¿ xË¿ xŸ¿ xÎ¿ xıà2¿ }S¿ }T¿ }XÑ/// Create a [ThemeData] based on the colors in the given [colorScheme] and
/// text styles of the optional [textTheme].
///
/// If [colorScheme].brightness is [Brightness.dark] then
/// [ThemeData.applyElevationOverlayColor] will be set to true to support
/// the Material dark theme method for indicating elevation by applying
/// a semi-transparent onSurface color on top of the surface color.
///
/// This is the recommended method to theme your application. As we move
/// forward we will be converting all the widget implementations to only use
/// colors or colors derived from those in [ColorScheme].
///
/// {@tool snippet}
/// This example will set up an application to use the baseline Material
/// Design light and dark themes.
///
/// ```dart
/// MaterialApp(
///   theme: ThemeData.from(colorScheme: const ColorScheme.light()),
///   darkTheme: ThemeData.from(colorScheme: const ColorScheme.dark()),
/// )
/// ```
/// {@end-tool}
///
/// See <https://material.io/design/color/> for
/// more discussion on how to pick the right colors.¿ }_ ¿ }u  ¿ }Ö¿ }ë  ¿ }ü¿ }¶   ¿ Å+ÅA¿ Å˚¿ Å¸¿ ÇÄ∂/// A default light theme.
///
/// This theme does not contain text geometry. Instead, it is expected that
/// this theme is localized using text geometry using [ThemeData.localize].¿ Ç¿ Ç
   ¿ ÇpÅ>¿ É?¿ É@¿ ÉDÄµ/// A default dark theme.
///
/// This theme does not contain text geometry. Instead, it is expected that
/// this theme is localized using text geometry using [ThemeData.localize].¿ ÉF¿ ÉM   ¿ É≤ÅÔ¿ ÖR¿ ÖS¿ Ö[Å|/// The default color theme. Same as [ThemeData.light].
///
/// This is used by [Theme.of] when no theme has been specified.
///
/// This theme does not contain text geometry. Instead, it is expected that
/// this theme is localized using text geometry using [ThemeData.localize].
///
/// Most applications would use [Theme.of], which provides correct localized
/// text geometry.¿ Ö]¿ Öd   T¿ äá¿ ëÜü/// Apply a semi-transparent overlay color on Material surfaces to indicate
/// elevation for dark themes.
///
/// If [useMaterial3] is true, then this flag is ignored as there is a new
/// [Material.surfaceTintColor] used to create an overlay for Material 3.
/// This flag is meant only for the Material 2 elevation overlay for dark
/// themes.
///
/// Material drop shadows can be difficult to see in a dark theme, so the
/// elevation of a surface should be portrayed with an "overlay" in addition
/// to the shadow. As the elevation of the component increases, the
/// overlay increases in opacity. [applyElevationOverlayColor] turns the
/// application of this overlay on or off for dark themes.
///
/// If true and [brightness] is [Brightness.dark], a
/// semi-transparent version of [ColorScheme.onSurface] will be
/// applied on top of [Material] widgets that have a [ColorScheme.surface]
/// color. The level of transparency is based on [Material.elevation] as
/// per the Material Dark theme specification.
///
/// If false the surface color will be used unmodified.
///
/// Defaults to false in order to maintain backwards compatibility with
/// apps that were built before the Material Dark theme specification
/// was published. New apps should set this to true for any themes
/// where [brightness] is [Brightness.dark].
///
/// See also:
///
///  * [Material.elevation], which effects the level of transparency of the
///    overlay color.
///  * [ElevationOverlay.applyOverlay], which is used by [Material] to apply
///    the overlay color to its surface color.
///  * <https://material.io/design/color/dark-theme.html>, which specifies how
///    the overlay should be applied. ¿ ë*Çs¿ ìáÇ%/// Components of the [CupertinoThemeData] to override from the Material
/// [ThemeData] adaptation.
///
/// By default, [cupertinoOverrideTheme] is null and Cupertino widgets
/// descendant to the Material [Theme] will adhere to a [CupertinoTheme]
/// derived from the Material [ThemeData]. e.g. [ThemeData]'s [ColorScheme]
/// will also inform the [CupertinoThemeData]'s `primaryColor` etc.
///
/// This cascading effect for individual attributes of the [CupertinoThemeData]
/// can be overridden using attributes of this [cupertinoOverrideTheme]. ¿ ì¢Ç~¿ ñÇ&/// Arbitrary additions to this theme.
///
/// To define extensions, pass an [Iterable] containing one or more [ThemeExtension]
/// subclasses to [ThemeData.new] or [copyWith].
///
/// To obtain an extension, use [extension].
///
/// {@tool dartpad}
/// This sample shows how to create and use a subclass of [ThemeExtension] that
/// defines two colors.
///
/// ** See code in examples/api/lib/material/theme/theme_extension.1.dart **
/// {@end-tool}
///
/// See also:
///
/// * [extension], a convenience function for obtaining a specific extension. ¿ óÄ˛¿ òÄƒ/// A map which contains the adaptations for the theme. The entry's key is the
/// type of the adaptation; the value is the adaptation itself.
///
/// To obtain an adaptation, use [getAdaptation]. ¿ òÄ·¿ òÏÄ©/// The default [InputDecoration] values for [InputDecorator], [TextField],
/// and [TextFormField] are based on this theme.
///
/// See [InputDecoration.applyDefaults]. ¿ ôÅ!¿ öÄÂ/// Configures the hit test size of certain Material widgets.
///
/// Defaults to a [platform]-appropriate size: [MaterialTapTargetSize.padded]
/// on mobile platforms, [MaterialTapTargetSize.shrinkWrap] on desktop
/// platforms. ¿ ö+Å;¿ õRÅ/// Default [MaterialPageRoute] transitions per [TargetPlatform].
///
/// [MaterialPageRoute.buildTransitions] delegates to a [platform] specific
/// [PageTransitionsBuilder]. If a matching builder is not found, a builder
/// whose platform is null is used. ¿ õkÖÈ¿ °LÖô/// The platform the material widgets should adapt to target.
///
/// Defaults to the current platform, as exposed by [defaultTargetPlatform].
/// This should be used in order to style UI elements according to platform
/// conventions.
///
/// Widgets from the material library should use this getter (via [Theme.of])
/// to determine the current platform for the purpose of emulating the
/// platform behavior (e.g. scrolling or haptic effects). Widgets and render
/// objects at lower layers that try to emulate the underlying platform
/// can depend on [defaultTargetPlatform] directly, or may require
/// that the target platform be provided as an argument. The
/// [dart:io.Platform] object should only be used directly when it's critical
/// to actually know the current platform, without any overrides possible (for
/// example, when a system API is about to be called).
///
/// In a test environment, the platform returned is [TargetPlatform.android]
/// regardless of the host platform. (Android was chosen because the tests
/// were originally written assuming Android-like behavior, and we added
/// platform adaptations for other platforms later). Tests can check behavior
/// for other platforms by setting the [platform] of the [Theme] explicitly to
/// another [TargetPlatform] value, or by setting
/// [debugDefaultTargetPlatformOverride].
///
/// Determines the defaults for [typography] and [materialTapTargetSize]. ¿ °Yw¿ °¬M/// A theme for customizing the colors, thickness, and shape of [Scrollbar]s. ¿ °’Åﬁ¿ £¶Åô/// Defines the appearance of ink splashes produces by [InkWell]
/// and [InkResponse].
///
/// See also:
///
///  * [InkSplash.splashFactory], which defines the default splash.
///  * [InkRipple.splashFactory], which defines a splash that spreads out
///    more aggressively than the default.
///  * [InkSparkle.splashFactory], which defines a more aggressive and organic
///    splash with sparkle effects. ¿ £∏êU¿ ¥èó/// A temporary flag that can be used to opt-out of Material 3 features.
///
/// This flag is _true_ by default. If false, then components will
/// continue to use the colors, typography and other features of
/// Material 2.
///
/// In the long run this flag will be deprecated and eventually
/// only Material 3 will be supported. We recommend that applications
/// migrate to Material 3 as soon as that's practical. Until that migration
/// is complete, this flag can be set to false.
///
/// ## Defaults
///
/// If a [ThemeData] is _constructed_ with [useMaterial3] set to true, then
/// some properties will get updated defaults. However, the
/// [ThemeData.copyWith] method with [useMaterial3] set to true will _not_
/// change any of these properties in the resulting [ThemeData].
///
/// <style>table,td,th { border-collapse: collapse; padding: 0.45em; } td { border: 1px solid }</style>
///
/// | Property        | Material 3 default             | Material 2 default             |
/// | :-------------- | :----------------------------- | :----------------------------- |
/// | [colorScheme]   | M3 baseline light color scheme | M2 baseline light color scheme |
/// | [typography]    | [Typography.material2021]      | [Typography.material2014]      |
/// | [splashFactory] | [InkSparkle]* or [InkRipple]   | [InkSplash]                    |
///
/// \* if the target platform is Android and the app is not
/// running on the web, otherwise it will fallback to [InkRipple].
///
/// If [brightness] is [Brightness.dark] then the default color scheme will
/// be either the M3 baseline dark color scheme or the M2 baseline dark color
/// scheme depending on [useMaterial3].
///
/// ## Affected widgets
///
/// This flag affects styles and components.
///
/// ### Styles
///   * Color: [ColorScheme], [Material] (see table above)
///   * Shape: (see components below)
///   * Typography: [Typography] (see table above)
///
/// ### Components
///   * Badges: [Badge]
///   * Bottom app bar: [BottomAppBar]
///   * Bottom sheets: [BottomSheet]
///   * Buttons
///     - Common buttons: [ElevatedButton], [FilledButton], [FilledButton.tonal], [OutlinedButton], [TextButton]
///     - FAB: [FloatingActionButton], [FloatingActionButton.extended]
///     - Icon buttons: [IconButton], [IconButton.filled] (*new*), [IconButton.filledTonal], [IconButton.outlined]
///     - Segmented buttons: [SegmentedButton] (replacing [ToggleButtons])
///   * Cards: [Card]
///   * Checkbox: [Checkbox], [CheckboxListTile]
///   * Chips:
///     - [ActionChip] (used for Assist and Suggestion chips),
///     - [FilterChip], [ChoiceChip] (used for single selection filter chips),
///     - [InputChip]
///   * Date pickers: [showDatePicker], [showDateRangePicker], [DatePickerDialog], [DateRangePickerDialog], [InputDatePickerFormField]
///   * Dialogs: [AlertDialog], [Dialog.fullscreen]
///   * Divider: [Divider], [VerticalDivider]
///   * Lists: [ListTile]
///   * Menus: [MenuAnchor], [DropdownMenu], [MenuBar]
///   * Navigation bar: [NavigationBar] (replacing [BottomNavigationBar])
///   * Navigation drawer: [NavigationDrawer] (replacing [Drawer])
///   * Navigation rail: [NavigationRail]
///   * Progress indicators: [CircularProgressIndicator], [LinearProgressIndicator]
///   * Radio button: [Radio], [RadioListTile]
///   * Search: [SearchBar], [SearchAnchor],
///   * Snack bar: [SnackBar]
///   * Slider: [Slider], [RangeSlider]
///   * Switch: [Switch], [SwitchListTile]
///   * Tabs: [TabBar], [TabBar.secondary]
///   * TextFields: [TextField] together with its [InputDecoration]
///   * Time pickers: [showTimePicker], [TimePickerDialog]
///   * Top app bar: [AppBar], [SliverAppBar], [SliverAppBar.medium], [SliverAppBar.large]
///
/// In addition, this flag enables features introduced in Android 12.
///   * Stretch overscroll: [MaterialScrollBehavior]
///   * Ripple: `splashFactory` (see table above)
///
/// See also:
///
///   * [Material 3 specification](https://m3.material.io/). ¿ ¥áv¿ ª{á/// The density value for specifying the compactness of various UI components.
///
/// {@template flutter.material.themedata.visualDensity}
/// Density, in the context of a UI, is the vertical and horizontal
/// "compactness" of the elements in the UI. It is unitless, since it means
/// different things to different UI elements. For buttons, it affects the
/// spacing around the centered label of the button. For lists, it affects the
/// distance between baselines of entries in the list.
///
/// Typically, density values are integral, but any value in range may be
/// used. The range includes values from [VisualDensity.minimumDensity] (which
/// is -4), to [VisualDensity.maximumDensity] (which is 4), inclusive, where
/// negative values indicate a denser, more compact, UI, and positive values
/// indicate a less dense, more expanded, UI. If a component doesn't support
/// the value given, it will clamp to the nearest supported value.
///
/// The default for visual densities is zero for both vertical and horizontal
/// densities, which corresponds to the default visual density of components
/// in the Material Design specification.
///
/// As a rule of thumb, a change of 1 or -1 in density corresponds to 4
/// logical pixels. However, this is not a strict relationship since
/// components interpret the density values appropriately for their needs.
///
/// A larger value translates to a spacing increase (less dense), and a
/// smaller value translates to a spacing decrease (more dense).
///
/// In Material Design 3, the [visualDensity] does not override the value of
/// [IconButton.visualDensity] which defaults to [VisualDensity.standard]
/// for all platforms. To override the default value of [IconButton.visualDensity],
/// use [ThemeData.iconButtonTheme] instead.
/// {@endtemplate} ¿ ªôT¿ ª‚:/// The default color of [MaterialType.canvas] [Material]. ¿ ªÚP¿ º98/// The color of [Material] when it is used as a [Card]. ¿ ºGÅº¿ Ω¯Åê/// {@macro flutter.material.color_scheme.ColorScheme}
///
/// This property was added much later than the theme's set of highly specific
/// colors, like [cardColor], [canvasColor] etc. New components can be defined
/// exclusively in terms of [colorScheme]. Existing components will gradually
/// migrate to it, to the extent that is possible without significant
/// backwards compatibility breaks. ¿ æR¿ æE./// The background color of [Dialog] elements. ¿ æ_ÄΩ¿ øÄù/// The color used for widgets that are inoperative, regardless of
/// their state. For example, a disabled checkbox (which may be
/// checked or unchecked). ¿ ø!Å¿ ¿(Ä/// The color of [Divider]s and [PopupMenuDivider]s, also used
/// between [ListTile]s, between rows in [DataTable]s, and so forth.
///
/// To create an appropriate [BorderSide] that uses this color, consider
/// [Divider.createBorderSide]. ¿ ¿9`¿ ¿èG/// The focus color used indicate that a component has the input focus. ¿ ¿ûÄä¿ ¡k/// The highlight color used during ink splash animations or to
/// indicate an item in a menu is selected. ¿ ¡-q¿ ¡ïW/// The color to use for hint text or placeholder text, e.g. in
/// [TextField] fields. ¿ ¡£p¿ ¬	U/// The hover color used to indicate when a pointer is hovering over a
/// component. ¿ ¬V¿ ¬`9/// The color of the selected tab indicator in a tab bar. ¿ ¬sÅÖ¿ √ÏÅ`/// The background color for major parts of the app (toolbars, tab bars, etc)
///
/// The theme's [colorScheme] property contains [ColorScheme.primary], as
/// well as a color that contrasts well with the primary color called
/// [ColorScheme.onPrimary]. It might be simpler to just configure an app's
/// visuals in terms of the theme's [colorScheme]. ¿ √˝J¿ ƒ7+/// A darker version of the [primaryColor]. ¿ ƒLL¿ ƒá,/// A lighter version of the [primaryColor]. ¿ ƒùÄº¿ ≈BÄî/// The default color of the [Material] that underlies the [Scaffold]. The
/// background color for a typical material app or a page within the app. ¿ ≈^ÅH¿ ∆íS/// The color of the header of a [PaginatedDataTable] when there are selected rows. ¿ ∆´ÅÒ¿ »ëÅ«/// The color that the [Material] widget uses to draw elevation shadows.
///
/// Defaults to fully opaque black.
///
/// Shadows can be difficult to see in a dark theme, so the elevation of a
/// surface should be rendered with an "overlay" in addition to the shadow.
/// As the elevation of the component increases, the overlay increases in
/// opacity. The [applyElevationOverlayColor] property turns the elevation
/// overlay on or off for dark themes. ¿ »°Äî¿ …*t/// The color of ink splashes.
///
/// See also:
///  * [splashFactory], which defines the appearance of the splash. ¿ …:Ä≠¿ …“Äá/// The color used for widgets in their inactive (but enabled)
/// state. For example, an unchecked checkbox. See also [disabledColor]. ¿  a¿  cA/// An icon theme that contrasts with the card and canvas colors. ¿  q_¿  ¿8/// An icon theme that contrasts with the primary color. ¿  ’Z¿ À7/// A text theme that contrasts with the primary color. ¿ À4a¿ ÀåE/// Text with a color that contrasts with the card and canvas colors. ¿ ÀöÄß¿ Ã7ÄÖ/// The color and geometry [TextTheme] values used to configure [textTheme].
///
/// Defaults to a [platform]-appropriate typography. ¿ Ã]Ä™¿ Ã¯{/// A theme for customizing icons of [BackButtonIcon], [CloseButtonIcon],
/// [DrawerButtonIcon], or [EndDrawerButtonIcon]. ¿ ÕÄâ¿ Õäg/// A theme for customizing the color, elevation, brightness, iconTheme and
/// textTheme of [AppBar]s. ¿ ÕöT¿ Õ‰2/// A theme for customizing the color of [Badge]s. ¿ ÕÛw¿ Œ_K/// A theme for customizing the color and text style of a [MaterialBanner]. ¿ Œo|¿ Œ⁄P/// A theme for customizing the shape, elevation, and color of a [BottomAppBar]. ¿ ŒÄõ¿ œs[/// A theme for customizing the appearance and layout of [BottomNavigationBar]
/// widgets. ¿ œê|¿ œ¸N/// A theme for customizing the color, elevation, and shape of a bottom sheet. ¿ –Äâ¿ –èc/// Defines the default configuration of button widgets, like [DropdownButton]
/// and [ButtonBar]. ¿ –üÄà¿ —h/// The colors and styles used to render [Card].
///
/// This is the value returned from [CardTheme.of]. ¿ —,t¿ —ìL/// A theme for customizing the appearance and layout of [Checkbox] widgets. ¿ —•Äç¿ “)i/// The colors and styles used to render [Chip]s.
///
/// This is the value returned from [ChipTheme.of]. ¿ “7}¿ “¶Q/// A theme for customizing the appearance and layout of [DataTable]
/// widgets. ¿ “πÄÜ¿ ”0X/// A theme for customizing the appearance and layout of [DatePickerDialog]
/// widgets. ¿ ”DR¿ ”ã2/// A theme for customizing the shape of a dialog. ¿ ”õÄë¿ ‘ i/// A theme for customizing the color, thickness, and indents of [Divider]s,
/// [VerticalDivider]s, etc. ¿ ‘1n¿ ‘îJ/// A theme for customizing the appearance and layout of [Drawer] widgets. ¿ ‘§ÄÄ¿ ’P/// A theme for customizing the appearance and layout of [DropdownMenu] widgets. ¿ ’)Äé¿ ’§X/// A theme for customizing the appearance and internal layout of
/// [ElevatedButton]s. ¿ ’ºx¿ ÷"F/// A theme for customizing the visual properties of [ExpansionTile]s. ¿ ÷9Äà¿ ÷∞V/// A theme for customizing the appearance and internal layout of
/// [FilledButton]s. ¿ ÷∆Äû¿ ◊K\/// A theme for customizing the shape, elevation, and color of a
/// [FloatingActionButton]. ¿ ◊iÄÇ¿ ◊‹T/// A theme for customizing the appearance and internal layout of
/// [IconButton]s. ¿ ◊i¿ ÿLA/// A theme for customizing the appearance of [ListTile] widgets. ¿ ÿ^Ä≥¿ ŸÄã/// A theme for customizing the color, shape, elevation, and other [MenuStyle]
/// aspects of the menu bar created by the [MenuBar] widget. ¿ ŸÄ√¿ Ÿ Äï/// A theme for customizing the color, shape, elevation, and text style of
/// cascading menu buttons created by [SubmenuButton] or [MenuItemButton]. ¿ ŸﬁÄØ¿ ⁄ÑÄç/// A theme for customizing the color, shape, elevation, and other [MenuStyle]
/// attributes of menus created by the [SubmenuButton] widget. ¿ ⁄íÄõ¿ €g/// A theme for customizing the background color, text style, and icon themes
/// of a [NavigationBar]. ¿ €2Ä§¿ €¡j/// A theme for customizing the background color, text style, and icon themes
/// of a [NavigationDrawer]. ¿ €€Ä©¿ ‹qs/// A theme for customizing the background color, elevation, text style, and
/// icon themes of a [NavigationRail]. ¿ ‹âÄé¿ ›X/// A theme for customizing the appearance and internal layout of
/// [OutlinedButton]s. ¿ ›Äá¿ ›ï[/// A theme for customizing the color, shape, elevation, and text style of
/// popup menus. ¿ ›®Äè¿ ﬁ!U/// A theme for customizing the appearance and layout of [ProgressIndicator] widgets. ¿ ﬁ<k¿ ﬁùI/// A theme for customizing the appearance and layout of [Radio] widgets. ¿ ﬁ¨w¿ ﬂM/// A theme for customizing the appearance and layout of [SearchBar] widgets. ¿ ﬂ(Äî¿ ﬂ≠h/// A theme for customizing the appearance and layout of search views created by [SearchAnchor] widgets. ¿ ﬂ¡Äâ¿ ‡6S/// A theme for customizing the appearance and layout of [SegmentedButton] widgets. ¿ ‡OÄî¿ ‡ÿl/// The colors and shapes used to render [Slider].
///
/// This is the value returned from [SliderTheme.of]. ¿ ‡Ë{¿ ·VS/// A theme for customizing colors, shape, elevation, and behavior of a [SnackBar]. ¿ ·hn¿ ·ÀJ/// A theme for customizing the appearance and layout of [Switch] widgets. ¿ ·€p¿ ‚@P/// A theme for customizing the size, shape, and color of the tab bar indicator. ¿ ‚PÄÇ¿ ‚√T/// A theme for customizing the appearance and internal layout of
/// [TextButton]s. ¿ ‚◊¿ „DM/// A theme for customizing the appearance and layout of [TextField] widgets. ¿ „[y¿ „≈M/// A theme for customizing the appearance and layout of time picker widgets. ¿ „Ÿs¿ ‰:A/// Defines the default configuration of [ToggleButtons] widgets. ¿ ‰QÄ•¿ ‰Í{/// A theme for customizing the visual properties of [Tooltip]s.
///
/// This is the value returned from [TooltipTheme.of]. ¿ Âˆ)¿ Ê  ¿x1¿â ¿®¿ÆÄ¿.>/// Caches localized themes to speed up the [localize] method.¿O¿Y¿¿Z¿v¿Ä¿ù¿Å¿ á‘Å¿ àÃÄﬁ/// The overall theme brightness.
///
/// The default [TextStyle] color for the [textTheme] is black if the
/// theme is constructed with [Brightness.light] and white if the
/// theme is constructed with [Brightness.dark].   ¿ ‰˚Ä¯¿ Â–M/// A theme for customizing the appearance and layout of [ButtonBar] widgets.  ¿ ÂK¿ ÂL¿ ÂV¿ Âµ¿ Â\¿ Â|¿Oîâ∫¿O®   ¿Oî¿Oï¿ Ö•ÄÊ¿ ÜRÄó/// Used to obtain a particular [Adaptation] from [adaptationMap].
///
/// To get an adaptation, use `Theme.of(context).getAdaptation<MyAdaptation>()`.¿ Ü`¿ Ü`  ¿ ÜèÅA¿ Ü¥  ¿ Ü…(¿ ÜÁ   ¿ ñ%ÄÛ¿ ñÚÄø/// Used to obtain a particular [ThemeExtension] from [extensions].
///
/// Obtain with `Theme.of(context).extension<MyThemeExtension>()`.
///
/// See [extensions] for an interactive example.¿ ñ¸¿ ñ¸  ¿ Ê$®*¿ ÊÕÄò/// Creates a copy of this theme but with the given fields replaced with the new values.
///
/// The [brightness] value is applied to the [colorScheme]. S¿ Ë
)¿ Ë)  ¿ Ë9 ¿ Ë@  ¿ Ë_3¿ Ë}  ¿ Ëò-¿ Ëº  ¿ ËÀ*¿ Ë‚  ¿ Ë˚,¿ È  ¿ È-*¿ ÈD  ¿ È]¿ Èn  ¿ È{"¿ Èê  ¿ È£+¿ È¬  ¿ È‘¿ È‰  ¿ Í¿ Í  ¿ Í!¿ Í.  ¿ Î¿ Î$  ¿ Î4¿ Î<  ¿ ÎJ¿ ÎR  ¿ Îl¿ Ît  ¿ ÎÜ¿ Îé  ¿ Îü¿ Îß  ¿ Î∂¿ Îæ  ¿ Î—¿ ÎŸ  ¿ ÎÁ¿ ÎÔ  ¿ Î˛¿ Ï  ¿ Ï¿ Ï!  ¿ Ï2¿ Ï:  ¿ ÏO¿ ÏW  ¿ Ïm¿ Ïu  ¿ Ïë¿ Ïô  ¿ Ï≤¿ Ï∫  ¿ Ï ¿ Ï“  ¿ Ï‚¿ ÏÍ  ¿ Ì$¿ Ì4  ¿ ÌB¿ ÌR  ¿ Ìg¿ Ìs  ¿ Ìà¿ Ìî  ¿ Ì¢¿ ÌØ  ¿ Ì÷$¿ ÌÏ  ¿ Ó ¿ Ó  ¿ Ó¿ Ó/  ¿ Ó>$¿ ÓX  ¿ Óh$¿ Ó|  ¿ Óí6¿ Ó±  ¿ ÓŒ&¿ ÓÂ  ¿ Ó˙¿ Ô  ¿ Ô¿ Ô(  ¿ Ô6 ¿ ÔJ  ¿ Ô\¿ Ôl  ¿ Ôz"¿ Ôè  ¿ Ô¢$¿ Ô∏  ¿ ÔÃ¿ Ô⁄  ¿ ÔÍ¿ Ô˝  ¿ ¿    ¿ 0(¿ H  ¿ ^,¿ x  ¿ ê*¿ ©  ¿ ¿(¿ ÿ  ¿ Ó8¿ Ò  ¿ Ò,$¿ ÒB  ¿ ÒV ¿ Òj  ¿ Ò|¿ Òè  ¿ Ò†$¿ Ò∂  ¿ Ò ¿ Ò⁄  ¿ ÒË*¿ Ú  ¿ Ú0¿ Ú4  ¿ ÚN,¿ Úh  ¿ ÚÄ,¿ Úö  ¿ Ú≤"¿ Ú«  ¿ Ú⁄2¿ Ú˜  ¿ Û¿ Û#  ¿ Û2"¿ ÛG  ¿ ÛZ$¿ Ûp  ¿ ÛÑ.¿ Ûü  ¿ Û∏¿ Û   ¿ Û⁄ ¿ ÛÓ  ¿ Ù ¿ Ù  ¿ Ù"¿ Ù0  ¿ Ù@$¿ ÙV  ¿ Ùj*¿ ÙÉ  ¿ Ùö$¿ Ù∞  ¿ Ùƒ*¿ Ù›  ¿ ÙÙ¿ ı  ¿ ıNÅr¿ ˆµ  ¿ ˆ∆Äò¿ ˜Q  ¿ ıN¿ ıO¿ ıY¿ ˆ®¿ ıa¿ ı©¿ ıÁ¿ ˆ,¿ ˆn¿ ˆ∆¿ ˆ«¿ ˆ—¿ ˜6¿ ˆŸ¿ ˆ˚¿£Ü¿bÅü/// Returns a new theme built by merging the text geometry provided by the
/// [localTextGeometry] theme with the [baseTheme].
///
/// For those text styles in the [baseTheme] whose [TextStyle.inherit] is set
/// to true, the returned theme's text styles inherit the geometric properties
/// of [localTextGeometry]. The resulting text styles' [TextStyle.inherit] is
/// set to those provided by [localTextGeometry]. ¿k¿v  ¿Ä¿ã   ¿≠É¡¿£ÄŸ/// Determines whether the given [Color] is [Brightness.light] or
/// [Brightness.dark].
///
/// This compares the luminosity of the given color to a threshold value that
/// matches the Material Design specification. ¿æ¿≈   ¿rÉ$¿6Äç/// Linearly interpolate between two [extensions].
///
/// Includes all theme extensions in [a] and [b].
///
/// {@macro dart.ui.shadow.lerp} ¿K¿V  ¿X¿c  ¿e¿m   ¿öÇf¿tÄ©/// Convert the [extensionsIterable] passed to [ThemeData.new] or [copyWith]
/// to the stored [extensions] map, where each entry's key consists of the extension's type. ¿ë4¿¥   ¿ úÍ¿ mQ/// Linearly interpolate between two themes.
///
/// {@macro dart.ui.shadow.lerp} ¿ r¿ }  ¿ ¿ ä  ¿ å¿ î   ¿<Úíû¿=  ¿=¿=  ¿<Ú¿<Û¿YR≥∑¿Yc  ¿Yw&¿Yî  ¿YR¿YSûû¿çíX¿í∑ÑÅ/// A [CupertinoThemeData] that defers unspecified theme attributes to an
/// upstream Material [ThemeData].
///
/// This type of [CupertinoThemeData] is used by the Material [Theme] to
/// harmonize the [CupertinoTheme] with the material theme's colors and text
/// styles.
///
/// In the most basic case, [ThemeData]'s `cupertinoOverrideTheme` is null and
/// descendant Cupertino widgets' styling is derived from the Material theme.
///
/// To override individual parts of the Material-derived Cupertino styling,
/// `cupertinoOverrideTheme`'s construction parameters can be used.
///
/// To completely decouple the Cupertino styling from Material theme derivation,
/// another [CupertinoTheme] widget can be inserted as a descendant of the
/// Material [Theme]. On a [MaterialApp], this can be done using the `builder`
/// parameter on the constructor.
///
/// See also:
///
///  * [CupertinoThemeData], whose null constructor parameters default to
///    reasonable iOS styling defaults rather than harmonizing with a Material
///    theme.
///  * [Theme], widget which inserts a [CupertinoTheme] with this
///    [MaterialBasedCupertinoThemeData]. ¿íˆÅ= ¿ìo¿ìét/// Create a [MaterialBasedCupertinoThemeData] based on a Material [ThemeData]
/// and its `cupertinoOverrideTheme`.¿ìï ¿ì©  ¿ìæ¿ì¬¿ì√¿ìƒ¿î1¿ì ¿ì›¿î ¿î¿ìﬁ¿ìÎ¿ìÏ¿î¿î¿î¿î¿î!¿î"¿î+¿î,¿î7Ç{¿îV¿îW¿îX ¿î^¿îd  ¿îw¿î}  ¿ïC¿ïH¿ïI¿ïL¿ñ∞¿ïV¿ïm¿ïn¿ïÇ¿ïô¿ïö¿ï∞¿ï«¿ï»¿ïÈ¿ñ ¿ñ¿ñ¿ñ+¿ñ,¿ñH¿ñ_¿ñ`¿ñÅ¿ñò¿ñô¿ñ∂¿ñ∆  ¿ñÿ9¿ñ˙  ¿ói¿ó1   ¿ó¿ó¿óÉq¿óô   ¿óÉ¿óÑ¿ó¯Äâ¿ò   ¿ó¯¿ó˘¿òÖÄã¿òõ   ¿òÖ¿òÜ¿ôÖ¿õvÇ!/// Copies the [ThemeData]'s `cupertinoOverrideTheme`.
///
/// Only the specified override attributes of the [ThemeData]'s
/// `cupertinoOverrideTheme` and the newly specified parameters are in the
/// returned [CupertinoThemeData]. No derived attributes from iOS defaults or
/// from cascaded Material theme attributes are copied.
///
/// This [copyWith] cannot change the base Material [ThemeData]. To change the
/// base Material [ThemeData], create a new Material [Theme] and use
/// [ThemeData.copyWith] on the Material [ThemeData] instead. ¿õÖ¿õí  ¿õ°¿õ©  ¿õ∫¿õ¬  ¿õﬁ!¿õ˜  ¿ú¿ú  ¿ú$¿ú,  ¿úH¿úO  ¿õJ¿õK¿ûÅJ¿û8  ¿ûD¿ûR  ¿û¿û ¿ügÑ»¿°∂ÇH/// A class for creating a Material theme with a color scheme based off of the
/// colors from a [CupertinoThemeData]. This is intended to be used only in the
/// case when a Material widget is unable to find a Material theme in the tree,
/// but is able to find a Cupertino theme. Most often this will occur when a
/// Material widget is used inside of a [CupertinoApp].
///
/// Besides the colors, this theme will use all the defaults from Material's
/// [ThemeData], so if further customization is needed, it is best to manually
/// add a Material [Theme] above the [CupertinoApp]. ¿°⁄Å‹ ¿¢H¿¢gi/// Creates a Material theme with a color scheme based off of the colors from
/// a [CupertinoThemeData].¿¢n%¿¢ã  $¿¢™¿¢ú¿¢¨¿¢µ¿£¥¿¢»¿¢Ω¿¢ ¿¢’¿¢÷¿¢ﬁ¿£Æ¿¢Ò¿¢Ë¿¢Û¿¢¸¿¢˝¿£¿£¿£4¿£¿£(¿£)¿£7¿£A¿£B¿£X¿£Q¿£Z¿£c¿£d¿£É¿£z¿£Ö¿£é¿£è¿£∫r¿§R/// The Material theme data with colors based on an existing [CupertinoThemeData].    ¿§1Ç‘¿§B  ¿§aI ¿§g¿§Å ¿§Ç¿§à  ¿§í¿§ò   ¿§Æ¿§æ  ¿§À!¿§€  ¿•Xb¿•l   ¿•X¿•Y¿•æÅE¿•ÿ  ¿•€¿•„  ¿•æ¿•ø¿§1¿§2¿ßÑé¿ß˛Ä/// Cache of objects of limited size that uses the first in first out eviction
/// strategy (a.k.a least recently inserted).
///
/// The key that was inserted before all other keys is evicted first, i.e. the
/// one inserted least recently.¿®	¿®	¿®¿®¿®9 ¿®¿® ¿®¿®$  ¿®3¿®9¿®J¿®G¿®:¿®I¿®PÄÀ¿©
Ä£/// In Dart the map literal uses a linked hash-map implementation, whose keys
/// are stored such that [Map.keys] returns them in the order they were
/// inserted.¿©¿©¿©¿©¿©¿©¿© ÄŒ¿©‚ÄØ/// Maximum number of entries to store in the cache.
///
/// Once this many entries have been cached, the entry inserted least recently
/// is evicted when adding a new entry.  ¿©ÛÅ†¿™{ÄÅ/// Returns the previously cached value for the given key, if available;
/// if not, calls the given callback to obtain it first. ¿™á¿™ä  ¿™é¿™ú    ¿´ó£¿±Ön/// Defines the visual density of user interface components.
///
/// Density, in the context of a UI, is the vertical and horizontal
/// "compactness" of the components in the UI. It is unitless, since it means
/// different things to different UI components.
///
/// The default for visual densities is zero for both vertical and horizontal
/// densities, which corresponds to the default visual density of components in
/// the Material Design specification. It does not affect text sizes, icon
/// sizes, or padding values.
///
/// For example, for buttons, it affects the spacing around the child of the
/// button. For lists, it affects the distance between baselines of entries in
/// the list. For chips, it only affects the vertical size, not the horizontal
/// size.
///
/// Here are some examples of widgets that respond to density changes:
///
///  * [Checkbox]
///  * [Chip]
///  * [ElevatedButton]
///  * [IconButton]
///  * [InputDecorator] (which gives density support to [TextField], etc.)
///  * [ListTile]
///  * [MaterialButton]
///  * [OutlinedButton]
///  * [Radio]
///  * [RawMaterialButton]
///  * [TextButton]
///
/// See also:
///
///  * [ThemeData.visualDensity], where this property is used to specify the base
///    horizontal density of Material components.
///  * [Material design guidance on density](https://material.io/design/layout/applying-density.html). ¿±=Å∂ ¿≤ ¿≤Ä¥/// A const constructor for [VisualDensity].
///
/// The [horizontal] and [vertical] arguments must be in the interval between
/// [minimumDensity] and [maximumDensity], inclusive.¿≤¿≤  ¿≤/¿≤5  ¿≤&¿≤?¿≤K¿≤Q¿≤l¿≤[¿≤R¿≤^¿≤v¿≤|¿≤ó¿≤Ü¿≤}¿≤â¿≤°¿≤ß¿≤ƒ¿≤≥¿≤®¿≤∂¿≤Œ¿≤‘¿≤Ò¿≤‡¿≤’¿≤„¿≤˜L¿≥. /// The minimum allowed density.¿≥?¿≥@¿≥HK¿≥ /// The maximum allowed density.¿≥ê¿≥òÅ-¿¥´ÄÌ/// The default profile for [VisualDensity] in [ThemeData].
///
/// This default value represents a visual density that is less dense than
/// either [comfortable] or [compact], and corresponds to density values of
/// zero in both axes.¿¥∂¿¥√¿¥ƒ¿¥ Ç¿∂§ÅÆ/// The profile for a "comfortable" interpretation of [VisualDensity].
///
/// Individual components will interpret the density value independently,
/// making themselves more visually dense than [standard] and less dense than
/// [compact] to different degrees based on the Material Design specification
/// of the "comfortable" setting for their particular use case.
///
/// It corresponds to a density value of -1 in both axes.¿∂≤¿∂ø¿∂‡¿∂ ¿∂¿¿∂Ã¿∂Õ¿∂⁄¿∂“¿∂‹¿∂›¿∂ÊÇ¿∏∞Åû/// The profile for a "compact" interpretation of [VisualDensity].
///
/// Individual components will interpret the density value independently,
/// making themselves more visually dense than [standard] and [comfortable] to
/// different degrees based on the Material Design specification of the
/// "comfortable" setting for their particular use case.
///
/// It corresponds to a density value of -2 in both axes.¿∏∫¿∏«¿∏Ë¿∏“¿∏»¿∏‘¿∏’¿∏‚¿∏⁄¿∏‰¿∏Â¿ø~Ç¿¬dÇº/// The horizontal visual density of UI components.
///
/// This property affects only the horizontal spacing between and within
/// components, to allow for different UI visual densities. It does not affect
/// text sizes, icon sizes, or padding values. The default value is 0.0,
/// corresponding to the metrics specified in the Material Design
/// specification. The value can range from [minimumDensity] to
/// [maximumDensity], inclusive.
///
/// See also:
///
///  * [ThemeData.visualDensity], where this property is used to specify the base
///    horizontal density of Material components.
///  * [Material design guidance on density](https://material.io/design/layout/applying-density.html). ¿¬sÇË¿≈SÇ∂/// The vertical visual density of UI components.
///
/// This property affects only the vertical spacing between and within
/// components, to allow for different UI visual densities. It does not affect
/// text sizes, icon sizes, or padding values. The default value is 0.0,
/// corresponding to the metrics specified in the Material Design
/// specification. The value can range from [minimumDensity] to
/// [maximumDensity], inclusive.
///
/// See also:
///
///  * [ThemeData.visualDensity], where this property is used to specify the base
///    vertical density of Material components.
///  * [Material design guidance on density](https://material.io/design/layout/applying-density.html). ¿∏ÓÇ∫¿ª\Ç:/// Returns a [VisualDensity] that is adaptive based on the current platform
/// on which the framework is executing, from [defaultTargetPlatform].
///
/// When [defaultTargetPlatform] is a desktop platform, this returns
/// [compact], and for other platforms, it returns a default-constructed
/// [VisualDensity].
///
/// See also:
///
/// * [defaultDensityForPlatform] which returns a [VisualDensity] that is
///   adaptive based on the platform given to it.
/// * [defaultTargetPlatform] which returns the platform on which the
///   framework is currently executing.   ¿≈`Çß¿∆ ÅP/// The base adjustment in logical pixels of the visual density of UI components.
///
/// The input density values are multiplied by a constant to arrive at a base
/// size adjustment that fits Material Design guidelines.
///
/// Individual components may adjust this value based upon their own
/// individual interpretation of density.   ¿Ã≥B¿Ã«   ¿Ã≥¿Ã¥¿ª¨Çõ¿Ω6Åb/// Returns a [VisualDensity] that is adaptive based on the given [platform].
///
/// For desktop platforms, this returns [compact], and for other platforms, it
/// returns a default-constructed [VisualDensity].
///
/// See also:
///
/// * [adaptivePlatformDensity] which returns a [VisualDensity] that is
///   adaptive based on [defaultTargetPlatform]. ¿ΩP¿Ω`   ¿æKÅ/¿æ∫\/// Copy the current [VisualDensity] with the given values replacing the
/// current values. ¿æ…¿æ“  ¿æ·¿æÍ   ¿»ÅE¿»R//// Linearly interpolate between two densities. ¿»W¿»f  ¿»h¿»w  ¿»y¿»Å   ¿…TÇn¿ gÄ˘/// Return a copy of [constraints] whose minimum width and height have been
/// updated with the [baseSizeAdjustment].
///
/// The resulting minWidth and minHeight values are clamped to not exceed the
/// maxWidth and maxHeight values, respectively. ¿ |¿ å   ¿À∆ÄÈ¿À‡  ¿À„¿ÀÎ  ¿À∆¿À«¿Ã˘Å¿Õ
  ¿Õ&¿Õ;  ¿Ã˘¿Ã˙¿ŒÄó¿Œ+   ¿Œ¿Œ¿±¿± ìÑï§Çò/// Configures the tap target and layout size of certain Material widgets.
///
/// Changing the value in [ThemeData.materialTapTargetSize] will affect the
/// accessibility experience.
///
/// Some of the impacted widgets include:
///
///   * [FloatingActionButton], only the mini tap target size is increased.
///   * [MaterialButton]
///   * [OutlinedButton]
///   * [TextButton]
///   * [ElevatedButton]
///   * [IconButton]
///   * The time picker widget ([showTimePicker])
///   * [SnackBar]
///   * [Chip]
///   * [RawChip]
///   * [InputChip]
///   * [ChoiceChip]
///   * [FilterChip]
///   * [ActionChip]
///   * [Radio]
///   * [Switch]
///   * [Checkbox]  ïæÄÓñ¶Ä›/// Expands the minimum tap target size to 48px by 48px.
///
/// This is the default value of [ThemeData.materialTapTargetSize] and the
/// recommended size to conform to Android accessibility scanner
/// recommendations. ñ±ióZ/// Shrinks the tap target size to the minimum provided by the Material
/// specification.           ¿œ…á©¿œ€ Å.¿œÒ¿œ¸¿◊q¿–
¿– ¿–¿–¿–¿–'¿– ¿–)¿–.¿–9¿–/¿–G¿–>¿–I¿–N¿–Y¿–O¿–n¿–^¿–p¿–u¿–Ä¿–v¿–ó¿–Ö¿–ô¿–û¿–©¿–ü¿–∫¿–Æ¿–º¿–¡¿–Ã¿–¬¿–‡¿–—¿–‚¿–Á¿–Ú¿–Ë¿—¿–˜¿—¿—¿—¿—¿—1¿—¿—3¿—8¿—C¿—9¿—Q¿—H¿—S¿—X¿—c¿—Y¿—s¿—h¿—u¿—z¿—Ö¿—{¿—ú¿—ä¿—û¿—£¿—Æ¿—§¿—«¿—≥¿—…¿—Œ¿—Ÿ¿—œ¿—Ï¿—ﬁ¿—Ó¿—Û¿—˛¿—Ù¿“¿“¿“¿“¿“&¿“¿“;¿“+¿“=¿“B¿“M¿“C¿“i¿“R¿“k¿“p¿“{¿“q¿“à¿“Ä¿“ä¿“è¿“ö¿“ê¿“©¿“ü¿“´¿“∞¿“ª¿“±¿“—¿“¿¿“”¿“ÿ¿“„¿“Ÿ¿“˚¿“Ë¿“˝¿”¿”¿”¿”¿”¿”!¿”&¿”1¿”'¿”F¿”6¿”H¿”M¿”X¿”N¿”l¿”]¿”n¿”s¿”~¿”t¿”ô¿”É¿”õ¿”†¿”´¿”°¿”µ¿”∞¿”∑¿”º¿”«¿”Ω¿””¿”Ã¿”’¿”⁄¿”Â¿”€¿”¯¿”Í¿”˙¿”ˇ¿‘
¿‘ ¿‘¿‘¿‘!¿‘&¿‘1¿‘'¿‘@¿‘6¿‘B¿‘G¿‘R¿‘H¿‘c¿‘W¿‘e¿‘j¿‘u¿‘k¿‘Å¿‘z¿‘É¿‘à¿‘ì¿‘â¿‘•¿‘ò¿‘ß¿‘¨¿‘∑¿‘≠¿‘“¿‘º¿‘‘¿‘Ÿ¿‘‰¿‘⁄¿‘¸¿‘È¿‘˛¿’¿’¿’¿’#¿’¿’%¿’*¿’5¿’+¿’N¿’:¿’P¿’U¿’`¿’V¿’|¿’e¿’~¿’É¿’é¿’Ñ¿’ù¿’ì¿’ü¿’§¿’Ø¿’•¿’Ω¿’¥¿’ø¿’ƒ¿’œ¿’≈¿’‚¿’‘¿’‰¿’È¿’Ù¿’Í¿÷	¿’˘¿÷¿÷¿÷¿÷¿÷'¿÷ ¿÷)¿÷.¿÷9¿÷/¿÷L¿÷>¿÷N¿÷S¿÷^¿÷T¿÷i¿÷c¿÷k¿÷p¿÷{¿÷q¿÷Ö¿÷Ä¿÷á¿÷å¿÷ó¿÷ç¿÷™¿÷ú¿÷¨¿÷±¿÷º¿÷≤¿÷—¿÷¡¿÷”¿÷ÿ¿÷„¿÷Ÿ¿÷ˆ¿÷Ë¿÷¯¿÷˝¿◊¿÷˛¿◊\¿◊Q¿◊^¿◊c¿◊n¿◊d¿◊uáß¿◊á Å.¿◊ú¿◊ß¿ﬂ¿◊µ¿◊´¿◊∑¿◊¡¿◊¬¿◊—¿◊ ¿◊”¿◊ÿ¿◊„¿◊Ÿ¿◊Ò¿◊Ë¿◊Û¿◊¯¿ÿ¿◊˘¿ÿ¿ÿ¿ÿ¿ÿ¿ÿ*¿ÿ ¿ÿA¿ÿ/¿ÿC¿ÿH¿ÿS¿ÿI¿ÿd¿ÿX¿ÿf¿ÿk¿ÿv¿ÿl¿ÿä¿ÿ{¿ÿå¿ÿë¿ÿú¿ÿí¿ÿØ¿ÿ°¿ÿ±¿ÿ∂¿ÿ¡¿ÿ∑¿ÿ€¿ÿ∆¿ÿ›¿ÿ‚¿ÿÌ¿ÿ„¿ÿ˚¿ÿÚ¿ÿ˝¿Ÿ¿Ÿ¿Ÿ¿Ÿ¿Ÿ¿Ÿ¿Ÿ$¿Ÿ/¿Ÿ%¿ŸF¿Ÿ4¿ŸH¿ŸM¿ŸX¿ŸN¿Ÿq¿Ÿ]¿Ÿs¿Ÿx¿ŸÉ¿Ÿy¿Ÿñ¿Ÿà¿Ÿò¿Ÿù¿Ÿ®¿Ÿû¿Ÿæ¿Ÿ≠¿Ÿ¿¿Ÿ≈¿Ÿ–¿Ÿ∆¿ŸÂ¿Ÿ’¿ŸÁ¿ŸÏ¿Ÿ˜¿ŸÌ¿⁄¿Ÿ¸¿⁄¿⁄¿⁄%¿⁄¿⁄2¿⁄*¿⁄4¿⁄9¿⁄D¿⁄:¿⁄S¿⁄I¿⁄U¿⁄Z¿⁄e¿⁄[¿⁄{¿⁄j¿⁄}¿⁄Ç¿⁄ç¿⁄É¿⁄•¿⁄í¿⁄ß¿⁄¨¿⁄∑¿⁄≠¿⁄…¿⁄º¿⁄À¿⁄–¿⁄€¿⁄—¿⁄¿⁄‡¿⁄Ú¿⁄˜¿€¿⁄¯¿€¿€¿€¿€¿€(¿€¿€C¿€-¿€E¿€J¿€U¿€K¿€_¿€Z¿€a¿€f¿€q¿€g¿€}¿€v¿€¿€Ñ¿€è¿€Ö¿€¢¿€î¿€§¿€©¿€¥¿€™¿€…¿€π¿€À¿€–¿€€¿€—¿€Í¿€‡¿€Ï¿€Ò¿€¸¿€Ú¿‹¿‹¿‹¿‹¿‹¿‹¿‹+¿‹$¿‹-¿‹2¿‹=¿‹3¿‹O¿‹B¿‹Q¿‹V¿‹a¿‹W¿‹|¿‹f¿‹~¿‹É¿‹é¿‹Ñ¿‹¶¿‹ì¿‹®¿‹≠¿‹∏¿‹Æ¿‹Õ¿‹Ω¿‹œ¿‹‘¿‹ﬂ¿‹’¿‹¯¿‹‰¿‹˙¿‹ˇ¿›
¿› ¿›&¿›¿›(¿›-¿›8¿›.¿›G¿›=¿›I¿›N¿›Y¿›O¿›g¿›^¿›i¿›n¿›y¿›o¿›å¿›~¿›é¿›ì¿›û¿›î¿›≥¿›£¿›µ¿›∫¿›≈¿›ª¿›—¿› ¿›”¿›ÿ¿›„¿›Ÿ¿›ˆ¿›Ë¿›¯¿›˝¿ﬁ¿›˛¿ﬁ¿ﬁ¿ﬁ¿ﬁ¿ﬁ%¿ﬁ¿ﬁ/¿ﬁ*¿ﬁ1¿ﬁ6¿ﬁA¿ﬁ7¿ﬁT¿ﬁF¿ﬁV¿ﬁ[¿ﬁf¿ﬁ\¿ﬁ{¿ﬁk¿ﬁ}¿ﬁÇ¿ﬁç¿ﬁÉ¿ﬁ†¿ﬁí¿ﬁ¢¿ﬁß¿ﬁ≤¿ﬁ®¿ﬂ¿ﬁ˚¿ﬂ¿ﬂ¿ﬂ¿ﬂ  äL <ÄÜÄ§Ä•ÄŒÄœÄ¯Å"Å#ÅAÅcÅÄÅõÅ∑Å€ÇÇ(ÇHÇdÇ~ÇúÇ∂Ç“ÇËÉÉ!ÉBÉ^É{ÉóÉ∫ÉﬂÑÑ&ÑRÑsÑçÑ®Ñ¬Ñ¸ÖÖ4ÖSÖqÖíÖ¨Ö–Ö˜ÜÜAÜgÜáÜØÜ ÜÈá	á*áPáláãáßáƒáÂà	à#àDàhàÖàüà†àÿàŸàÒâââfâjâ•âªâ⁄ââÒää$ä%äuä¡ä«ããMãûãÓå;ååå∑åΩå”ç!çqç¡çÓçÙé;éMéâéãéåé‘éÿèèèhè∏ê	êê#ê7êáêüê£êë ë=ëlëÜëáë£ëªëºëˇí0íPíQíííòíªììììQìUì°ìøì√ìÌìÒî=îVîoîÑîùî≤î‰î˜ïïï,ïAïVïkï{ïåïüïºï˜ï˝ñJñçñ§ñÆñØñ˘óóóóóoóóóõóËò4òwò{òÀôôjôñôöôÈö6öö õõfõõõüõ≥õ˜ú>úÑúÀùùBùFùìù£ùßù◊ûûûû>û}ûÉû“ü ülürüΩ††R†††°%°+°t°¡¢¢C¢I¢è¢ﬂ£-£_£e£≥£€£·§*§s§y§∫••+•1•A•G•í•’¶¶r¶à¶ÿß&ßtßòßôß∂ßÂ®®D®w®ß®Ÿ©	©'©O©Ä©ò©∫©«©Â™™™s™ƒ™¸´´*´L´f´´ñ´±´«´ﬁ´˘¨¨/¨M¨o¨ì¨¥¨Ã¨‰≠≠&≠>≠d≠y≠ó≠º≠›≠˜ÆÆ+ÆUÆsÆìÆΩÆÁØ#ØOØqØãØ±ØœØ˜∞!∞?∞c∞Ö∞≥∞Â±±C±Å±´±—±ı≤≤=≤m≤£≤’≥≥/≥g≥á≥Ø≥Ÿ¥¥/¥U¥w¥ï¥ø¥ÔµµIµmµ£µ¥µ÷∂∂∂A∂H∂e∂ß∂◊∑∑>∑f∑~∑°∑ƒ∑„∏#∏D∏e∏à∏Õ∏”ππAπäπ•πÛ∫∫a∫Ç∫É∫ê∫úªªGªíª´ª≤ªÓº,ºiºœΩΩBΩgΩ–Ωÿæ!æ"æyæ’ø7ø8øÑø∞ø€¿ @¿ @;¿ @g¿ @ú¿ @Ã¿ A¿ A¿ A@¿ Ac¿ A§¿ B¿ BQ¿ Bó¿ BÍ¿ CG¿ C§¿ C∆¿ D	¿ D6¿ Ds¿ Dƒ¿ E	¿ EB¿ En¿ Eí¿ E›¿ E˘¿ FB¿ Fe¿ Få¿ Fì¿ F€¿ G+¿ Gy¿ G¬¿ H'¿ Hr¿ H√¿ I ¿ I%¿ IE¿ Iä¿ IÆ¿ IÃ¿ IÍ¿ J¿ J0¿ Jd¿ Jk¿ J´¿ J˛¿ KN¿ KO¿ Ko¿ Kè¿ K›¿ L¿ La¿ Læ¿ L‹¿ M%¿ M|¿ MÇ¿ M®¿ N¿ Nh¿ Nn¿ Nâ¿ NÃ¿ O¿ O#¿ OV¿ Oû¿ P¿ Pì¿ Pî¿ P¨¿ P’¿ Q ¿ Q5¿ Qj¿ Q±¿ QË¿ R¿ R>¿ Rg¿ Rö¿ Rœ¿ R¯¿ S'¿ ST¿ Sç¿ S ¿ T¿ T>¿ Tá¿ Tº¿ TÌ¿ U¿ UQ¿ Uz¿ Uµ¿ Uˆ¿ V3¿ Vp¿ V£¿ VÊ¿ W¿ WD¿ Wy¿ W∏¿ WÂ¿ X¿ XC¿ Xl¿ X°¿ X‹¿ Y¿ YL¿ Y{¿ Y±¿ Y‰¿ Y˛¿ ZP¿ Z†¿ Z¿ [¿ [¿ [6¿ [n¿ [¨¿ [‚¿ \¿ \P¿ \Ñ¿ \∂¿ \–¿ \ˆ¿ ]¿ ]<¿ ]`¿ ]o¿ ]è¿ ]´¿ ]À¿ ]ˇ¿ ^#¿ ^E¿ ^c¿ ^â¿ ^•¿ ^√¿ ^È¿ _¿ _5¿ _a¿ _ô¿ _À¿ _Î¿ `¿ `?¿ `a¿ `}¿ `ß¿ `√¿ `·¿ a¿ a%¿ aM¿ am¿ aã¿ a´¿ a◊¿ b¿ b;¿ b[¿ bw¿ bõ¿ b∑¿ b›¿ c¿ c%¿ cG¿ cg¿ cì¿ c√¿ cÒ¿ d¿ dY¿ dÅ¿ d•¿ d«¿ dÔ¿ e¿ e9¿ em¿ eù¿ eÕ¿ eÛ¿ f)¿ fG¿ fm¿ fï¿ f«¿ fÁ¿ g¿ g+¿ gK¿ gs¿ g°¿ g…¿ g˜¿ h¿ hQ¿ hw¿ h~¿ hÇ¿ hÉ¿ hœ¿ i
¿ iB¿ iH¿ iâ¿ iœ¿ iÓ¿ j¿ jV¿ j§¿ jÚ¿ k¿ k¿ k4¿ kU¿ kÉ¿ k≠¿ kÀ¿ kÛ¿ l¿ lD¿ l`¿ lÇ¿ l£¿ l√¿ l‰¿ lÒ¿ m¿ mf¿ m∑¿ mÔ¿ n¿ n+¿ nT¿ nu¿ nï¿ n≥¿ n’¿ nÚ¿ o¿ o2¿ oR¿ ov¿ oõ¿ o∆¿ oÓ¿ p¿ p,¿ pU¿ pu¿ pí¿ p∂¿ p⁄¿ p˜¿ q¿ q-¿ qP¿ qo¿ qç¿ q¨¿ q—¿ q˝¿ r!¿ r@¿ r]¿ r~¿ rõ¿ rΩ¿ r‡¿ rˇ¿ s¿ s>¿ sc¿ sä¿ s∞¿ s’¿ t¿ t%¿ tF¿ tf¿ tâ¿ t¶¿ tÃ¿ tı¿ u¿ uC¿ ue¿ uè¿ u≠¿ uœ¿ uÚ¿ v¿ v9¿ vZ¿ vy¿ vò¿ vª¿ v·¿ w¿ w*¿ wJ¿ wÄ¿ wë¿ w≥¿ w¿ wˆ¿ x¿ xW¿ x¢¿ xÀ¿ xÚ¿ xÛ¿ yA¿ yp¿ yv¿ y≤¿ y˛¿ zH¿ zé¿ zî¿ zﬂ¿ {.¿ {j¿ {p¿ {Ü¿ {—¿ {ı¿ {˚¿ |	¿ |¿ |c¿ |≠¿ |µ¿ |ø¿ |—¿ |◊¿ }	¿ }@¿ }[¿ }Å¿ }õ¿ }≥¿ }∫¿ }˝¿ }˛¿ ~S¿ ~≠¿ ¿ ¿ $¿ D¿ n¿ ó¿ ø¿ Û¿ Ä¿ ÄV¿ Äà¿ Äµ¿ Ä—¿ Ä˚¿ Å¿ Å$¿ Å(¿ Å)¿ ÅF¿ ÅL¿ Åö¿ ÅË¿ Ç&¿ ÇH¿ Çh¿ Çm¿ Çn¿ Çä¿ Çê¿ Çﬁ¿ É,¿ Éi¿ Éä¿ É™¿ ÉØ¿ É∞¿ ÉÍ¿ É¿ Ñ3¿ Ñ9¿ Ñá¿ Ñ’¿ Ñ€¿ Ö*¿ Ö?¿ Ö¢¿ Ö£¿ ÖË¿ ÖÓ¿ ÜA¿ Üå¿ Üç¿ Üı¿ áI¿ áà¿ á¨¿ á≥¿ áÕ¿ á—¿ á“¿ áˆ¿ á¸¿ àD¿ àà¿ àª¿ àÚ¿ àÛ¿ âA¿ âç¿ âŸ¿ â˚¿ â¸¿ ä¿ ä¿ äf¿ äá¿ äç¿ ä⁄¿ ã&¿ ãr¿ ãÄ¿ ãÜ¿ ã“¿ å!¿ åg¿ å≤¿ åÔ¿ åı¿ ç,¿ çn¿ çª¿ é¿ é7¿ é=¿ éw¿ é}¿ é«¿ è¿ èT¿ èÉ¿ èâ¿ èô¿ èü¿ èÌ¿ ê¿ êT¿ êÖ¿ ê÷¿ ê˛¿ ë'¿ ë(¿ ës¿ ëë¿ ëó¿ ë‡¿ í+¿ íy¿ íø¿ í≈¿ ì¿ ìb¿ ìü¿ ì†¿ ì…¿ ìœ¿ î&¿ îY¿ î_¿ îé¿ îî¿ î™¿ î¸¿ ï¿ ï¿ ïk¿ ï}¿ ïÉ¿ ïì¿ ïô¿ ïÈ¿ ñ"¿ ñ#¿ ñi¿ ño¿ ñ¥¿ ñ∫¿ ñÌ¿ ó¿ ó¿ ók¿ ó≠¿ ó≥¿ óÁ¿ ò¿ ò¿ òk¿ òû¿ ò§¿ òœ¿ ô¿ ô¿ ôC¿ ôI¿ ôô¿ ô‚¿ ôÛ¿ ö(¿ ö)¿ öm¿ ös¿ ö¡¿ õ¿ õ5¿ õh¿ õi¿ õ©¿ õØ¿ õ˛¿ úL¿ ú_¿ úe¿ úµ¿ ú˛¿ ùM¿ ùó¿ ù‹¿ û¿ ûk¿ ûº¿ ûı¿ û˚¿ üJ¿ üó¿ ü‚¿ †2¿ †É¿ †∑¿ †„¿ †È¿ °5¿ °V¿ °W¿ °ß¿ °“¿ °”¿ ¢¿ ¢/¿ ¢5¿ ¢E¿ ¢K¿ ¢ë¿ ¢›¿ £
¿ £[¿ £Å¿ £µ¿ £∂¿ §¿ §¿ §L¿ §è¿ §°¿ §ß¿ §È¿ •1¿ •¿ •±¿ •∑¿ •…¿ •œ¿ ¶¿ ¶[¿ ¶®¿ ¶Î¿ ¶Ò¿ ß[¿ ßa¿ ßΩ¿ ®¿ ®u¿ ®—¿ ©-¿ ©3¿ ©q¿ ©∂¿ ©º¿ ™
¿ ™Z¿ ™Ñ¿ ™ä¿ ™§¿ ™™¿ ™Ÿ¿ ™ﬂ¿ ™¿ ´-¿ ´U¿ ´ä¿ ´ê¿ ´•¿ ´ø¿ ´Ë¿ ¨¿ ¨!¿ ¨î¿ ¨›¿ ≠R¿ ≠ü¿ ≠∑¿ ≠Í¿ ≠˚¿ Æ<¿ Æç¿ Æ•¿ Ø.¿ Ød¿ Øî¿ Ø∞¿ ØÈ¿ ∞5¿ ∞z¿ ∞¶¿ ∞¸¿ ±-¿ ±\¿ ±|¿ ±¶¿ ±”¿ ≤ ¿ ≤F¿ ≤É¿ ≤‡¿ ≤Ê¿ ≥.¿ ≥e¿ ≥ô¿ ≥ü¿ ≥Ø¿ ≥µ¿ ≥Ù¿ ¥¿ ¥¿ ¥a¿ ¥g¿ ¥¢¿ ¥Ë¿ µ6¿ µÉ¿ µ‘¿ ∂¿ ∂¿ ∂_¿ ∂∞¿ ∂ˇ¿ ∑N¿ ∑ù¿ ∑‚¿ ∑Ë¿ ∏8¿ ∏á¿ ∏≥¿ ∏π¿ π¿ πJ¿ πó¿ πù¿ πÁ¿ ∫*¿ ∫0¿ ∫¿ ∫À¿ ª!¿ ªP¿ ªe¿ ªä¿ ªã¿ ªñ¿ ªó¿ ª‘¿ ªÔ¿ ª¿ º+¿ ºD¿ ºE¿ º~¿ ºÑ¿ º’¿ Ω&¿ Ωv¿ Ωæ¿ Ω‰¿ æ¿ æ¿ æ7¿ æ\¿ æ]¿ æ¢¿ æ‰¿ ø¿ ø¿ ø¿ ø`¿ øß¿ ø≠¿ ø¯¿ ¿¿ ¿6¿ ¿7¿ ¿Å¿ ¿õ¿ ¿ú¿ ¿ﬁ¿ ¡¿ ¡*¿ ¡+¿ ¡m¿ ¡á¿ ¡†¿ ¡°¿ ¡Í¿ ¡˚¿ ¬¿ ¬¿ ¬R¿ ¬p¿ ¬q¿ ¬¡¿ ¬«¿ √¿ √[¿ √©¿ √ﬁ¿ √˙¿ √˚¿ ƒ)¿ ƒI¿ ƒJ¿ ƒy¿ ƒö¿ ƒõ¿ ƒË¿ ≈4¿ ≈[¿ ≈\¿ ≈≤¿ ≈ﬁ¿ ∆F¿ ∆Ñ¿ ∆®¿ ∆©¿ ∆Ù¿ ∆˙¿ « ¿ «&¿ «s¿ «¡¿ »¿ »Z¿ »É¿ »û¿ »ü¿ »¿¿ »∆¿ »÷¿ …¿ …7¿ …8¿ …y¿ …ƒ¿ …È¿ …Í¿  ¿  	¿  M¿  n¿  o¿  ™¿  “¿  ”¿ À¿ À1¿ À2¿ Àz¿ Àó¿ Àò¿ ÀÁ¿ ÀÌ¿ Ã$¿ ÃC¿ ÃD¿ ÃZ¿ Ã[¿ Ãß¿ Ã€¿ Õ	¿ Õ
¿ ÕX¿ Õv¿ Õó¿ Õò¿ ÕÕ¿ Õ¿ ÕÒ¿ Œ?¿ Œl¿ Œm¿ Œ¿¿ ŒÌ¿ ŒÓ¿ œ?¿ œN¿ œç¿ œé¿ œﬂ¿ –¿ –¿ –`¿ –w¿ –ú¿ –ù¿ ––¿ –÷¿ —¿ —)¿ —*¿ —y¿ —¢¿ —£¿ —◊¿ —›¿ “¿ “4¿ “5¿ “|¿ “ã¿ “∂¿ “∑¿ ”¿ ”¿ ”A¿ ”B¿ ”w¿ ”ò¿ ”ô¿ ”Ë¿ ‘¿ ‘.¿ ‘/¿ ‘|¿ ‘°¿ ‘¢¿ ‘ı¿ ’&¿ ’'¿ ’k¿ ’Ñ¿ ’π¿ ’∫¿ ÷¿ ÷6¿ ÷7¿ ÷{¿ ÷í¿ ÷√¿ ÷ƒ¿ ◊¿ ◊%¿ ◊f¿ ◊g¿ ◊´¿ ◊¿¿ ◊Ì¿ ◊Ó¿ ÿ2¿ ÿ[¿ ÿ\¿ ÿ≠¿ ÿÏ¿ Ÿ¿ Ÿ¿ Ÿa¿ ŸÆ¿ Ÿ€¿ Ÿ‹¿ ⁄-¿ ⁄n¿ ⁄è¿ ⁄ê¿ ⁄‡¿ ⁄¸¿ €/¿ €0¿ €Ä¿ €ü¿ €ÿ¿ €Ÿ¿ ‹(¿ ‹Q¿ ‹Ü¿ ‹á¿ ‹À¿ ‹‰¿ ›¿ ›¿ ›g¿ ›z¿ ›•¿ ›¶¿ ›˛¿ ﬁ9¿ ﬁ:¿ ﬁÜ¿ ﬁ©¿ ﬁ™¿ ﬁ˙¿ ﬂ%¿ ﬂ&¿ ﬂë¿ ﬂæ¿ ﬂø¿ ‡¿ ‡L¿ ‡M¿ ‡Ç¿ ‡à¿ ‡¿¿ ‡Â¿ ‡Ê¿ ·<¿ ·e¿ ·f¿ ·≥¿ ·ÿ¿ ·Ÿ¿ ‚,¿ ‚M¿ ‚N¿ ‚í¿ ‚ß¿ ‚‘¿ ‚’¿ „%¿ „X¿ „Y¿ „©¿ „÷¿ „◊¿ ‰¿ ‰N¿ ‰O¿ ‰í¿ ‰ò¿ ‰—¿ ‰¯¿ ‰˘¿ ÂI¿ ÂX¿ Âx¿ Â≥¿ Â∑¿ ÂÙ¿ Ê!¿ Ê"¿ Ê}¿ ÊÉ¿ Ê¡¿ Êÿ¿ Á(¿ Áv¿ Áƒ¿ ÁË¿ ÁÈ¿ Ë¿ Ë5¿ Ë[¿ Ëî¿ Ë«¿ Ë˜¿ È)¿ ÈY¿ Èw¿ Èü¿ È–¿ ÈÚ¿ Èˇ¿ Í¿ Í9¿ Íè¿ Í‡¿ Î¿ Î0¿ ÎF¿ Îh¿ ÎÇ¿ Îõ¿ Î≤¿ ÎÕ¿ Î„¿ Î˙¿ Ï¿ Ï.¿ ÏK¿ Ïi¿ Ïç¿ ÏÆ¿ Ï∆¿ Ïﬁ¿ Ì ¿ Ì ¿ Ì>¿ Ìc¿ ÌÑ¿ Ìû¿ Ì∫¿ Ì“¿ Ì¸¿ Ó¿ Ó:¿ Ód¿ Óé¿ Ó ¿ Óˆ¿ Ô¿ Ô2¿ ÔX¿ Ôv¿ Ôû¿ Ô»¿ ÔÊ¿ 
¿ ,¿ Z¿ å¿ º¿ Í¿ Ò(¿ ÒR¿ Òx¿ Òú¿ Ò∆¿ Ò‰¿ Ú¿ ÚJ¿ Ú|¿ ÚÆ¿ Ú÷¿ Û¿ Û.¿ ÛV¿ ÛÄ¿ Û¥¿ Û÷¿ Û¸¿ Ù¿ Ù<¿ Ùf¿ Ùñ¿ Ù¿¿ Ù¿ ı¿ ıJ¿ ı[¿ ı£¿ ı·¿ ˆ&¿ ˆh¿ ˆ§¿ ˆ™¿ ˆ¬¿ ˆ”¿ ˆı¿ ˜2¿ ˜8¿ ˜`¿ ˜g¿ ˜©¿ ˜√¿ ¯¿ ¯e¿ ¯µ¿ ¯€¿ ¯‹¿ ¯˚¿ ˘Y¿ ˘∫¿ ˙¿ ˙t¿ ˙√¿ ˚¿ ˚d¿ ˚è¿ ˚Ã¿ ¸¿ ¸W¿ ¸s¿ ¸™¿ ¸‰¿ ¸Û¿ ˝'¿ ˝U¿ ˝¨¿ ˝˛¿ ˛8¿ ˛o¿ ˛†¿ ˛›¿ ˇ¿ ˇ<¿ ˇy¿ ˇ∞¿ ˇÛ¿ 9¿ ë¿ ‡¿¿H¿ö¿º¿Í¿-¿p¿û¿œ¿È¿)¿]¿é¿¬¿¿c¿¶¿⁄¿¿B¿p¿≠¿Ì¿!¿X¿å¿“¿¿g¿≠¿¿K¿Ö¿º¿¸¿	*¿	s¿	≈¿
¿
]¿
ö¿
Ô¿ ¿]¿ù¿Ï¿ ¿Z¿é¿¬¿¿K¿ã¿‘¿¿D¿K¿O¿P¿†¿Ó¿;¿v¿´¿¨¿Ì¿I¿†¿°¿Ó¿$¿*¿z¿À¿¿O¿ü¿Á¿3¿Ñ¿“¿!¿r¿y¿«¿ÿ¿ﬂ¿-¿W¿X¿â¿…¿‘¿˜¿H¿ã¿ñ¿ü¿¶¿™¿´¿Ô¿¿¿^¿è¿Õ¿¿¿J¿ù¿Ô¿@¿r¿∂¿⁄¿*¿I¿O¿k¿o¿p¿•¿´¿ﬂ¿Â¿¿q¿Ç¿¿J¿®¿≤¿“¿¿F¿x¿y¿ì¿ó¿ò¿Á¿F¿…¿)¿e¿ı¿˝¿ ¿ ¿ 1¿ 7¿ Z¿ ò¿ ≥¿ √¿ …¿ „¿!5¿!Ö¿!’¿!˚¿!¸¿"¿"]¿"≈¿#!¿#R¿#®¿$¿$W¿$ä¿$‡¿%"¿%a¿%Ø¿%æ¿%ˇ¿&:¿&Ä¿&ﬂ¿'&¿'j¿'®¿'Ú¿(-¿(k¿(µ¿(˘¿)I¿)ú¿*¿*]¿*û¿*ﬂ¿+>¿+`¿+¢¿+˘¿,L¿,ä¿,Ã¿,Ê¿-@¿-Ü¿-Ã¿.¿.|¿.˙¿/Y¿/ï¿/”¿0%¿0h¿0æ¿1¿1^¿1¨¿1˜¿2Y¿2ƒ¿3+¿3é¿4¿4l¿4ø¿5¿5i¿5¨¿6¿6Ü¿6Ò¿7\¿7≥¿8*¿8p¿8«¿9"¿9ê¿9⁄¿:,¿:v¿:º¿;¿;~¿;ÿ¿<?¿<é¿<‰¿<Î¿<Ô¿<¿<¸¿=¿=K¿=_¿=e¿=Ü¿=⁄¿>,¿>~¿>¶¿>ß¿>»¿?¿?K¿?ç¿?¿¿?˛¿@>¿@|¿@¢¿@‘¿A¿A2¿Ab¿As¿Aü¿A«¿AÛ¿B3¿Bc¿Bë¿Bª¿BÌ¿C¿C?¿Cq¿Cü¿C’¿D¿DQ¿Dè¿Dª¿DÁ¿E'¿EK¿Es¿E©¿Eﬂ¿F¿F1¿FM¿FÅ¿F≠¿F◊¿G¿G;¿GÅ¿G∑¿G„¿H¿H;¿Hc¿Hï¿H…¿Hı¿I#¿IO¿Iá¿I√¿I˝¿J5¿J}¿J±¿J·¿K¿KC¿Kk¿K•¿KÂ¿L!¿L]¿Lè¿L—¿L˚¿M-¿Ma¿Mü¿MÀ¿M˚¿N'¿NS¿Ná¿N¡¿Nı¿O/¿O]¿Oç¿Oë¿Oí¿Oû¿O≥¿Oﬂ¿P1¿PÅ¿P—¿P˜¿P¯¿Q¿Q4¿QS¿Qu¿Qì¿Q≠¿Q…¿QÂ¿R¿R¿R.¿RD¿RY¿Rm¿RÇ¿Rë¿R§¿Rµ¿R»¿RÂ¿R˙¿S¿S ¿S6¿SG¿SY¿So¿SÉ¿Sõ¿S¥¿S”¿SÔ¿T¿T¿T2¿TT¿Te¿T}¿Tï¿T¶¿T∏¿T“¿TÈ¿T¸¿U¿U!¿U:¿UZ¿Ur¿UÖ¿Uñ¿U´¿Uº¿U“¿UÈ¿U¸¿V¿V#¿V<¿VW¿Vq¿Vä¿V´¿V¬¿V◊¿VÎ¿W¿W¿W-¿WJ¿We¿WÄ¿Wñ¿W¥¿W∆¿W‹¿WÛ¿X¿X"¿X7¿XJ¿X]¿Xt¿Xé¿X•¿Xø¿X”¿Y¿Y!¿Y(¿YK¿YO¿YP¿Y\¿Y°¿YÃ¿Z¿ZT¿Z¢¿Z¿[¿[¿[2¿[‡¿\g¿]/¿]⁄¿^e¿^Û¿_~¿`	¿`∞¿a^¿aÒ¿bê¿bû¿c"¿c†¿d7¿dŸ¿ec¿eÍ¿fk¿f¯¿gv¿g˜¿hÑ¿i¿i≠¿j4¿j‹¿k{¿kˇ¿lÉ¿m%¿mE¿m≥¿n/¿nß¿o¿o§¿oº¿p<¿p”¿qj¿r¿rº¿sã¿t:¿tÆ¿u¿uª¿v)¿v–¿w{¿x¿x±¿yL¿yˇ¿z∫¿{C¿{ˆ¿|…¿}t¿~¿~∂¿a¿Ù¿Ä´¿Ån¿Ç)¿Ç‰¿Éã¿ÑR¿ÑÈ¿Öê¿Ü;¿Ü˙¿án¿à¿à¨¿â¿â«¿ä~¿ã)¿ã≤¿å)¿å_¿ç¿ç
¿ç¿ç¿çW¿çz¿ç~¿ç«¿é¿é ¿é$¿és¿é¡¿é≈¿è¿èU¿èY¿è™¿èı¿êD¿êf¿êj¿êx¿ê|¿ê∆¿ë¿ë#¿ëe¿ëè¿ëﬂ¿í0¿í}¿í±¿íÙ¿ìE¿ìm¿ìë¿ì∑¿ì∆¿ìŸ¿î/¿î4¿î5¿îZ¿îs¿îï¿î‡¿ï ¿ï=¿ïN¿ïz¿ï®¿ï·¿ñ¿ñ@¿ñy¿ñ™¿ñ≥¿ñ¥¿ñ÷¿ó¿ó¿ó ¿óÄ¿óÅ¿óç¿óı¿óˆ¿ò¿òÇ¿òÉ¿òè¿ô¿ô¿ôK¿ôQ¿ôì¿ô‡¿ö0¿öj¿öp¿ö¡¿õ¿õH¿õT¿õÅ¿õù¿õ∂¿õ⁄¿ú¿ú ¿úD¿ú_¿úf¿úî¿ú™¿ú“¿úÚ¿ù¿ùP¿ùn¿ùû¿ùÿ¿û¿û¿û¿û¿û¿û#¿û\¿ûú¿û·¿ü¿ü%¿üY¿ü`¿üd¿üf¿üg¿ü∂¿†¿†V¿†£¿†€¿†ﬂ¿°,¿°{¿°∞¿°ÿ¿¢(¿¢F¿¢j¿¢ï¿¢∑¿¢‡¿£¿£I¿£r¿£®¿£∞¿£∑¿£∏¿§¿§.¿§0¿§1¿§<¿§_¿§´¿§¨¿§…¿§Ó¿§Ô¿•=¿•V¿•b¿•ª¿•º¿•»¿•Î¿¶6¿¶^¿¶ç¿¶æ¿ß ¿ß¿ß¿ß¿ßV¿ßÑ¿ßà¿ß◊¿ß¯¿®¿®M¿®N¿®û¿®Ë¿®¯¿©¿©¿©U¿©[¿©¨¿©÷¿©¿©Ò¿™<¿™w¿™•¿™æ¿™·¿™˚¿´¿´¿´?¿´g¿´m¿´ê¿´î¿´ñ¿´ó¿´‘¿´ÿ¿¨¿¨j¿¨õ¿¨ü¿¨Ì¿≠=¿≠à¿≠¶¿≠™¿≠˜¿ÆF¿Æï¿Æü¿Æ£¿ÆÍ¿ÆÓ¿Ø ¿Ø¿Ø&¿Ø:¿ØÖ¿Øó¿ØØ¿Ø«¿Ø÷¿ØÒ¿∞¿∞	¿∞¿∞¿∞m¿∞ü¿±¿±¿±;¿±j¿±p¿±¿¿±¯¿≤¿≤+¿≤D¿≤o¿≤ö¿≤«¿≤Ù¿≤ı¿≥¿≥E¿≥F¿≥i¿≥ï¿≥ñ¿≥‘¿≥⁄¿¥'¿¥u¿¥é¿¥«¿¥»¿µ¿µ¿µc¿µ≥¿∂¿∂E¿∂K¿∂á¿∂„¿∂‰¿∑)¿∑/¿∑{¿∑Ã¿∏¿∏Q¿∏W¿∏ì¿∏Î¿∏Ï¿π;¿πÑ¿πä¿π—¿∫¿∫3¿∫9¿∫I¿∫O¿∫õ¿∫œ¿ª¿ªA¿ª©¿ª™¿ª˙¿º ¿ºQ¿ºÜ¿ºå¿ºú¿º¢¿ºÏ¿Ω¿Ωk¿Ωä¿Ω‰¿æ=¿æD¿æH¿æI¿æî¿æ™¿æ≈¿æ›¿æÛ¿æ˙¿ø¿øE¿øp¿øw¿ø{¿ø|¿ø≤¿ø∏¿¿¿¿T¿¿ü¿¿„¿¡%¿¡H¿¡N¿¡^¿¡d¿¡∏¿¡Ï¿¬U¿¬p¿¬q¿¬•¿¬´¿¬Ù¿√E¿√ê¿√‘¿ƒ¿ƒ9¿ƒ?¿ƒO¿ƒU¿ƒ©¿ƒ€¿≈D¿≈]¿≈^¿≈≤¿≈∏¿∆¿∆D¿∆J¿∆ë¿∆Ω¿∆ﬂ¿«-¿«~¿«Æ¿«œ¿«–¿»¿»¿»	¿»;¿»Ö¿»†¿»∞¿»∂¿»–¿…¿…F¿…M¿…Q¿…R¿…†¿…Õ¿…”¿ #¿ V¿ ö¿ »¿ È¿ÀO¿À∏¿Àø¿À√¿Àƒ¿À–¿ÀÛ¿Ã¿Ã3¿Ã9¿Ã[¿ÃÖ¿Ã¨¿Ã∞¿Ã±¿ÃΩ¿Ãˆ¿Ã˜¿Õ¿ÕH¿Õs¿Õƒ¿Œ¿Œ¿Œ¿Œ"¿Œ=¿Œ¨¿Œ∞¿Œ≤¿Œ≥¿ŒÂ¿ŒÊ¿œ)¿œm¿œï¿œ»¿œ…¿œ˛¿–¿–<¿–\¿–É¿–¨¿–œ¿–ı¿—¿—F¿—f¿—à¿—±¿—‹¿“¿“)¿“P¿“~¿“ù¿“æ¿“Ê¿”¿”4¿”[¿”Å¿”Æ¿” ¿”Ë¿‘¿‘4¿‘U¿‘x¿‘ñ¿‘∫¿‘Á¿’¿’8¿’c¿’ë¿’≤¿’“¿’˜¿÷¿÷<¿÷a¿÷~¿÷ö¿÷ø¿÷Ê¿◊¿◊O¿◊q¿◊t¿◊u¿◊©¿◊»¿◊Ê¿ÿ¿ÿ-¿ÿV¿ÿy¿ÿü¿ÿƒ¿ÿ¿Ÿ¿Ÿ2¿Ÿ[¿ŸÜ¿Ÿ´¿Ÿ”¿Ÿ˙¿⁄(¿⁄G¿⁄h¿⁄ê¿⁄∫¿⁄ﬁ¿€¿€+¿€X¿€t¿€í¿€∑¿€ﬁ¿€ˇ¿‹"¿‹@¿‹d¿‹ë¿‹ª¿‹‚¿›¿›;¿›\¿›|¿›°¿›»¿›Ê¿ﬁ¿ﬁ(¿ﬁD¿ﬁi¿ﬁê¿ﬁµ¿ﬁ˘¿ﬂ¿ﬂ¿ﬂ¿ﬂO    
AdaptationThemeExtensionMaterialTapTargetSize	ThemeDataMaterialBasedCupertinoThemeDataCupertinoBasedMaterialThemeData_IdentityThemeDataCacheKey
_FifoCacheVisualDensity_colorSchemeLightM3_colorSchemeDarkM3 /y